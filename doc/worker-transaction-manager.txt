This document describes our current thoughts on the design of the transaction
manager for the worker.  We start with the assumptions and requirements:

Requirements
============

 - on the commit of a top-level transaction, we need to find all objects that
   were read, written, or created in any non-aborted subtransaction.  The
   creates list and read list should be disjoint, as should the creates list and
   the writes list.

 - on the rollback of any transaction, we need to restore all objects to the
   state they held before that transaction began

 - we need to ensure that no transaction reads two different versions of an
   object

 - no two threads can make conflicting accesses to the same data (TODO: this is
   vague)


Assumptions
===========

 - once the top-level transaction within a thread aborts or commits, that thread
   will terminate without performing further operations on the transaction
   manager.
 
 - the fetch operation will not be invoked concurrently on the same object

Data structures and invariants
==============================

We store the following information per transaction:
 - reads
      a collection of all objects read in this transaction or completed
      subtransactions

 - writes
      a collection of all objects written in this transaction or completed
      subtransactions

 - creates 
      a collection of all objects created in this transaction or completed
      subtransactions

 - parent
      the parent transaction of this transaction, or null if this tx is a
      top-level transaction

 - children
      the collection of subtransactions.  parent and children are inverses

 - abortSignal
      a flag indicating that this transaction should abort.  This flag is
      checked before each operation (and this check will not be mentioned
      further)

Per object data:
 - writer
      The unique running transaction that has written to the object, or null

 - reader
      Any transaction that has logged a read of the object, or null

 - numWriters
      The number of writers who desire or have aquired write locks

 - history
      The state of the object at the beginning of the writer transaction

 - readList
      A reference to the global read list and version number for this object
      (see global data below)

Per thread data:
 - current
      The current transaction in this thread

Global data:
 - readList
      A map from oids to a version number and a list of transactions that have
      read that version of the object.  It should be the case that for each
      transaction tx, if o is in tx.reads then tx is in readlist[o] and
      vice-versa

We say that a transaction has acquired a write lock on an object if any entry in
the objects history list has writer set to that transaction.  We say that a
transaction has acquired a read lock if it is in the readList for that object.

A set of locks is valid if for any pair of locks l1 and l2, one of the following
holds:
 1. l1 and l2 are both read locks
 2. l1 is held by a transaction that is an ancestor of the tx holding l2
 3. l2 is held by a transaction that is an ancestor of the tx holding l1
We maintain the invariant that the set of locks is always valid.


Operations
==========
The transaction manager needs to be notified of the following events/perform the
following operations:
 - transaction begin
 - transaction commit
 - transaction abort
 - object read
 - object write
 - object create
 - object fetch
 - thread fork

Here is an outline of the steps required for each operation to maintain the
above invariants:

 - begin
    - Create a new tx log with empty fields
    - Set parent to current and current to new
    - Add tx log to parents children

 - commit tx
    - Wait until no more children
    - For each object read:
       - perform read notification on the parent tx
       - remove tx from the object's read log
       - if the read log is empty (happens if this is top-level tx) remove the read list
    - For each object written:
       - set the writer to the parent
       - if the parent has already written this object:
          - discard one layer of history
          - decrement numWriters
       - otherwise:
          - add object to the parents write set
    - For each create:
       - add the object to the parent's create set
       - set the writer to the parent
    - remove self from parents children and update current pointer
    - if top level (i.e. current is null)
       - remove creates from read set and write set
       - commit to core
       - reset

 - abort tx
    - signal all children to terminate
    - wait until no more children
    - discard all creates (and remove from object table)
    - For each object read:
       - remove self from global read list
       - remove global read list if it is empty
    - For each object written:
       - decrement numWriters
       - restore all other fields from history
    - remove self from parents children and update current pointer

 - read object
    - if reader is us, return
    - if tx is in the read list (or equivalently, if the object is in the read
      set), set the reader and return
    - wait until valid (TODO: I don't think current scheme is optimal)
    - add object to read set
    - add tx to read list
    - set the reader and return

 - write object
    - if writer is us, return
    - increment numWriters
    - wait until writer is in ancestry and all readers in ancestry
    - create history
    - set writer to us
    - add object to write set

 - create object
    - set writer to us
    - set reader to null
    - set numWriters to 1
    - add object to creates set

 - fetch object
    - compare version against global read set
       - mismatch: notify all tx's on read list to abort
       - update version
    - set the global reference in the object

 - fork thread
    - create a new thread with the same tx log as the current thread
    - execute begin on each thread

vim: ts=3 sw=3 ai nonumber et
