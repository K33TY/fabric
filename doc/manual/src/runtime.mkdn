The Fabric runtime system {#runtime}
=========================
There are three types of nodes in the Fabric design: stores, workers,
and dissemination nodes. In the current implementation, there are no
separate dissemination nodes; rather each worker and store participates
as a peer in the dissemination network.

  * @subpage node-config
  * @subpage start-nodes


@page node-config Creating Fabric nodes

Fabric nodes run relative to an _application home_ directory, which
contains the nodes' configuration and state. As a transitional naming
mechanism, the application home can also contain naming information,
specifying how to contact other Fabric nodes.

This guide demonstrates how to create and configure a Fabric node.  As a
running example, the node is named `valinor` and uses `/opt/fabric` as
the application home. Commands given are relative to the Fabric
installation directory, and assume the Fabric `bin` directory is on the
`PATH`.

The name of the node can be any legal DNS hostname. This should ideally
match the host machine's DNS name. However, with the transitional naming
mechanism, a node's name need not have a DNS entry, nor is it required
to match the host machine's DNS name.


Create a certificate authority
------------------------------
Fabric uses SSL to secure communication between nodes, so each node must
have an X.509 certificate signed by a certificate authority (CA). While
commercial CAs may be used, the Fabric distribution uses OpenSSL to
provide a custom CA for convenience.

This Fabric distribution comes with a CA whose key pair and certificate
have been pre-generated. Using this pre-generated CA avoids having to
distribute the CA certificate across separate Fabric installations, but
is insecure. For security, we recommend creating your own CA:
~~~
  $ make-ca
~~~
By default, this creates a CA in `etc/ca` of the Fabric installation,
overwriting any previously generated CA, and saves the CA certificate in
`etc/ca/ca.crt`.


Generate a key pair and certificate
-----------------------------------
Each Fabric node needs a key pair and a signed X.509 certificate.  These
can be created in one of two ways.  The [first method](#make-node) is
provided for convenience.  The [second method](#genkey) is suggested for
better flexibility.

### Method 1: Using `make-node`
@anchor make-node

This method creates the key pair and certificate in a single step, using
the CA in the Fabric installation to sign the certificate.
~~~
  $ make-node --app-home /opt/fabric --name valinor
~~~
This creates a Java keystore `/opt/fabric/etc/keys/valinor.keystore`
containing the node's private key and certificate. Before importing the
certificate into the node's keystore, the CA certificate will be
displayed, and you will be asked whether it should be trusted.

### Method 2: Using `genkey`
@anchor genkey
This method creates the key pair and certificate in multiple steps, and
is useful if you are using a commercial CA, or if the CA is on a
separate Fabric installation.

Generate the key pair and the certificate-signing request (CSR).
~~~
  $ genkey --app-home /opt/fabric --name valinor
~~~
This creates a Java keystore `/opt/fabric/etc/keys/valinor.keystore`
containing the node's private key, and a CSR in
`/opt/fabric/etc/csr/valinor.csr`.

Have the CSR signed by a CA. To sign using Fabric's CA facility:
~~~
  $ ca-sign /opt/fabric/etc/csr/valinor.csr /tmp/valinor.crt
~~~
This creates a signed certificate in `/tmp/valinor.crt`.

Once you have a signed certificate, import it and the CA's certificate
into the node's keystore:
~~~
  $ import-cert --keystore /opt/fabric/etc/keys/valinor.keystore \
      --ca etc/ca/ca.crt /tmp/valinor.crt
~~~
Before importing the certificates, this will display the CA certificate
and ask you whether it should be trusted.


Import other CA certificates
----------------------------
If this node will be communicating with nodes whose certificates are
signed by other CAs, you will also need to import the certificates of
those CAs.
~~~
  $ add-trusted-ca --keystore /opt/fabric/etc/keys/valinor.keystore \
      other-ca.crt
~~~
Before importing the certificate into the node's keystore, this will
display the CA certificate and ask you whether it should be trusted.


Configure the node
------------------
Our node `valinor` reads its configuration information from the file
`etc/config/valinor.properties` in the application home. The Fabric
distribution offers `etc/config/EXAMPLE.properties.in` as a template.
Copy this to `/opt/fabric/etc/config/valinor.properties` and edit the
file:
~~~
  $ cp etc/config/EXAMPLE.properties.in /opt/fabric/etc/config/valinor.properties
  $ vim /opt/fabric/etc/config/valinor.properties
~~~

This file contains a few configuration parameters:
  * `fabric.node.keystore` is required. It specifies the location of the
    node's keystore file. In our example, this is
    `/opt/fabric/etc/keys/valinor.keystore`.

  * `fabric.worker.homeStore` is only required for workers. It specifies
    the name of the store that will hold the worker's principal object.

  * `fabric.worker.port` is optional. It specifies the network port on
    which the node should listen for remote calls.

  * `fabric.store.port` is optional. For stores, it specifies the
    network port on which the store should listen for connections.

  * `fabric.node.hostname` is optional. It specifies the IP address or
    the DNS name of the node's host machine. By default, this is the
    same as the node's name.


Configure name resolution
-------------------------
We must specify how other nodes can contact the node we just created.
Ideally, this is done by adding a DNS entry with with an `A` (or `AAAA`)
record containing the host machine's IP address and a `TXT` record
specifying the node's network-port configuration. This use of the `TXT`
record prevents the node's network-port configuration from being tied to
the node's name (Ã  la http://example.com:8080/) and allows the port
configuration to change over time.

Because this use of the `TXT` record is non-standard (and currently
unimplemented), we provide a transitional mechanism for resolving node
names.



@page start-nodes Starting Fabric nodes

To start a store, run:
~~~
  $ fab-store --name [store_name]
~~~
Unless you are using mobile code, the store must have the classes of
objects that it will store on its classpath.  This can be specified with
the `--jvm-cp` option:
~~~
  $ fab-store --jvm-cp /path/to/classfiles --name [store_name]
~~~
