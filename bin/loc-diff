#!/usr/bin/python
####
# Counts and categorizes lines of code in the Fabric project that have changed
# between two different branches/tags.

import collections, copy, os, re, shutil, subprocess, sys

###
# Configuration
###

# Location of normalize-code script, relative to Fabric home.
normalizeCode = 'tools/code-normalizer/bin/normalize-code'

# Regexp for full paths of files to ignore.
ignoreFilesRE = re.compile("""^.*/(
                              bin/[^/]*  # bin scripts
                            | etc/.*     # etc directories
                            | \.gitignore
                            | README
                            | build.xml
                            | package-info.java
                            | .*\.(png|dia|xml|html|flex)
                            )$""", re.X)

# Regexp for examples to include. All other examples will be ignored.
includeExamplesRE = re.compile("""^\./fab-(after|before)/examples/
      (auction|friendmap)
    /src/.*$""", re.X)

# Regexp for source files.
sourceFilesRE = re.compile('^.*\.(java|jif|fil|flex|ppg|fab|cpp|h|cup)$')

categories = collections.OrderedDict()

# Stuff in src/compiler.
categories['Common compiler'] = ['src/compiler/codebases']
categories['FabIL compiler'] = ['src/compiler/fabil']
categories['Fabric compiler'] = ['src/compiler/fabric']

# Stuff in src/system.
categories['Common system functionality'] = \
  [ 'src/system/fabric/common',
    'src/system/fabric/net' ]
categories['Dissemination layer'] = ['src/system/fabric/dissemination']
categories['Fabric runtime support (Java)'] = ['src/system/fabric/lang']
categories['Message protocols'] = ['src/system/fabric/messages']
categories['Store'] = ['src/system/fabric/store']
categories['Worker'] = ['src/system/fabric/worker']

# Stuff in src/arrays and src/runtime.
categories['Fabric runtime support (FabIL)'] = \
  [ 'src/runtime/fabric/lang',
    'src/runtime/fabric/runtime',
    'src/arrays' ]
categories['FabIL port of GNU classpath'] = ['src/runtime/fabric/util']

# Stuff in src/signatures.
categories['Fabric signatures for java.*'] = ['src/signatures/fabric/java']
categories['Fabric signatures for fabric.*'] = \
  ['src/signatures/fabric/fabric']
categories['FabIL signatures for java.*'] = ['src/signatures/fabil/java/']
categories['Fabric signatures for javax.*'] = ['src/signatures/fabil/javax']
categories['FabIL signatures for fabric.*'] = ['src/signatures/fabil/fabric']

# Stuff in src/lib.
categories['SIF (Java)'] = ['src/lib/sif/src']
categories['SIF (Fabric)'] = ['src/lib/sif/fab-src']
categories['SIF (signatures)'] = ['src/lib/sif/sig-src']
categories['Collections'] = ['src/lib/collections']
categories['FabFX'] = ['src/lib/fabfx']

# Other.
categories['Bootstrap support'] = ['src/bootstrap']

# Examples.
categories['Auction example (FabIL)'] = ['examples/auction/src/fabil']
categories['Auction example (Fabric)'] = ['examples/auction/src/fabric']

categories['FriendMap support classes (FabIL)'] = \
  ['examples/friendmap/src/fabil']
categories['FriendMap support classes (Fabric)'] = \
  ['examples/friendmap/src/fabric/scripts']
categories['FriendMap support classes (Fabric signatures)'] = \
  ['examples/friendmap/src/fabric/signatures']
categories['FriendMap runtime extensions (Fabric)'] = \
  ['examples/friendmap/src/fabric/trusted']
categories['FriendMap v1 example (Fabric)'] = \
  [ 'examples/friendmap/src/fabric/friendmap_1.0_codebase',
    'examples/friendmap/src/fabric/mapserv_1.0_codebase',
    'examples/friendmap/src/fabric/snapp_1.0_codebase' ]
categories['FriendMap v2 example (Fabric)'] = \
  [ 'examples/friendmap/src/fabric/friendmap_2.0_codebase',
    'examples/friendmap/src/fabric/snapp_2.0_codebase']

categories['Hospital example'] = ['examples/hospital/src']
categories['Buzzblog example'] = ['examples/buzzblog/src']
categories['Rainforest example'] = ['examples/rainforest/src']

########################################################################

if len(sys.argv) - 1 != 6:
  # Print usage info.
  scriptName = re.match('^(?:.*/)?([^/]+)$', sys.argv[0]).group(1)
  print("""\
Usage: %s FABBRANCH1 FABBRANCH2 JIFBRANCH1 JIFBRANCH2 POLYBRANCH1 POLYBRANCH2

  Determines the number of lines of code that have been added, modified and
  deleted in Fabric FABBRANCH2 (relative to FABBRANCH1), in Jif JIFBRANCH2
  (relative to JIFBRANCH1), and in Polyglot POLYBRANCH2 (relative to
  POLYBRANCH1).

  All of the arguments specify an argument to git checkout. Examples:

    master
    origin/abrtchan
    601e5582

  This script exports fresh working copies into a temporary directory. The only
  prerequisites for running this script are:

    - have config.properties point to a Polyglot installation,
    - have tools/code-normalizer built (done automatically by
        the default Ant target in the top-level build file), and
    - have diffstat installed.""" % scriptName)
  sys.exit(1)

# Sanity check: make sure categories are non-overlapping.
# Also compute max category name length for pretty output later.
maxCatNameLen = 0
catKey = list(categories.keys())
for i in range(len(catKey)):
  if maxCatNameLen < len(catKey[i]):
    maxCatNameLen = len(catKey[i])

  for j in range(i+1, len(catKey)):
    for path1 in categories[catKey[i]]:
        for path2 in categories[catKey[j]]:
          if path1.startswith(path2) or path2.startswith(path1):
            sys.stderr.write(
              ('Warning: Path "%s" in category "%s" is redundant with '
                + 'path "%s" in category "%s"' + '\n')
                % (path1, catKey[i], path2, catKey[j]))

branch1Name = sys.argv[1]
branch2Name = sys.argv[2]
jifBranch1 = sys.argv[3]
jifBranch2 = sys.argv[4]
polyBranch1 = sys.argv[5]
polyBranch2 = sys.argv[6]

try:
  if 'FABRIC_HOME' in os.environ:
    os.chdir(os.environ['FABRIC_HOME'])
  else:
    bindir = re.match('(.*/)(?:[^/]+)?$', sys.argv[0]).group(1)
    if bindir == '': bindir = '.'
    fabric = bindir + '/..'
    os.chdir(fabric)
except OSError:
  sys.exit('Run from the top directory of Fabric')

if not os.path.isdir('src') or not os.path.isfile('bin/loc-diff'):
  sys.exit('Run from the top directory of Fabric')

# Make sure we're in a clean FABRIC/tmp.
try: shutil.rmtree('tmp')
except OSError: pass
os.mkdir('tmp')
try: os.chdir('tmp')
except OSError: sys.exit('error changing to FABRIC/tmp directory')

# Clone Fabric.
print('Cloning Fabric from git...')
if subprocess.call(['git', 'clone', '..', 'fabric'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Change into FABRIC/tmp/fabric.
try: os.chdir('fabric')
except OSError: sys.exit('error changing to FABRIC/tmp/fabric directory')

# Check out BRANCH1.
print('Checking out BRANCH1 "%s"...' % branch1Name)
if subprocess.call(['git', 'pull'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)
if subprocess.call(['git', 'checkout', branch1Name],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Change into FABRIC/tmp.
try: os.chdir('..')
except OSError: sys.exit('error changing to FABRIC/tmp directory')

print('Exporting Fabric BRANCH1 "%s"...' % branch1Name)
os.mkdir('fab-before')

# Export fab-before/{src,examples,lib}.
if subprocess.call(['rsync', '-SHEPAaX',
      'fabric/src', 'fabric/examples', 'fabric/lib', 'fab-before/'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Change into FABRIC/tmp/fabric.
try: os.chdir('fabric')
except OSError: sys.exit('error changing to FABRIC/tmp/fabric directory')

# Check out BRANCH2.
print('Checking out BRANCH2 "%s"...' % branch2Name)
if subprocess.call(['git', 'checkout', branch2Name],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Change into FABRIC/tmp.
try: os.chdir('..')
except OSError: sys.exit('error changing to FABRIC/tmp directory')

print('Exporting Fabric BRANCH2 "%s"...' % branch2Name)
os.mkdir('fab-after')

# Export fab-after/{src,examples}.
if subprocess.call(['rsync', '-SHEPAaX',
      'fabric/src', 'fabric/examples', 'fab-after/'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Clean up Fabric.
shutil.rmtree('fabric')

# Clone Jif.
print('Cloning Jif from git...')
if subprocess.call(['git', 'clone',
      'https://apl.cs.cornell.edu/git/jif'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# For jif-before, use fab-before/lib/jif, if it exists.
if os.path.isdir('fab-before/lib/jif/src'):
  print('Using fab-before/lib/jif for jif-before')
  shutil.move('fab-before/lib/jif/src', 'jif-before')
else:
  # Check out BRANCH1.
  print('Checking out Jif BRANCH1 (%s")...' % jifBranch1)
  os.chdir('jif')
  if subprocess.call(['git', 'checkout', jifBranch1],
      stdout=open(os.devnull, 'w')) != 0:
    sys.exit(1)
  os.chdir('..')

  # Export jif-before.
  print('Exporting Jif BRANCH1 ("%s")...' % jifBranch1)
  if subprocess.call(['rsync', '-SHEPAaX', 'jif/src/', 'jif-before/'],
      stdout=open(os.devnull, 'w')) != 0:
    sys.exit(1)

# Remove fab-before/lib.
try: shutil.rmtree('fab-before/lib')
except OSError: pass

# Check out BRANCH2.
os.chdir('jif')
print('Checking out Jif BRANCH2 ("%s")...' % jifBranch2)
if subprocess.call(['git', 'checkout', jifBranch2],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)
os.chdir('..')

# Export jif-after.
print('Exporting Jif BRANCH2 ("%s")...' % jifBranch2)
if subprocess.call(['rsync', '-SHEPAaX', 'jif/src/', 'jif-after/'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Clean up Jif.
shutil.rmtree('jif')

# Clone Polyglot.
print('Cloning Polyglot from git...')
if subprocess.call(['git', 'clone',
      'https://github.com/polyglot-compiler/polyglot'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Check out BRANCH1.
os.chdir('polyglot')
print('Checking out Polyglot BRANCH1 ("%s")...' % polyBranch1)
if subprocess.call(['git', 'checkout', polyBranch1],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)
os.chdir('..')

# Export polyglot-before.
print('Exporting Polyglot BRANCH1 ("%s")...' % polyBranch1)
if subprocess.call(['rsync', '-SHEPAaX', 'polyglot/src/', 'polyglot-before/'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Check out BRANCH2.
os.chdir('polyglot')
print('Checking out Polyglot BRANCH2 ("%s")...' % polyBranch2)
if subprocess.call(['git', 'checkout', polyBranch2],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)
os.chdir('..')

# Export polyglot-after.
print('Exporting Polyglot BRANCH2 ("%s")...' % polyBranch2)
if subprocess.call(['rsync', '-SHEPAaX', 'polyglot/src/', 'polyglot-after/'],
    stdout=open(os.devnull, 'w')) != 0:
  sys.exit(1)

# Clean up Polyglot.
shutil.rmtree('polyglot')

# Construct the command to normalize sources.  While we do this, delete all
# non-source files, and make sure the categories are exhaustive.
normalizeCmd = ['../' + normalizeCode]
examplesRE = re.compile('^\./fab-(after|before)/examples/.*$')
baseCompilersRE = re.compile('^\./(jif|polyglot)-(after|before)/.*$')
for root, dirs, files in os.walk('.'):
  for filename in files:
    fullPath = os.path.join(root, filename)

    ignored = ignoreFilesRE.match(fullPath) != None
    isExample = examplesRE.match(fullPath) != None
    isIncludedExample = includeExamplesRE.match(fullPath) != None

    if ignored or (isExample and not isIncludedExample):
      os.remove(fullPath)
      continue

    if sourceFilesRE.match(filename) == None:
      sys.stderr.write('Warning: unrecognized source file: %s\n' % fullPath)
      continue

    normalizeCmd.append(fullPath)

    if baseCompilersRE.match(fullPath) != None: continue

    matched = False
    for cat, paths in categories.items():
      for path in paths:
        matched = re.match('^\./fab-(before|after)/' + path, fullPath) != None
        if matched: break
      if matched: break

    if not matched:
      sys.stderr.write('Warning: file not counted: "%s"\n' % fullPath)

# Normalize sources.
print('Normalizing source files...')
if subprocess.call(normalizeCmd) != 0:
  sys.exit('Error while normalizing code')

# Collect stats.
print('Diffing...')
regexps = [
  re.compile(', (\d+) insertions'),
  re.compile(', (\d+) deletions'),
  re.compile(', (\d+) modifications')
]
fieldLen = [3, 3, 3, 3, 3]
for base, cats in {
    'fab': copy.copy(categories),
    'jif':
      {'Jif compiler': ['.']},
    'polyglot':
      {'Polyglot compiler': ['.']}}.items():
  for cat, paths in cats.items():
    stats = [0, 0, 0, 0, 0]
    for path in paths:
      # Get diff counts.
      output = subprocess.check_output(
          'diff -urN %s-before/"%s" %s-after/"%s" | diffstat -bms'
            % (base, path, base, path),
          shell=True).decode('utf-8')

      for i in [0, 1, 2]:
        match = regexps[i].search(output)
        if match != None:
          stats[i] += int(match.group(1))
          if fieldLen[i] < len(str(stats[i])):
            fieldLen[i] = len(str(stats[i]))

      # Get line count.
      output = subprocess.check_output(
        'find %s-after/"%s" -type f -print0 | wc -l --files0-from=- | tail -n 1'
          % (base, path),
        shell=True).decode('utf-8')
      match = re.match('(\d+) total', output)
      if match != None:
        stats[4] += int(match.group(1))
        if fieldLen[4] < len(str(stats[4])):
          fieldLen[4] = len(str(stats[4]))

    # Get change total.
    stats[3] = stats[0] + stats[1] + stats[2]
    if fieldLen[3] < len(str(stats[3])):
      fieldLen[3] = len(str(stats[3]))

    categories[cat] = stats

# Output.
categoryFormatter = '{:.<' + str(maxCatNameLen+3) + '} '
insFormatter = '{:>' + str(fieldLen[0]) + '} + '
delFormatter = '{:>' + str(fieldLen[1]) + '} + '
modFormatter = '{:>' + str(fieldLen[2]) + '} = '
deltaFormatter = '{:>' + str(fieldLen[3]) + '} | '
noChanges = \
  ('{:-^' + str(fieldLen[0] + fieldLen[1] + fieldLen[2] + fieldLen[3] + 9)
    + '} | ').format('(no changes)')
locFormatter = '{:>' + str(fieldLen[4]) + '}'

# Print header.
output = ('{:<' + str(maxCatNameLen+3) + '}').format('') + ' '
output += ('{:^' + str(fieldLen[0]) + '}').format('ins') + ' + '
output += ('{:^' + str(fieldLen[1]) + '}').format('del') + ' + '
output += ('{:^' + str(fieldLen[2]) + '}').format('mod') + ' = '
output += ('{:^' + str(fieldLen[3]) + '}').format('Δ') + ' | '
output += ('{:^' + str(fieldLen[4]) + '}').format('LOC')
print(output)

# Print data.
for cat, (ins, dels, mods, deltas, totalLOC) in categories.items():
  output = categoryFormatter.format(cat + ' ')
  if ins + dels + mods == 0:
    output += noChanges
  else:
    if ins == 0: ins = ''
    output += insFormatter.format(ins)

    if dels == 0: dels = ''
    output += delFormatter.format(dels)

    if mods == 0: mods = ''
    output += modFormatter.format(mods)

    if deltas == 0: deltas = ''
    output += deltaFormatter.format(deltas)
  output += locFormatter.format(totalLOC)
  print(output)

# vim: ts=2 sw=2 ai et
