<!--
  This is the Apache Ant build file for Fabric.
  See doc/ant-dep-graph.png to visualize the inter-target dependencies.
-->
<project name="fabric" default="all" basedir=".">
  <description>
    Fabric build file
  </description>

  <!-- Set global properties for this build -->

  <!-- Project name -->
  <property name="name" value="fabric" />

  <property file="${basedir}/config.properties" />

  <!-- set the prefix for accessing environment variables -->
  <property environment="env" />

  <!-- Polyglot installation -->
  <!-- If it is not defined in the properties file, use the environment variable $POLYGLOT. -->
  <condition property="polyglot.home" value="${env.POLYGLOT}">
    <and>
      <isset property="env.POLYGLOT" />
      <not>
        <isset property="polyglot.home" />
      </not>
    </and>
  </condition>
  <!-- As a last resort, try to use polyglot.jar from distribution -->
  <condition property="polyglot.home" value="${basedir}">
    <not><isset property="polyglot.home" /></not>
  </condition>

  <!-- Jif installation -->
  <!-- If it is not defined in the properties file, use the environment variable $JIF. -->
  <condition property="jif.home" value="${env.JIF}">
    <and>
      <isset property="env.JIF" />
      <not>
        <isset property="jif.home" />
      </not>
    </and>
  </condition>
  <!-- As a last resort, try to use jif.jar from distribution -->
  <condition property="jif.home" value="${basedir}">
    <not><isset property="jif.home" /></not>
  </condition>

  <!-- Source directory -->
  <property name="src" location="${basedir}/src"/>
  <property name="system.src" location="${src}/system"/>
  <property name="compiler.src" location="${src}/compiler"/>
  <property name="bootstrap.src" location="${src}/bootstrap"/>
  <property name="runtime.src" location="${src}/runtime"/>
  <property name="tests.fabnfs" location="${basedir}/tests/fabnfs"/>
  <property name="signatures.fabil.src" location="${src}/signatures/fabil"/>
  <property name="signatures.fabric.src" location="${src}/signatures/fabric"/>

  <!-- Directory for class file targets -->
  <property name="classes" location="${basedir}/classes"/>
  <property name="bootstrap.classes" location="${basedir}/bs-classes"/>
  <property name="runtime.classes" location="${basedir}/rt-classes"/>
  <property name="tests.classes" location="${basedir}/tests/classes"/>
  <property name="signatures.classes" location="${basedir}/sig-classes"/>
  <property name="signatures.fabil.classes" location="${signatures.classes}/fabil"/>
  <property name="signatures.fabric.classes" location="${signatures.classes}/fabric"/>

  <!-- Timestamp file for bootstrap classes. -->
  <property name="bootstrap.tstamp" location="${bootstrap.classes}/.tstamp"/>

  <!-- Distribution directory -->
  <property name="dist" location="${basedir}/dist"/>

  <!-- Binaries directory -->
  <property name="bin" location="${basedir}/bin"/>

  <!-- Configuration directory -->
  <property name="etc" location="${basedir}/etc"/>

  <!-- Library directory -->
  <property name="lib" location="${basedir}/lib"/>

  <!-- Var directory -->
  <property name="var" location="${basedir}/var"/>

  <!-- Jar files -->
  <property name="base.jar" location="${lib}/${name}.jar" />
  <property name="runtime.jar" location="${lib}/${name}-rt.jar" />
  <property name="signature.fabil.jar" location="${lib}/${name}-il-sig.jar" />
  <property name="signature.fabric.jar" location="${lib}/${name}-sig.jar" />

  <!-- fabc executable -->
  <property name="fabc" location="${bin}/fabc" />

  <!-- filc executable -->
  <property name="filc" location="${bin}/filc" />

  <path id="standard.classpath">
    <pathelement location="${classes}"/>

    <!-- jar files in the lib directory, excluding generated jars -->
    <fileset dir="${lib}">
        <include name="*.jar" />
        <exclude name="${name}*.jar" />
    </fileset>

    <!-- the Polyglot classes -->
    <pathelement path="${polyglot.home}/classes" />
    <pathelement path="${polyglot.home}/lib/polyglot.jar" />
    <pathelement path="${polyglot.home}/lib/ppg.jar" />
    <pathelement path="${polyglot.home}/lib/java_cup.jar" />
    <pathelement path="${polyglot.home}/lib/JFlex.jar" />

    <!-- the Jif classes -->
    <pathelement location="${jif.home}/rt-classes" />
    <pathelement location="${jif.home}/lib-classes" />
    <pathelement location="${jif.home}/classes" />
    <fileset dir="${jif.home}/lib">
      <include name="*.jar" />
    </fileset>
    <pathelement location="${jif.home}/src" />

    <pathelement path="${java.class.path}" />
  </path>

  <target name="configure" description="Configures Fabric"
      unless="configure.up-to-date">

    <echo message="java version is ${java.version}"/>
    <echo message="current directory is ${user.dir}"/>
    <echo message="Java home directory is ${java.home}"/>
    <echo message="Polyglot home directory is ${polyglot.home}"/>
    <echo message="Jif home directory is ${jif.home}" />

    <property name="configure.up-to-date" value="true"/>
  </target>

  <!-- Create appropriate executables in the bin directory -->
  <target name="bin-check">
    <uptodate property="bin.up-to-date" srcfile="bin/defs.in"
              targetfile="bin/defs" />
  </target>

  <target name="bin" depends="configure,bin-check" unless="bin.up-to-date">
    <fail message="Failed to find Polyglot.  Make sure that your POLYGLOT environment variable is set, and that you have built Polyglot.">
      <condition> <not> <and>
        <isset property="polyglot.home" />
        <available classname="polyglot.main.Version" classpathref="standard.classpath" />
      </and> </not> </condition>
    </fail>

    <fail message="Failed to find Jif.  Make sure that your JIF environment variable is set and that you have built Jif.">
      <condition> <not> <and>
        <isset property="jif.home" />
        <available classname="jif.Version" classpathref="standard.classpath" />
      </and> </not> </condition>
    </fail>

    <copy file="${bin}/defs.in" tofile="${bin}/defs">
      <filterset>
        <filter token="JAVA_HOME" value="${java.home}"    />
        <filter token="TOP"       value="${basedir}"      />
        <filter token="POLYGLOT"  value="${polyglot.home}" />
        <filter token="JIF"       value="${jif.home}" />
      </filterset>
    </copy>
  </target>

  <!-- Initialize the build -->
  <target name="init" depends="configure">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${classes}"/>
    <mkdir dir="${bootstrap.classes}"/>
    <mkdir dir="${runtime.classes}"/>
    <mkdir dir="${tests.classes}"/>
    <mkdir dir="${signatures.fabil.classes}"/>
    <mkdir dir="${signatures.fabric.classes}"/>
  </target>

<target name="package" depends="all,jars,fablib">
  <!-- Delete any old version of the packaged directory -->
  <delete dir="${name}"/>
  <!-- Create the package directory and subdirectories -->
  <mkdir dir="${name}"/>
  <mkdir dir="${name}/lib"/>
  <mkdir dir="${name}/bin"/>
  <mkdir dir="${name}/etc"/>
  <!-- Make sure polyglot and jif jars are built -->
  <subant target="jar" failonerror="false">
  		<fileset file="${polyglot.home}/build.xml"/>
  		<fileset file="${jif.home}/build.xml"/>
  </subant>
  <!-- Package the collections -->
  <subant target="jar" failonerror="false">
  		<fileset file="${basedir}/tests/jif/build.xml"/>
  </subant>
  <!-- Package SIF -->
  <subant target="jar" failonerror="false">
  		<fileset file="${basedir}/tests/sif/build.xml"/>
  </subant>
  <!-- Package SIF examples -->
  <subant target="jar-examples" failonerror="false">
  		<fileset file="${basedir}/tests/sif/build.xml"/>
  </subant>

  <!-- Move these jars into lib -->
  <move todir="${name}/lib">
    <fileset dir="${basedir}/tests/jif" includes="fabcoll.jar"/>
    <fileset dir="${basedir}/tests/sif" includes="*.jar"/>
  </move>
  
  <!-- Now copy other jar files into lib -->
  <copy todir="${name}/lib">
    <fileset dir="${basedir}/lib" includes="fabric.jar,fabric-rt.jar"/>
    <fileset dir="${basedir}/lib" includes="FreePastry-2.1.jar,je-3.3.75.jar"/>
    <fileset dir="${polyglot.home}/lib" includes="polyglot.jar,JFlex.jar,java_cup.jar"/>
    <fileset dir="${jif.home}/lib" includes="jif.jar,jiflib.jar,jifrt.jar"/>
    <fileset dir="${java.home}/lib" includes="rt.jar"/>
  </copy>

  <!-- Copy necessary scripts into bin -->
  <copy todir="${name}/bin">
    <fileset dir="${basedir}/bin" includes="fabc,fab,fab-core,genkey,startcore"/>
  </copy>

  <!-- Make sure these scripts are executable -->
  <chmod perm="755" dir="${name}/bin" includes="*" verbose="true"/>

  <copy file="${basedir}/bin/defs.package"  tofile="${name}/bin/defs" />
  <copy file="${basedir}/README.package"  tofile="${name}/README" />


  <!-- Copy etc -->
  <copy todir="${name}/etc">
    <fileset dir="${basedir}/etc" />
  </copy>

  <!-- Now package the directory as a tar.gz file -->
  <exec executable="tar"
           dir="${basedir}"
           failonerror="true"
           vmlauncher="false" >
      <arg value="-c" />
      <arg value="-z" />
      <arg value="-f" />
      <arg value="${name}.tar.gz" />
      <arg value="${name}/" />
  </exec>
  
  <!-- Now delete the directory -->
  <delete dir="${basedir}/${name}" />

</target>


  <!-- Compiles Fabric -->
  <target name="all"
    depends="fabric-compiler,fabil-compiler,fabric-system,worker-debug,fabric-signatures"
    description="Builds Fabric"/>

  <!-- Compiles the Fabric system -->
  <target name="fabric-system" depends="core,worker,dissemination"
      description="Builds Fabric"/>

  <target name="dust"
      description="Cleans up the generated runtime and signatures">
    <delete dir="${runtime.classes}"/>
    <delete dir="${signatures.fabil.classes}"/>
    <delete dir="${signatures.fabric.classes}"/>
    <delete dir="${signatures.classes}"/>
    <delete>
      <fileset dir="${lib}" includes="${name}*sig.jar"/>
    </delete>    
  	<subant target="clean">
  		<fileset file="tests/sif/build.xml"/>
  		<fileset file="tests/jif/build.xml"/>
  	</subant>    
  </target>

  <target name="clean" depends="dust"
      description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
    <!-- Delete the ${classes} and ${dist} directory trees -->
    <delete dir="${classes}"/>
    <delete dir="${bootstrap.classes}"/>
    <delete dir="${tests.classes}"/>
    <delete dir="${dist}"/>
    <delete dir="${var}"/>
    <delete>
      <fileset dir="${lib}" includes="${name}*.jar"/>
    </delete>
  	<subant target="clean">
  		<fileset file="tests/sif/build.xml"/>
  		<fileset file="tests/jif/build.xml"/>
  	</subant>
  </target>

  <target name="clobber" depends="clean"
      description="Cleans up the directory tree and deletes generated files">
    <delete>
      <fileset dir="${bin}">
        <include name="defs"/>
      </fileset>

      <fileset dir="${compiler.src}">
          <include name="**/Grm.java" />
          <include name="**/sym.java" />
          <include name="**/Lexer_c.java" />
          <include name="**/*_ppg.cup" />
      </fileset>
    </delete>
  </target>

  <target name="bootstrap-check">
    <uptodate property="bootstrap.up-to-date" targetfile="${bootstrap.tstamp}">
      <srcfiles dir="${bootstrap.src}" includes="**" />
    </uptodate>
  </target>

  <!-- Compiles the bootstrap classes. -->
  <target name="bootstrap" depends="init,bootstrap-check" unless="bootstrap.up-to-date">
    <touch file="${bootstrap.tstamp}"/>
    <javac target="1.5" srcdir="${bootstrap.src}"
        destdir="${bootstrap.classes}" debug="on">
      <include name="**" />
      <sourcepath path="${system.src}"/>
      <classpath refid="standard.classpath"/>
    </javac>

    <!--
      The bootstrap classes pull in stuff from the system.  Give all class
      files in ${bootstrap.classes} an ancient timestamp so they get recompiled
      when we build things for real.
    -->
    <touch millis="0">
      <fileset dir="${bootstrap.classes}">
        <include name="**/*.class"/>
      </fileset>
    </touch>
  </target>

  <target name="native-check">
    <uptodate property="native.up-to-date">
      <srcfiles dir="${system.src}" includes="fabric/lang/**" />
      <srcfiles dir="${system.src}" includes="fabric/common/util/**" />
      <globmapper from="*.java" to="../../classes/*.class" />
    </uptodate>
  </target>

  <!-- Compiles the Fabric native runtime classes -->
  <target name="native" depends="bootstrap,native-check"
      unless="native.up-to-date">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/lang/**" />
      <include name="fabric/common/util/**" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric core -->
  <target name="core" depends="init,native,fabil-runtime">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/core/**" />
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric worker API -->
  <target name="worker" depends="init,native,fabil-runtime">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/worker/**" />
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <exclude name="fabric/worker/debug/**" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>


  <!-- Compiles the Fabric dissemination node -->
  <target name="dissemination" depends="worker">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/dissemination/**" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <target name="nfsserver" depends="worker,fabil-runtime">
    <javac target="1.5" srcdir="${tests.fabnfs}" destdir="${tests.classes}"
        debug="on">
      <include name="fabnfs/**" />
      <classpath refid="standard.classpath"/>
    </javac>
    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${tests.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${filc}" />
      <arg value="-d" />
      <arg value="tests/classes" />
      <arg value="-sourcepath" />
      <arg value="tests/fabnfs" />
      <arg value="-cp" />
      <arg value="tests/classes" />
      <srcfile />
      <fileset dir="${basedir}/tests/fabnfs"
          includes="fabnfs/*.fil" />
      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <target name="fablib" depends="worker,fabric-runtime,fabric-signatures">
  	<subant target="" failonerror="false">
  		<fileset file="tests/jif/build.xml"/>
  		<fileset file="tests/sif/build.xml"/>
  	</subant>
  </target>
  

  <!-- Compiles the Fabric system-debugging tools -->
  <target name="worker-debug" depends="worker,fabil-runtime">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/worker/debug/**" />
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="standard.classpath" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric compiler -->
  <target name="fabric-compiler" depends="init,fabil-compiler">
    <antcall target="standard-ext">
      <param name="ext" value="fabric" />
      <param name="ext.pkg" value="fabric" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the Fabric signatures -->
  <target name="fabric-signatures" depends="init,fabric-compiler,bin,fabil-runtime">
    <mkdir dir="${signatures.fabric.classes}" />

    <apply executable="bash"
           parallel="true"
           failonerror="true"
           dir="${basedir}"
           dest="${signatures.fabric.classes}"
           relative="false"
           skipemptyfilesets="true"
           vmlauncher="false">
      <arg value="${fabc}" />
      <arg value="-nooutput" />
      <arg value="-sig" />
      <arg value="-d" />
      <arg value="sig-classes/fabric" />
      <arg value="-sourcepath" />
      <arg value="src/signatures/fabric" />
      <arg value="-sigcp" />
      <arg value="sig-classes/fabric"/>
      <srcfile />
      <fileset dir="${signatures.fabric.src}" includes="**/*.fab" />
      <globmapper from="*.fab" to="*.class" />
    </apply>


  </target>

  <!-- Compiles the Filc compiler -->
  <target name="fabil-compiler" depends="init">
    <antcall target="standard-ext">
      <param name="ext" value="fabil" />
      <param name="ext.pkg" value="fabil" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the FabIL signatures -->
  <target name="fabil-signatures" depends="init,fabil-compiler,bin">
    <mkdir dir="${signatures.fabil.classes}" />

    <apply executable="bash"
           parallel="true"
           failonerror="true"
           dir="${basedir}"
           dest="${signatures.fabil.classes}"
           relative="false"
           skipemptyfilesets="true"
           vmlauncher="false">
      <arg value="${filc}" />
      <arg value="-nooutput" />
      <arg value="-sig" />
      <arg value="-d" />
      <arg value="sig-classes/fabil" />
      <arg value="-sourcepath" />
      <arg value="src/signatures/fabil:src/runtime" />
      <arg value="-sigcp" />
      <arg value="sig-classes/fabil" />
      <srcfile />
      <fileset dir="${signatures.fabil.src}" includes="**/*.fil" />
      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <target name="opt" description="Pass -O to filc for runtime">
    <property name="runtime.opt" value="-O" />
  </target>

  <!--
    Compiles the Fabric array classes.

    Though these are technically part of fabil-runtime, they need to be
    compiled separately because the compiler uses the generated class files for
    typing information.  Things are done this way because we don't want to
    hardcode this typing information in the compiler in case it changes due to
    a change in the Fabric translation.
  -->
  <target name="fabric-arrays"
      depends="bin,fabil-compiler,fabil-signatures">
    <mkdir dir="${runtime.classes}" />

    <condition property="runtime.opt" value="-O0">
      <not><isset property="runtime.opt" /></not>
    </condition>

    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/worker/RetryException.java" />
      <include name="fabric/worker/UserAbortException.java" />
    </javac>

    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${runtime.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${filc}" />
      <arg value="${runtime.opt}" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sigcp" />
      <arg value="sig-classes/fabil" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <arg value="-cp" />
      <arg value="${bootstrap.classes}" />
      <srcfile />
      <fileset dir="${runtime.src}" includes="fabric/lang/arrays/*.fil"/>
      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the part of the Fabric runtime that is implemented in FabIL -->
  <target name="fabil-runtime"
      depends="init,fabil-compiler,fabil-signatures,fabric-arrays">
    <mkdir dir="${runtime.classes}" />

    <condition property="runtime.opt" value="-O0">
      <not><isset property="runtime.opt" /></not>
    </condition>

    <!-- XXX HACK -->
    <delete>
      <fileset dir="${signatures.fabil.classes}">
	<include name="jif/lang/ConfPolicy.class" />
	<include name="jif/lang/IntegPolicy.class" />
	<include name="jif/lang/ActsForProof.class" />
	<include name="jif/lang/Policy.class" />
	<include name="jif/lang/Label.class" />
	<include name="jif/lang/Closure.class" />
	<include name="fabric/lang/KeyObject.class" />
	<include name="fabric/util/Iterable.class" />
	<include name="fabric/util/Set.class" />
	<include name="fabric/util/Iterator.class" />
	<include name="fabric/util/Collection.class" />
      </fileset>
    </delete>

    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${runtime.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${filc}" />
      <arg value="${runtime.opt}" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sigcp" />
      <arg value="sig-classes/fabil" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <arg value="-j" />
      <arg value="-Xmx256M" />
      <srcfile />
      <fileset dir="${runtime.src}"
          includes="**/*.fil"
          excludes="fabric/util/*.fil,fabric/lang/arrays/*.fil" />
      <filelist dir="${runtime.src}">
        <file name="fabric/util/HashMap.fil"/>
        <file name="fabric/util/LinkedList.fil"/>
        <file name="fabric/util/HashSet.fil"/>
        <file name="fabric/util/LinkedHashSet.fil"/>
        <file name="fabric/util/ArrayList.fil"/>
        <file name="fabric/util/Collections.fil"/>
        <file name="fabric/util/Arrays.fil"/>
        <file name="fabric/util/TreeMap.fil"/>
        <file name="fabric/util/TreeSet.fil"/>
      </filelist>

      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the part of the runtime that is implemented in Fabric -->
  <target name="fabric-runtime"
      depends="fabric-signatures,fabil-runtime">
    <mkdir dir="${runtime.classes}" />

    <condition property="runtime.opt" value="-O0">
      <not><isset property="runtime.opt" /></not>
    </condition>

    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${runtime.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${fabc}" />
      <arg value="${runtime.opt}" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sigcp" />
      <arg value="sig-classes/fabric" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <arg value="-j" />
      <arg value="-Xmx256M" />
      <srcfile />
      <fileset dir="${runtime.src}"
          includes="**/*.fab" />

      <globmapper from="*.fab" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the Fabric test programs -->
  <target name="tests" depends="init,fabric-system,nfsserver,fablib">
    <javac target="1.5" srcdir="${src}" destdir="${classes}" debug="on"
        includes="tests/**">
      <classpath refid="standard.classpath"/>
    </javac>
  </target>

  <!-- Jar targets -->
  <target name="jars" depends="jar-base,jar-runtime,jar-sig"
    description="Builds all jars" />

  <target name="jar-base" depends="fabil-compiler,fabric-system">
    <jar jarfile="${base.jar}" basedir="${classes}" excludes="**/*.java" />
  </target>

  <target name="jar-runtime" depends="fabil-runtime,fabric-runtime">
    <jar jarfile="${runtime.jar}" basedir="${runtime.classes}"
        excludes="**/*.java" />
  </target>

  <target name="jar-sig" depends="fabil-signatures,fabric-signatures">
    <jar jarfile="${signature.fabil.jar}" basedir="${signatures.fabil.classes}"
        excludes="**/*.java" />
    <jar jarfile="${signature.fabric.jar}"
        basedir="${signatures.fabric.classes}" excludes="**/*.java" />
  </target>

  <!--
    Here begins generic helper stuff for building Polyglot extensions.
  -->

  <target name="standard-ext">
    <antcall target="standard-ext-lexer" />
    <antcall target="standard-ext-${parser.type}-parser" />
    <antcall target="standard-ext-qq-dep" />
    <antcall target="compile-ext" />
  </target>

  <target name="standard-ext-lexer">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="${ext}.flex" />
    </antcall>
  </target>

  <target name="jflex-lexer" depends="jflex-lexer-deps"
      unless="jflex.lexer.up-to-date">
    <java classname="JFlex.Main" fork="true" dir="${lexer.dir}"
        failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="${jflex.file}" />
    </java>
  </target>

  <target name="jflex-lexer-deps">
    <dependset>
      <srcfileset dir="${lexer.dir}" includes="${jflex.file}" />
      <targetfileset dir="${lexer.dir}" includes="${lexer.class}.java" />
    </dependset>
    <available property="jflex.lexer.up-to-date"
        file="${lexer.dir}/${lexer.class}.java" />
  </target>

  <target name="standard-ext-ppg-parser">
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="ppg.file" value="${ext}.ppg" />
      <param name="cup.file" value="${ext}_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="ppg-parser" depends="ppg-parser-deps"
      unless="ppg.parser.up-to-date">
    <java classname="ppg.PPG" fork="true" dir="${parser.dir}"
        output="${parser.dir}/${cup.file}" failonerror="true" logError="true">
      <classpath refid="standard.classpath" />
      <arg value="${ppg.file}" />
    </java>
    <antcall target="cup-parser" />
  </target>

  <target name="ppg-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${ppg.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${cup.file}" />
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="ppg.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${cup.file}" />
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="cup-parser" depends="cup-parser-using-jar"
    unless="cup.parser.up-to-date">
  </target>

  <target name="cup-parser-using-jar" depends="cup-parser-deps"
      unless="cup.parser.up-to-date">
    <java classname="java_cup.Main" fork="true" dir="${parser.dir}" failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="-parser"/>
      <arg value="${parser.class}"/>
      <arg value="-symbols"/>
      <arg value="${symbol.class}"/>
      <arg value="${cup.file}"/>
    </java>
  </target>

  <target name="cup-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${cup.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="cup.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="standard-ext-qq-dep" if="has-qq">
    <antcall target="standard-ext-qq" />
  </target>

  <target name="standard-ext-qq">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="qq.flex" />
    </antcall>
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="ppg.file" value="qq.ppg" />
      <param name="cup.file" value="qq_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="compile-ext">
    <javac source="1.5" target="1.5" srcdir="${compiler.src}"
        destdir="${classes}" debug="on" includes="${ext.pkg}/**">
      <classpath refid="standard.classpath" />
    </javac>
  </target>

</project>

