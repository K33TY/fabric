<project name="fabric" default="all" basedir=".">
  <description>
    Fabric build file
  </description>

  <!-- Set global properties for this build -->

  <!-- Project name -->
  <property name="name" value="fabric" />

  <!-- set the prefix for accessing environment variables -->
  <property environment="env" />

  <!-- Polyglot installation -->
  <!-- If it is not defined in the properties file, use the environment variable $POLYGLOT. -->
  <condition property="polyglot.dir" value="${env.POLYGLOT}">
    <and>
      <isset property="env.POLYGLOT" />
      <not>
        <isset property="polyglot.dir" />
      </not>
    </and>
  </condition>
  
  <!-- As a last resort, try to use polyglot.jar from distribution -->
  <condition property="polyglot.dir" value="${basedir}">
    <not><isset property="polyglot.dir" /></not>
  </condition>

  <!-- Source directory -->
  <property name="src" location="${basedir}/src"/>
  <property name="system.src" location="${src}/system"/>
  <property name="compiler.src" location="${src}/compiler"/>
  <property name="runtime.src" location="${src}/runtime"/>
  <property name="signatures.src" location="${src}/signatures"/>

  <!-- Directory for class file targets -->
  <property name="classes" location="${basedir}/classes"/>
  <property name="runtime.classes" location="${basedir}/rt-classes"/>
  <property name="signatures.classes" location="${basedir}/sig-classes"/>

  <!-- Distribution directory -->
  <property name="dist" location="${basedir}/dist"/>

  <!-- Binaries directory -->
  <property name="bin" location="${basedir}/bin"/>

  <!-- Library directory -->
  <property name="lib" location="${basedir}/lib"/>

  <!-- Var directory -->
  <property name="var" location="${basedir}/var"/>

  <!-- Jar files -->
  <property name="base.jar" location="${lib}/${name}.jar" />
  <property name="runtime.jar" location="${lib}/${name}-rt.jar" />
  <property name="signature.jar" location="${lib}/${name}-sig.jar" />

  <!-- fabc executable -->
  <property name="fabc" location="${bin}/fabc" />

  <!-- genmap executable -->
  <property name="genmap" location="${bin}/genmap" />

  <path id="standard.classpath">
    <pathelement location="${classes}"/>
    <pathelement path="${java.class.path}" />

    <!-- jar files in the lib directory, excluding generated jars -->
    <fileset dir="${lib}">
        <include name="*.jar" />
        <exclude name="${name}*.jar" />
    </fileset>

    <!-- the Polyglot classes -->
    <pathelement path="${polyglot.dir}/classes" />
    <pathelement path="${polyglot.dir}/lib/polyglot.jar" />
    <pathelement path="${polyglot.dir}/lib/ppg.jar" />
    <pathelement path="${polyglot.dir}/lib/java_cup.jar" />
    <pathelement path="${polyglot.dir}/lib/JFlex.jar" />
  </path>

  <target name="configure" description="Configures Fabric"
      unless="configure.up-to-date">
    <echo message="java version is ${java.version}"/>
    <echo message="current directory is ${user.dir}"/>
    <echo message="Java home directory is ${java.home}"/>
    <property name="configure.up-to-date" value="true"/>
  </target>

  <!-- Create appropriate executables in the bin directory -->
  <target name="bin" depends="configure,bin-deps" unless="bin.up-to-date">
    <antcall target="fabric-bin"/>
  </target>

  <target name="bin-deps">
    <dependset>
      <srcfileset dir="${bin}" includes="fab-core.in"/>
      <targetfileset dir="${bin}" includes="fab-core"/>
    </dependset>
    <condition property="bin.up-to-date">
      <and>
        <available file="${bin}/fab-core"/>
        <available file="${bin}/fab"/>
	<available file="${bin}/fabc"/>
	<available file="${bin}/genkey"/>
	<available file="${bin}/genmap"/>
	<available file="${bin}/emulab-update"/>
      </and>
    </condition>
  </target>

  <target name="defs-deps">
    <condition property="defs.up-to-date">
      <available file="${bin}/defs"/>
    </condition>
  </target> 

  <!-- Creates a file containing common environment variable definitions -->
  <target name="executable-defs" depends="defs-deps" unless="defs.up-to-date">
    <echo message="Creating ${bin}/defs"/>
    <echo file="${bin}/defs" append="no">#!/bin/sh
# DO NOT EDIT - This file was automatically generated.

JAVA='${java.home}/bin/java'
FILE_SEP='${file.separator}'
PATH_SEP='${path.separator}'
TOP='${basedir}'
    </echo>
  </target>

  <target name="fabric-bin" depends="executable-defs">
    <echo message="Creating ${bin}/fab-core"/>
    <concat destfile="${bin}/fab-core" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="fab-core.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/fab-core"/>

    <echo message="Creating ${bin}/fabc"/>
    <concat destfile="${bin}/fabc" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="fabc.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/fabc"/>

    <echo message="Creating ${bin}/fab"/>
    <concat destfile="${bin}/fab" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="fab.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/fab"/>

    <echo message="Creating ${bin}/genkey"/>
    <concat destfile="${bin}/genkey" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="genkey.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/genkey"/>

    <echo message="Creating ${bin}/genmap"/>
    <concat destfile="${bin}/genmap" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="genmap.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/genmap"/>

    <echo message="Creating ${bin}/emulab-update"/>
    <concat destfile="${bin}/emulab-update" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="emulab-update.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/emulab-update"/>

    <delete file="${bin}/defs"/>
  </target>

  <!-- Initialize the build -->
  <target name="init" depends="configure">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${classes}"/>
    <mkdir dir="${runtime.classes}"/>
    <mkdir dir="${signatures.classes}"/>
  </target>

  <!-- Compiles Fabric -->
  <target name="all"
    depends="bin,fabric-system,fabric-compiler,fabric-signatures,client-debug,var,tests"
    description="Builds Fabric"/>

  <!-- Compiles the Fabric system -->
  <target name="fabric-system" depends="core,client" description="Builds Fabric"/>

  <target name="dust" description="Cleans up the generated runtime and signatures">
    <delete dir="${runtime.classes}"/>
    <delete dir="${signatures.classes}"/>
  </target>

  <target name="clean" description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
    <!-- Delete the ${classes} and ${dist} directory trees -->
    <delete dir="${classes}"/>
    <delete dir="${runtime.classes}"/>
    <delete dir="${signatures.classes}"/>
    <delete dir="${dist}"/>
    <delete dir="${var}"/>
    <delete>
      <fileset dir="${lib}" includes="${name}*.jar"/>
    </delete>
  </target>

  <target name="clobber" depends="clean"
      description="Cleans up the directory tree and deletes generated files">
    <delete>
      <fileset dir="${bin}">
        <include name="fab-core"/>
        <include name="fab"/>
        <include name="fabc"/>
	<include name="genkey"/>
	<include name="genmap"/>
	<include name="emulab-update"/>
      </fileset>
    </delete>
  </target>

  <!-- Compiles the Fabric core -->
  <target name="core" depends="init,fabric-runtime">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/core/**" />
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <classpath>
	<path refid="standard.classpath"/>
	<pathelement location="${runtime.classes}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric client API -->
  <target name="client" depends="init">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/client/**" />
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <include name="fabric/lang/**" />
      <exclude name="fabric/client/debug/**" />
      <classpath refid="standard.classpath"/>
    </javac>
  </target>

  <!-- Compiles the Fabric system-debugging tools -->
  <target name="client-debug" depends="client,fabric-runtime">
    <javac target="1.5" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/client/debug/**" />
      <classpath>
	<path refid="standard.classpath"/>
	<pathelement location="${runtime.classes}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric compiler -->
  <target name="fabric-compiler" depends="init,configure,client">
    <antcall target="standard-ext">
      <param name="ext" value="fabric" />
      <param name="ext.pkg" value="fabric" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the Fabric signatures -->
  <target name="fabric-signatures" depends="init,fabric-compiler,bin">
    <mkdir dir="${signatures.classes}" />
  	
    <apply executable="sh"
	parallel="true"
	failonerror="true"
	dir="${basedir}"
    dest="${signatures.classes}"
	relative="false"
	skipemptyfilesets="true"
	vmlauncher="false">
      <arg value="${fabc}" />
      <arg value="-nooutput" />
      <arg value="-sig" />
      <arg value="-d" />
      <arg value="sig-classes" />
      <arg value="-sourcepath" />
      <arg value="src/signatures:src/runtime" />
      <srcfile />
      <fileset dir="${basedir}/src/signatures"
      includes="fabric/lang/Object.fab" />
      <globmapper from="*.fab" to="*.class" />
    </apply>

    <apply executable="sh"
	parallel="true"
	failonerror="true"
	dir="${basedir}"
    dest="${signatures.classes}"
	relative="false"
	skipemptyfilesets="true"
	vmlauncher="false">
      <arg value="${fabc}" />
      <arg value="-nooutput" />
      <arg value="-sig" />
      <arg value="-d" />
      <arg value="sig-classes" />
      <arg value="-sourcepath" />
      <arg value="src/signatures" />
      <arg value="-sigcp" />
      <arg value="sig-classes" />
      <srcfile />
      <fileset dir="${basedir}/src/signatures" includes="**/*.fab" />
      <globmapper from="*.fab" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the Fabric runtime -->
  <target name="fabric-runtime"
  depends="init,fabric-compiler,fabric-signatures">
    <mkdir dir="${runtime.classes}" />
  	
    <apply executable="sh"
	parallel="true"
	failonerror="true"
	dir="${basedir}"
    dest="${runtime.classes}"
	relative="false"
	skipemptyfilesets="true"
	vmlauncher="false">
      <arg value="${fabc}" />
      <arg value="-nooutput" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sigcp" />
      <arg value="sig-classes" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <srcfile />
      <fileset dir="${basedir}/src/runtime"
	  includes="**/*.fab"
	  excludes="fabric/util/*.fab" />
      <globmapper from="*.fab" to="*.class" />
    </apply>

    <apply executable="sh"
	parallel="true"
	failonerror="true"
	dir="${basedir}"
    dest="${runtime.classes}"
	relative="false"
	skipemptyfilesets="true"
	vmlauncher="false">
      <arg value="${fabc}" />
      <arg value="-nooutput" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sigcp" />
      <arg value="sig-classes" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <srcfile />
      <fileset dir="${basedir}/src/runtime"
	  includes="fabric/util/HashMap.fab,fabric/util/LinkedList.fab" />
      <globmapper from="*.fab" to="*.class" />
    </apply>
  </target>

  <!-- Creates the contents of var -->
  <target name="var" depends="fabric-system">
    <!-- exec executable="sh"
	failonerror="true"
	dir="${basedir}">
      <arg value="-c" />
      <arg value="${genmap}" />
    </exec -->
  	
    <apply executable="sh"
    parallel="true"
    failonerror="true"
    dir="${basedir}"
    dest="${basedir}/var"
    skipemptyfilesets="true"
    vmlauncher="false"
    addsourcefile="false">
      <arg value="${genmap}" />
      <fileset dir="${basedir}/etc/keys"
      includes="*.keystore"
      excludes="trust.keystore" />
      <globmapper from="*.keystore" to="*" />
    </apply>
  </target>

  <!-- Compiles the Fabric test programs -->
  <target name="tests" depends="init,fabric-system">
    <javac target="1.5" srcdir="${src}" destdir="${classes}" debug="on" includes="tests/**">
      <classpath refid="standard.classpath"/>
    </javac>
  </target>

  <!-- Jar targets -->
  <target name="jars" depends="jar-base,jar-runtime,jar-sig"
    description="Builds all jars" />

  <target name="jar-base" depends="fabric-compiler,core">
    <jar jarfile="${base.jar}" basedir="${classes}" excludes="**/*.java" />
  </target>

  <target name="jar-runtime" depends="fabric-runtime">
    <jar jarfile="${runtime.jar}" basedir="${runtime.classes}" excludes="**/*.java" />
  </target>

  <target name="jar-sig" depends="fabric-signatures">
    <jar jarfile="${signature.jar}" basedir="${signatures.classes}" excludes="**/*.java" />
  </target>

  <!--
    Here begins generic helper stuff for building Polyglot extensions.
  -->

  <target name="standard-ext">
    <antcall target="standard-ext-lexer" />
    <antcall target="standard-ext-${parser.type}-parser" />
    <antcall target="standard-ext-qq-dep" />
    <antcall target="compile-ext" />
  </target>

  <target name="standard-ext-lexer">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="${ext}.flex" />
    </antcall>
  </target>

  <target name="jflex-lexer" depends="jflex-lexer-deps"
      unless="jflex.lexer.up-to-date">
    <java classname="JFlex.Main" fork="true" dir="${lexer.dir}"
        failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="${jflex.file}" />
    </java>
  </target>

  <target name="jflex-lexer-deps">
    <dependset>
      <srcfileset dir="${lexer.dir}" includes="${jflex.file}" />
      <targetfileset dir="${lexer.dir}" includes="${lexer.class}.java" />
    </dependset>
    <available property="jflex.lexer.up-to-date"
        file="${lexer.dir}/${lexer.class}.java" />
  </target>

  <target name="standard-ext-ppg-parser">
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="ppg.file" value="${ext}.ppg" />
      <param name="cup.file" value="${ext}_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="ppg-parser" depends="ppg-parser-deps"
      unless="ppg.parser.up-to-date">
    <java classname="ppg.PPG" fork="true" dir="${parser.dir}"
        output="${parser.dir}/${cup.file}" failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="${ppg.file}" />
    </java>
    <antcall target="cup-parser" />
  </target>

  <target name="ppg-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${ppg.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${cup.file}" />
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="ppg.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${cup.file}" />
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="cup-parser" depends="cup-parser-using-jar"
    unless="cup.parser.up-to-date">
  </target>

  <target name="cup-parser-using-jar" depends="cup-parser-deps"
      unless="cup.parser.up-to-date">
    <java classname="java_cup.Main" fork="true" dir="${parser.dir}"
        failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="-parser"/>
      <arg value="${parser.class}"/>
      <arg value="-symbols"/>
      <arg value="${symbol.class}"/>
      <arg value="${cup.file}"/>
    </java>
  </target>

  <target name="cup-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${cup.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="cup.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="standard-ext-qq-dep" if="has-qq">
    <antcall target="standard-ext-qq" />
  </target>

  <target name="standard-ext-qq">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="qq.flex" />
    </antcall>
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="ppg.file" value="qq.ppg" />
      <param name="cup.file" value="qq_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="compile-ext">
    <javac source="1.5" target="1.5" srcdir="${compiler.src}"
        destdir="${classes}" debug="on" includes="${ext.pkg}/**">
      <classpath refid="standard.classpath" />
    </javac>
  </target>

</project>

