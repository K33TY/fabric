<project name="diaspora" default="all" basedir=".">
  <description>
    Diaspora build file
  </description>

  <!-- Set global properties for this build -->

  <!-- Source directory -->
  <property name="src" location="${basedir}/src"/>
  <property name="sys.src" location="${src}/system"/>
  <property name="compiler.src" location="${src}/compiler"/>

  <!-- Directory for class file targets -->
  <property name="classes" location="${basedir}/classes"/>

  <!-- Distribution directory -->
  <property name="dist" location="${basedir}/dist"/>

  <!-- Binaries directory -->
  <property name="bin" location="${basedir}/bin"/>

  <path id="standard.classpath">
    <pathelement location="${classes}"/>
    <pathelement path="${java.class.path}" />
  </path>

  <target name="configure" description="Configures Diaspora"
      unless="configure.up-to-date">
    <echo message="java version is ${java.version}"/>
    <echo message="current directory is ${user.dir}"/>
    <echo message="Java home directory is ${java.home}"/>
    <property name="configure.up-to-date" value="true"/>
  </target>

  <!-- Create appropriate executables in the bin directory -->
  <target name="bin" depends="configure,bin-deps" unless="bin.up-to-date">
    <antcall target="diaspora-bin"/>
  </target>

  <target name="bin-deps">
    <dependset>
      <srcfileset dir="${bin}" includes="diaspora.in"/>
      <targetfileset dir="${bin}" includes="diaspora"/>
    </dependset>
    <condition property="bin.up-to-date">
      <and>
        <available file="${bin}/diaspora"/>
    <available file="${bin}/diasporac"/>
        <available file="${bin}/dclient"/>
      </and>
    </condition>
  </target>

  <target name="defs-deps">
    <condition property="defs.up-to-date">
      <available file="${bin}/defs"/>
    </condition>
  </target> 

  <!-- Creates a file containing common environment variable definitions -->
  <target name="executable-defs" depends="defs-deps" unless="defs.up-to-date">
    <echo message="Creating ${bin}/defs"/>
    <echo file="${bin}/defs" append="no">#!/bin/sh
# DO NOT EDIT - This file was automatically generated.

JAVA='${java.home}/bin/java'
FILE_SEP='${file.separator}'
PATH_SEP='${path.separator}'
TOP='${basedir}'
    </echo>
  </target>

  <target name="diaspora-bin" depends="executable-defs">
    <echo message="Creating ${bin}/diaspora"/>
    <concat destfile="${bin}/diaspora" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="diaspora.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/diaspora"/>

    <echo message="Creating ${bin}/diasporac"/>
    <concat destfile="${bin}/diasporac" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="diasporac.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/diasporac"/>

    <echo message="Creating ${bin}/dclient"/>
    <concat destfile="${bin}/dclient" append="no">
      <filelist dir="${bin}" files="defs"/>
      <filelist dir="${bin}" files="dclient.in"/>
    </concat>

    <chmod perm="+x" file="${bin}/dclient"/>

    <delete file="${bin}/defs"/>
  </target>

  <!-- Initialise the build -->
  <target name="init" depends="configure">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${classes}"/>
  </target>

  <!-- Compiles Diaspora -->
  <target name="all"
    depends="bin,diaspora-system,diaspora-compiler,tests,fabric-compiler"
    description="Builds Diaspora"/>

  <!-- Compiles the Diaspora system -->
  <target name="diaspora-system" depends="core,client" description="Builds Diaspora"/>

  <target name="clean" description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
    <!-- Delete the ${classes} and ${dist} directory trees -->
    <delete dir="${classes}"/>
    <delete dir="${dist}"/>
  </target>

  <target name="clobber" depends="clean"
      description="Cleans up the directory tree and deletes generated files">
    <delete>
      <fileset dir="${bin}">
        <include name="diaspora"/>
        <include name="defs"/>
      </fileset>
    </delete>
  </target>

  <!-- Compiles the Diaspora core -->
  <target name="core" depends="init">
    <javac srcdir="${sys.src}" destdir="${classes}" debug="on"
        includes="diaspora/core/**,diaspora/common/**,diaspora/messages/**">
      <classpath refid="standard.classpath"/>
    </javac>
  </target>

  <!-- Compiles the Diaspora client API -->
  <target name="client" depends="init">
    <javac srcdir="${sys.src}" destdir="${classes}" debug="on"
        includes="diaspora/client/**,diaspora/common/**,diaspora/messages/**">
      <classpath refid="standard.classpath"/>
    </javac>
  </target>

  <!-- Compiles the Diaspora compiler -->
  <target name="diaspora-compiler" depends="init,configure">
    <antcall target="standard-ext">
      <param name="ext" value="diaspora" />
      <param name="ext.pkg" value="diaspora" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the Fabric compiler -->
  <target name="fabric-compiler" depends="init,configure">
    <antcall target="standard-ext">
      <param name="ext" value="fabric" />
      <param name="ext.pkg" value="fabric" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the Diaspora test programs -->
  <target name="tests" depends="init,diaspora-system">
    <javac srcdir="${src}" destdir="${classes}" debug="on" includes="tests/**">
      <classpath refid="standard.classpath"/>
    </javac>
  </target>

  <!--
    Here begins generic helper stuff for building Polyglot extensions.
  -->

  <target name="standard-ext">
    <antcall target="standard-ext-lexer" />
    <antcall target="standard-ext-${parser.type}-parser" />
    <antcall target="standard-ext-qq-dep" />
    <antcall target="compile-ext" />
  </target>

  <target name="standard-ext-lexer">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="${ext}.flex" />
    </antcall>
  </target>

  <target name="jflex-lexer" depends="jflex-lexer-deps"
      unless="jflex.lexer.up-to-date">
    <java classname="JFlex.Main" fork="true" dir="${lexer.dir}"
        failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="${jflex.file}" />
    </java>
  </target>

  <target name="jflex-lexer-deps">
    <dependset>
      <srcfileset dir="${lexer.dir}" includes="${jflex.file}" />
      <targetfileset dir="${lexer.dir}" includes="${lexer.class}.java" />
    </dependset>
    <available property="jflex.lexer.up-to-date"
        file="${lexer.dir}/${lexer.class}.java" />
  </target>

  <target name="standard-ext-ppg-parser">
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="ppg.file" value="${ext}.ppg" />
      <param name="cup.file" value="${ext}_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="ppg-parser" depends="ppg-parser-deps"
      unless="ppg.parser.up-to-date">
    <java classname="ppg.PPG" fork="true" dir="${parser.dir}"
        output="${parser.dir}/${cup.file}" failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="${ppg.file}" />
    </java>
    <antcall target="cup-parser" />
  </target>

  <target name="ppg-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${ppg.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${cup.file}" />
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="ppg.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${cup.file}" />
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="cup-parser" depends="cup-parser-using-jar"
    unless="cup.parser.up-to-date">
  </target>

  <target name="cup-parser-using-jar" depends="cup-parser-deps"
      unless="cup.parser.up-to-date">
    <java classname="java_cup.Main" fork="true" dir="${parser.dir}"
        failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="-parser"/>
      <arg value="${parser.class}"/>
      <arg value="-symbols"/>
      <arg value="${symbol.class}"/>
      <arg value="${cup.file}"/>
    </java>
  </target>

  <target name="cup-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${cup.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="cup.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="standard-ext-qq-dep" if="has-qq">
    <antcall target="standard-ext-qq" />
  </target>

  <target name="standard-ext-qq">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="qq.flex" />
    </antcall>
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="ppg.file" value="qq.ppg" />
      <param name="cup.file" value="qq_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="compile-ext">
    <javac source="1.5" target="1.5" srcdir="${compiler.src}"
        destdir="${classes}" debug="on" includes="${ext.pkg}/**">
      <classpath refid="standard.classpath" />
    </javac>
  </target>

</project>

