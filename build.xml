<!--
  This is the Apache Ant build file for Fabric.
  See doc/ant-dep-graph.png to visualize the inter-target dependencies.

  Targets are public (i.e., intended to be callable by the user) if and only if
  they have a description attribute.  Public targets will show up when the user
  runs "ant -p".
-->
<project name="fabric" default="build-all" basedir=".">
  <description>
    Fabric build file
  </description>

  <!--
  ****************************************************************************
    Global properties for this build.
  ****************************************************************************
  -->

  <!-- Project name -->
  <property name="name" value="fabric" />

  <!-- set the prefix for accessing environment variables -->
  <property environment="env" />

  <property file="${basedir}/config.properties" />

  <!-- Polyglot installation location -->
  <!-- If it is not defined in the properties file, use the environment
       variable $POLYGLOT. -->
  <condition property="polyglot.home" value="${env.POLYGLOT}">
    <and>
      <isset property="env.POLYGLOT" />
      <not>
        <isset property="polyglot.home" />
      </not>
    </and>
  </condition>
  <!-- As a last resort, try to use polyglot.jar from distribution -->
  <condition property="polyglot.home" value="${basedir}">
    <not><isset property="polyglot.home" /></not>
  </condition>

  <!-- Jif installation -->
  <!-- If it is not defined in the properties file, use the environment
       variable $JIF. -->
  <condition property="jif.home" value="${env.JIF}">
    <and>
      <isset property="env.JIF" />
      <not>
        <isset property="jif.home" />
      </not>
    </and>
  </condition>
  <!-- As a last resort, try to use jif.jar from distribution -->
  <condition property="jif.home" value="${basedir}">
    <not><isset property="jif.home" /></not>
  </condition>

  <!-- Source directories -->
  <property name="src" location="${basedir}/src"/>
  <property name="system.src" location="${src}/system"/>
  <property name="compiler.src" location="${src}/compiler"/>
  <property name="bootstrap.src" location="${src}/bootstrap"/>
  <property name="runtime.src" location="${src}/runtime"/>
  <property name="examples.fabnfs" location="${basedir}/examples/fabnfs"/>
  <property name="signatures.fabil.src" location="${src}/signatures/fabil"/>
  <property name="signatures.fabric.src" location="${src}/signatures/fabric"/>

  <!-- Directories for class file targets -->
  <property name="classes" location="${basedir}/classes"/>
  <property name="bootstrap.classes" location="${basedir}/bs-classes"/>
  <property name="runtime.classes" location="${basedir}/rt-classes"/>
  <property name="tests.classes" location="${basedir}/tests/classes"/>
  <property name="signatures.classes" location="${basedir}/sig-classes"/>
  <property name="signatures.fabil.classes" location="${signatures.classes}/fabil"/>
  <property name="signatures.fabric.classes" location="${signatures.classes}/fabric"/>

  <!-- Applet properties -->
  <property name="applet.dir" location="${basedir}/examples/applet"/>
  <property name="applet.name" value="fabapp"/>
  <property name="applet.src" location="${applet.dir}/src"/>
  <property name="applet.classes" location="${applet.dir}/classes"/>
  <property name="applet.jar" location="${lib}/${applet.name}.jar" />

  <!-- Timestamp file for bootstrap classes. -->
  <property name="bootstrap.tstamp" location="${bootstrap.classes}/.tstamp"/>

  <!-- Binaries directory -->
  <property name="bin" location="${basedir}/bin"/>

  <!-- Documentation directory -->
  <property name="doc" location="${basedir}/doc"/>

  <!-- Configuration directory -->
  <property name="etc" location="${basedir}/etc"/>

  <!-- Library directory -->
  <property name="lib" location="${basedir}/lib"/>

  <!-- var directory (for store databases) -->
  <property name="var" location="${basedir}/var"/>

  <!-- Tools directories -->
  <property name="tools" location="${basedir}/tools"/>
  <property name="tools.storebrowser" location="${tools}/storebrowser"/>
  <property name="tools.classloader" location="${tools}/classloader"/>
  <property name="tools.classes" location="${tools}/classes"/>

  <!-- tmp directory (for creating the distribution) -->
  <property name="tmp" location="${basedir}/tmp"/>

  <!-- SCM root locations -->
  <property name="svn.root.fabric"
      value="https://forge.cornell.edu/svn/repos/fabric/trunk"/>
  <property name="cvs.root.jif"
      value=":ext:gforge.cis.cornell.edu:/cvsroot/jif"/>
  <property name="cvs.root.polyglot"
      value=":ext:gforge.cis.cornell.edu:/cvsroot/polyglot"/>

  <!-- Jar files -->
  <property name="jar.base" location="${lib}/${name}.jar" />
  <property name="jar.runtime" location="${lib}/${name}-rt.jar" />
  <property name="jar.signature.fabil" location="${lib}/${name}-il-sig.jar" />
  <property name="jar.signature.fabric" location="${lib}/${name}-sig.jar" />

  <!-- fabc executable -->
  <property name="fabc" location="${bin}/fabc" />

  <!-- filc executable -->
  <property name="filc" location="${bin}/filc" />

  <!-- Debug flag to be passed to fabc and filc. -->
  <!-- The "dist" target should disable debugging information by setting this
       to the empty string. -->
  <property name="debug.flag" value="-g" />

  <path id="standard.classpath">
    <pathelement location="${classes}"/>

    <!-- jar files in the lib directory, excluding generated jars -->
    <fileset dir="${lib}">
        <include name="*.jar" />
        <exclude name="${name}*.jar" />
    </fileset>

    <!-- the Polyglot classes -->
    <pathelement path="${polyglot.home}/classes" />
    <pathelement path="${polyglot.home}/lib/polyglot.jar" />
    <pathelement path="${polyglot.home}/lib/ppg.jar" />
    <pathelement path="${polyglot.home}/lib/java_cup.jar" />
    <pathelement path="${polyglot.home}/lib/JFlex.jar" />

    <!-- the Jif classes -->
    <pathelement location="${jif.home}/classes" />
    <pathelement location="${jif.home}/lib/jif.jar" />

    <pathelement path="${java.class.path}" />
  </path>

  <!--
  ****************************************************************************
    Configuration targets.
  ****************************************************************************
  -->

  <!-- Main configuration target. -->
  <target name="configure" description="Configures Fabric"
      depends="configure-buildstring" unless="configure.up-to-date">

    <echo message="java version is ${java.version}"/>
    <echo message="current directory is ${user.dir}"/>
    <echo message="Java home directory is ${java.home}"/>
    <echo message="Polyglot home directory is ${polyglot.home}"/>
    <echo message="Jif home directory is ${jif.home}" />
    <echo message="Fabric version is ${fabric.version.build}" />

    <property name="configure.up-to-date" value="true"/>
  </target>

  <!-- Configures the executables in the bin directory. -->
  <target name="bin" depends="configure,bin-check" unless="bin.up-to-date"
      description="Configures the executables in the bin directory">
    <fail message="Failed to find Polyglot.  Make sure that your POLYGLOT environment variable is set, and that you have built Polyglot.">
      <condition> <not> <and>
        <isset property="polyglot.home" />
        <available classname="polyglot.main.Version" classpathref="standard.classpath" />
      </and> </not> </condition>
    </fail>

    <fail message="Failed to find Jif.  Make sure that your JIF environment variable is set and that you have built Jif.">
      <condition> <not> <and>
        <isset property="jif.home" />
        <available classname="jif.Version" classpathref="standard.classpath" />
      </and> </not> </condition>
    </fail>

    <copy file="${bin}/defs.in" tofile="${bin}/defs">
      <filterset>
        <filter token="JAVA_HOME" value="${java.home}"    />
        <filter token="TOP"       value="${basedir}"      />
        <filter token="POLYGLOT"  value="${polyglot.home}" />
        <filter token="JIF"       value="${jif.home}" />
      </filterset>
    </copy>
  </target>

  <!--
  ____________________________________________________________________________
    Configuration helper targets.
  -->

  <target name="configure-buildstring" depends="configure-version"
      unless="fabric.version.build">
    <tstamp>
      <format property="now" pattern="yyyy-MM-dd HH:mm:ss" />
    </tstamp>
    <property name="fabric.version.build" value="${fabric.version} (${now})" />
  </target>

  <target name="configure-version" unless="fabric.version">
    <property file="${basedir}/version.properties" prefix="fabric" />
    <property name="fabric.version" value="${fabric.version.major}.${fabric.version.minor}.${fabric.version.patch}" />
  </target>

  <target name="bin-check">
    <uptodate property="bin.up-to-date" srcfile="bin/defs.in"
              targetfile="bin/defs" />
  </target>

  <!--
  ****************************************************************************
    Targets for cleaning up the directory tree.
  ****************************************************************************
  -->

  <target name="dust"
      description="Cleans up the generated runtime and signatures">
    <delete dir="${runtime.classes}"/>
    <delete dir="${signatures.classes}"/>
    <delete file="${jar.runtime}" />
    <delete file="${jar.signature.fabil}" />
    <delete file="${jar.signature.fabric}" />

    <subant target="clean" failonerror="false">
      <filelist dir="${basedir}" files="tests/sif/build.xml"/>
      <filelist dir="${basedir}" files="tests/jif/build.xml"/>
    </subant>    
  </target>

  <target name="clean" depends="dust"
      description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
    <!-- Delete the ${classes} and ${tmp} directory trees -->
    <delete dir="${classes}"/>
    <delete dir="${bootstrap.classes}"/>
    <delete dir="${tests.classes}"/>
    <delete dir="${tools.classes}"/>
    <delete dir="${applet.classes}"/>
    <delete dir="${tmp}"/>
    <delete dir="${var}"/>
    <delete file="${jar.base}" />
  </target>

  <!-- Makes the directory tree truly pristine. -->
  <target name="clobber" depends="clean"
      description="Cleans up the directory tree, deleting generated binaries, scripts and source files">
    <delete>
      <fileset dir="${bin}">
        <include name="defs"/>
      </fileset>

      <fileset dir="${compiler.src}">
	<include name="**/Grm.java" />
	<include name="**/sym.java" />
	<include name="**/Lexer_c.java" />
	<include name="**/*_ppg.cup" />
      </fileset>
    </delete>
  </target>

  <!--
  ****************************************************************************
    Compilation targets.
  ****************************************************************************
  -->

  <!-- Main target for compiling Fabric -->
  <target name="build-all"
    depends="fabric-compiler,fabil-compiler,fabric-system,fabric-signatures,fabric-runtime,tools"
    description="Builds the Fabric compiler, system, runtime, and tools"/>

  <!-- This target is here for legacy reasons. -->
  <target name="all" depends="build-all" />

  <!-- Compiles the Fabric system -->
  <target name="fabric-system" depends="store,worker,dissemination"
      description="Builds the Fabric system"/>

  <!-- Compiles the Fabric compiler -->
  <target name="fabric-compiler" depends="init,fabil-compiler"
      description="Builds the Fabric compiler">
    <antcall target="standard-ext">
      <param name="ext" value="fabric" />
      <param name="ext.pkg" value="fabric" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the FabIL compiler -->
  <target name="fabil-compiler" depends="init"
      description="Builds the FabIL compiler">
    <antcall target="standard-ext">
      <param name="ext" value="fabil" />
      <param name="ext.pkg" value="fabil" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the Fabric signatures -->
  <target name="fabric-signatures"
      depends="init,fabric-compiler,bin,fabil-runtime"
      description="Compiles the Fabric signature classes">
    <mkdir dir="${signatures.fabric.classes}" />

    <apply executable="bash"
           parallel="true"
           failonerror="true"
           dir="${basedir}"
           dest="${signatures.fabric.classes}"
           relative="false"
           skipemptyfilesets="true"
           vmlauncher="false">
      <arg value="${fabc}" />
      <arg value="-nooutput" />
      <arg value="-sig" />
      <arg value="-d" />
      <arg value="sig-classes/fabric" />
      <arg value="-sourcepath" />
      <arg value="src/signatures/fabric" />
      <srcfile />
      <fileset dir="${signatures.fabric.src}" includes="**/*.fab" />
      <globmapper from="*.fab" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the FabIL signatures -->
  <target name="fabil-signatures" depends="init,fabil-compiler,bin"
      description="Compiles the FabIL signature clasess">
    <mkdir dir="${signatures.fabil.classes}" />

    <apply executable="bash"
           parallel="true"
           failonerror="true"
           dir="${basedir}"
           dest="${signatures.fabil.classes}"
           relative="false"
           skipemptyfilesets="true"
           vmlauncher="false">
      <arg value="${filc}" />
      <arg value="-nooutput" />
      <arg value="-sig" />
      <arg value="-d" />
      <arg value="sig-classes/fabil" />
      <arg value="-sourcepath" />
      <arg value="src/signatures/fabil:src/runtime" />
      <srcfile />
      <fileset dir="${signatures.fabil.src}" includes="**/*.fil" />
      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the Fabric tools -->
  <target name="tools" depends="storebrowser,classloader-tools,debug-tools"
    description="Builds all Fabric tools" />

  <!-- Compiles the classloader tools -->
  <target name="classloader-tools" depends="worker,fabil-runtime"
    description="Builds the classloader tools">
    <mkdir dir="${tools.classes}" /> 
    <javac target="1.6" srcdir="${tools.classloader}"
	destdir="${tools.classes}" debug="on">
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- Compiles the store browser -->
  <target name="storebrowser" depends="worker,fabil-runtime"
    description="Builds the Fabric GUI store browser">
    <mkdir dir="${tools.classes}" /> 
    <javac target="1.6" srcdir="${tools.storebrowser}" destdir="${tools.classes}">
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric system-debugging tools -->
  <target name="debug-tools" depends="worker,fabil-runtime"
      description="Builds the Fabric debugging tools">
    <javac target="1.6" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/worker/debug/**" />
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="standard.classpath" />
      </classpath>
    </javac>
  </target>

  <!--
  ____________________________________________________________________________
    Compilation helper targets.
  -->

  <!-- Initializes the build -->
  <target name="init" depends="configure">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${classes}"/>
    <mkdir dir="${bootstrap.classes}"/>
    <mkdir dir="${runtime.classes}"/>
    <mkdir dir="${tests.classes}"/>
    <mkdir dir="${signatures.fabil.classes}"/>
    <mkdir dir="${signatures.fabric.classes}"/>
  </target>

  <!-- Compiles the bootstrap classes. -->
  <target name="bootstrap" depends="init,bootstrap-check"
      unless="bootstrap.up-to-date">
    <touch file="${bootstrap.tstamp}"/>
    <javac target="1.6" srcdir="${bootstrap.src}"
        destdir="${bootstrap.classes}" debug="on">
      <include name="**" />
      <sourcepath path="${system.src}"/>
      <classpath refid="standard.classpath"/>
    </javac>

    <!--
      The bootstrap classes pull in stuff from the system.  Give all class
      files in ${bootstrap.classes} an ancient timestamp so they get recompiled
      when we build things for real.
    -->
    <touch millis="0">
      <fileset dir="${bootstrap.classes}">
        <include name="**/*.class"/>
      </fileset>
    </touch>
  </target>

  <target name="bootstrap-check">
    <uptodate property="bootstrap.up-to-date" targetfile="${bootstrap.tstamp}">
      <srcfiles dir="${bootstrap.src}" includes="**" />
    </uptodate>
  </target>

  <!-- Compiles the Fabric runtime classes that are implemented in Java -->
  <target name="native" depends="bootstrap,native-check"
      unless="native.up-to-date">
    <javac target="1.6" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/lang/**" />
      <include name="fabric/common/util/**" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <target name="native-check">
    <uptodate property="native.up-to-date">
      <srcfiles dir="${system.src}" includes="fabric/lang/**" />
      <srcfiles dir="${system.src}" includes="fabric/common/util/**" />
      <globmapper from="*.java" to="../../classes/*.class" />
    </uptodate>
  </target>

  <!-- Compiles the Fabric store -->
  <target name="store" depends="init,native,fabil-runtime">
    <javac target="1.6" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <include name="fabric/store/**" />
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric worker API -->
  <target name="worker" depends="init,native,fabil-runtime">
    <javac target="1.6" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/worker/**" />
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <exclude name="fabric/worker/debug/**" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric dissemination node -->
  <target name="dissemination" depends="worker">
    <javac target="1.6" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/dissemination/**" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!--
    Compiles the Fabric array classes.

    Though these are technically part of fabil-runtime, they need to be
    compiled separately because the compiler uses the generated class files for
    typing information.  Things are done this way because we don't want to
    hardcode this typing information in the compiler in case it changes due to
    a change in the Fabric translation.
  -->
  <target name="fabric-arrays"
      depends="bin,fabil-compiler,fabil-signatures">
    <mkdir dir="${runtime.classes}" />

    <condition property="runtime.opt" value="-O0">
      <not><isset property="runtime.opt" /></not>
    </condition>

    <javac target="1.6" srcdir="${system.src}" destdir="${classes}" debug="on">
      <include name="fabric/worker/RetryException.java" />
      <include name="fabric/worker/UserAbortException.java" />
    </javac>

    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${runtime.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${filc}" />
      <arg line="${debug.flag}" />
      <arg value="${runtime.opt}" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <arg value="-cp" />
      <arg value="${bootstrap.classes}" />
      <srcfile />
      <fileset dir="${runtime.src}" includes="fabric/lang/arrays/*.fil"/>
      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the part of the Fabric runtime that is implemented in FabIL -->
  <target name="fabil-runtime"
      depends="init,fabil-compiler,fabil-signatures,fabric-arrays">
    <mkdir dir="${runtime.classes}" />

    <condition property="runtime.opt" value="-O0">
      <not><isset property="runtime.opt" /></not>
    </condition>

    <!-- XXX HACK -->
    <delete>
      <fileset dir="${signatures.fabil.classes}">
	<include name="fabric/util/Iterable.class" />
	<include name="fabric/util/Set.class" />
	<include name="fabric/util/Iterator.class" />
	<include name="fabric/util/Collection.class" />
      </fileset>
    </delete>

    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${runtime.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${filc}" />
      <arg line="${debug.flag}" />
      <arg value="${runtime.opt}" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <arg value="-j" />
      <arg value="-Xmx256M" />
      <srcfile />
      <fileset dir="${runtime.src}"
          includes="**/*.fil"
          excludes="fabric/util/*.fil,fabric/lang/arrays/*.fil" />
      <filelist dir="${runtime.src}">
        <file name="fabric/util/HashMap.fil"/>
        <file name="fabric/util/LinkedList.fil"/>
        <file name="fabric/util/HashSet.fil"/>
        <file name="fabric/util/LinkedHashSet.fil"/>
        <file name="fabric/util/ArrayList.fil"/>
        <file name="fabric/util/Collections.fil"/>
        <file name="fabric/util/Arrays.fil"/>
        <file name="fabric/util/TreeMap.fil"/>
        <file name="fabric/util/TreeSet.fil"/>
      </filelist>

      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the part of the runtime that is implemented in Fabric -->
  <target name="fabric-runtime"
      depends="fabric-signatures,fabil-runtime">
    <mkdir dir="${runtime.classes}" />

    <condition property="runtime.opt" value="-O0">
      <not><isset property="runtime.opt" /></not>
    </condition>

    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${runtime.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${fabc}" />
      <arg line="${debug.flag}" />
      <arg value="${runtime.opt}" />
      <arg value="-d" />
      <arg value="rt-classes" />
      <arg value="-sourcepath" />
      <arg value="src/runtime" />
      <arg value="-j" />
      <arg value="-Xmx256M" />
      <srcfile />
      <fileset dir="${runtime.src}"
          includes="**/*.fab" />

      <globmapper from="*.fab" to="*.class" />
    </apply>
  </target>

  <!-- Used to pass -O to filc when compiling the runtime. -->
  <target name="opt">
    <property name="runtime.opt" value="-O" />
  </target>

  <!--
  ****************************************************************************
    Example-application targets
  ****************************************************************************
  -->

  <!-- Compiles the Fabric test programs -->
  <target name="tests" depends="nfsserver,fablib"
      description="Builds the Fabric test programs">
    <javac target="1.6" srcdir="${src}" destdir="${classes}" debug="on"
        includes="tests/**">
      <classpath refid="standard.classpath"/>
    </javac>
  </target>

  <!-- Compiles the Fabric NFS server -->
  <target name="nfsserver" depends="worker,fabil-compiler,fabil-runtime"
      description="Builds the Fabric NFS server implementation">
    <javac target="1.6" srcdir="${examples.fabnfs}" destdir="${tests.classes}"
        debug="on">
      <include name="fabnfs/**" />
      <classpath refid="standard.classpath"/>
    </javac>
    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${basedir}"
        dest="${tests.classes}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${filc}" />
      <arg line="${debug.flag}" />
      <arg value="-d" />
      <arg value="tests/classes" />
      <arg value="-sourcepath" />
      <arg value="${examples.fabnfs}" />
      <arg value="-cp" />
      <arg value="tests/classes" />
      <srcfile />
      <fileset dir="${examples.fabnfs}"
          includes="fabnfs/*.fil" />
      <globmapper from="*.fil" to="*.class" />
    </apply>
  </target>

  <!-- Compiles the SIF framework -->
  <target name="fablib"
      depends="worker,fabric-compiler,fabric-runtime,fabric-signatures">
    <subant target="" failonerror="false">
      <fileset file="tests/jif/build.xml"/>
      <fileset file="tests/sif/build.xml"/>
    </subant>
  </target>

  <!-- Compiles the Fabric applet -->
  <target name="applet" depends="worker,fabil-runtime"
      description="Builds the Fabric Browser Applet">
    <mkdir dir="${applet.classes}" /> 
    <javac target="1.6" srcdir="${applet.src}" destdir="${applet.classes}">
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="standard.classpath"/>
      </classpath>
    </javac>
  </target>

  <!--
  ****************************************************************************
    Version-management targets
  ****************************************************************************
  -->

  <target name="bump-version">
    <antcall target="bump-patch" />
  </target>

  <target name="bump-major">
    <propertyfile file="${basedir}/version.properties">
      <entry key="version.major" type="int" operation="+" value="1"
	  pattern="0" />
      <entry key="version.minor" type="int" value="0" />
      <entry key="version.patch" type="int" value="0" />
    </propertyfile>

    <!-- Reread version info and regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version" />
  </target>

  <target name="bump-minor">
    <propertyfile file="${basedir}/version.properties">
      <entry key="version.minor" type="int" operation="+" value="1"
	  pattern="0" />
      <entry key="version.patch" type="int" value="0" />
    </propertyfile>

    <!-- Reread version info and regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version" />
  </target>

  <target name="bump-patch">
    <propertyfile file="${basedir}/version.properties">
      <entry key="version.patch" type="int" operation="+" value="1"
	  pattern="0" />
    </propertyfile>

    <!-- Reread version info and regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version" />
  </target>

  <!--
  ____________________________________________________________________________
    Version-management helper targets.
  -->

  <!-- Generates version files in the source tree. -->
  <target name="gen-version">
    <antcall target="configure-buildstring" />
    <antcall target="gen-version-java" />
  </target>

  <!-- Puts version information into the Java sources. -->
  <target name="gen-version-java" depends="configure-buildstring">
    <antcall target="gen-version-java-compiler">
      <param name="name.code" value="fabil" />
      <param name="name.human" value="FabIL" />
    </antcall>
    <antcall target="gen-version-java-compiler">
      <param name="name.code" value="fabric" />
      <param name="name.human" value="Fabric" />
    </antcall>
    <antcall target="gen-version-java-system" />
  </target>

  <!--
    Puts version information into the Java sources for one of the compilers.

    Parameters:
      name.human - Human-readable version of the name of the extension.
      name.code - Source-code version of the name of the extension.
  -->
  <target name="gen-version-java-compiler">
    <echo file="${compiler.src}/${name.code}/Version.java">package ${name.code};

/**
 * Version information for ${name.human} extension.
 *
 * DO NOT EDIT THIS CLASS BY HAND!  This is automatically generated by Ant.  If
 * you wish to change the version number, run one of the following:
 *
 *   ant bump-version  (Bumps the version number.)
 *   ant bump-major    (Bumps the major version number.)
 *   ant bump-minor    (Bumps the minor version number.)
 *   ant bump-patch    (Bumps the patch level.)
 */
public class Version extends polyglot.main.Version {
  @Override
  public String name() {
    return "${name.code}";
  }

  @Override
  public int major() {
    return ${fabric.version.major};
  }

  @Override
  public int minor() {
    return ${fabric.version.minor};
  }

  @Override
  public int patch_level() {
    return ${fabric.version.patch};
  }

  @Override
  public String toString() {
    return "${fabric.version.build}";
  }
}
</echo>
  </target>

  <!--
    Puts version information into the Java sources for the Fabric system.
  -->
  <target name="gen-version-java-system">
    <echo file="${system.src}/fabric/common/Version.java">package fabric.common;

/**
 * This encapsulates the version of Fabric.
 *
 * DO NOT EDIT THIS CLASS BY HAND!  This is automatically generated by Ant.  If
 * you wish to change the version number, run one of the following:
 *
 *   ant bump-version  (Bumps the version number.)
 *   ant bump-major    (Bumps the major version number.)
 *   ant bump-minor    (Bumps the minor version number.)
 *   ant bump-patch    (Bumps the patch level.)
 */
public class Version {
  private int major = ${fabric.version.major};
  private int minor = ${fabric.version.minor};
  private int patch = ${fabric.version.patch};

  public int major() { return major; }
  public int minor() { return minor; }
  public int patch() { return patch; }

  @Override
  public String toString() {
    return "${fabric.version.build}";
  }
}
</echo>
  </target>

  <!--
  ****************************************************************************
    Javadoc target
  ****************************************************************************
  -->

  <target name="javadoc" description="Runs javadoc over the Fabric source code">
    <!-- Compiler classes -->
    <javadoc sourcepath="${compiler.src}" destdir="${doc}/api/compiler"
	encoding="UTF-8">
      <packageset dir="${compiler.src}" defaultexcludes="yes">
	<include name="**" />
      </packageset>
    </javadoc>

    <!-- System classes -->
    <javadoc sourcepath="${system.src}" destdir="${doc}/api/system"
	encoding="UTF-8">
      <packageset dir="${system.src}" defaultexcludes="yes">
	<include name="**" />
      </packageset>
    </javadoc>
  </target>

  <!--
  ****************************************************************************
    Jar targets
  ****************************************************************************
  -->

  <!-- Main target for generating jars. -->
  <target name="jars" depends="jar-base,jar-runtime,jar-sig"
    description="Builds all jars" />

  <target name="jar-base"
      depends="jar-manifest,fabil-compiler,fabric-system"
      description="Builds ${name}.jar">
    <jar jarfile="${jar.base}" basedir="${classes}" manifest="${tmp.manifest}"
	excludes="**/*.java" />
  </target>

  <target name="jar-runtime"
      depends="jar-manifest,fabil-runtime,fabric-runtime"
      description="Builds ${name}-rt.jar">
    <jar jarfile="${jar.runtime}" basedir="${runtime.classes}"
	manifest="${tmp.manifest}" excludes="**/*.java" />
  </target>

  <target name="jar-sig"
      depends="jar-manifest,fabil-signatures,fabric-signatures"
      description="Builds ${name}-sig.jar and ${name}-il-sig.jar">
    <jar jarfile="${jar.signature.fabil}" basedir="${signatures.fabil.classes}"
	manifest="${tmp.manifest}" excludes="**/*.java" />
    <jar jarfile="${jar.signature.fabric}"
	basedir="${signatures.fabric.classes}" manifest="${tmp.manifest}"
	excludes="**/*.java" />
  </target>

  <!--
  ____________________________________________________________________________
    Jar helper targets.
  -->

  <target name="jar-manifest" depends="configure-buildstring">
    <tempfile property="tmp.manifest" deleteonexit="true" />
    <manifest file="${tmp.manifest}">
      <attribute name="Built-By" value="${user.name}" />
      <attribute name="Implementation-Version" value="${fabric.version}" />
      <attribute name="Built-Date" value="${fabric.version.build}" />
    </manifest>
  </target>

  <target name="signed-jars" depends="package">
    <copy todir="${applet.dir}/applets/lib">
      <fileset dir="${name}/lib" includes="*.jar"/>
    </copy>
    <signjar alias="Applet" storepass="password"
	keystore="${applet.dir}/appletcert.keystore">
      <fileset dir="${applet.dir}/applets/lib" includes="*.jar"/>
    </signjar>
  </target>

  <target name="jar-applet" depends="applet,signed-jars">
    <jar jarfile="${applet.jar}" basedir="${applet.classes}"
	excludes="**/*.java">
      <manifest>
	<attribute name="Built-By" value="${user.name}"/>
	<attribute name="Class-Path" value="lib/FreePastry-2.1.jar 
	    lib/JFlex.jar lib/fabcoll.jar lib/fabric-rt.jar lib/fabric.jar 
	    lib/java_cup.jar lib/je-3.3.75.jar lib/jif.jar lib/polyglot.jar"/>
      </manifest>
      <fileset dir="${applet.src}" includes="JNLP-INF/**"/>
    </jar>
    <signjar jar="${applet.jar}" alias="Applet" storepass="password"
	keystore="${applet.dir}/appletcert.keystore"/>
    <copy file="${applet.jar}" todir="${applet.dir}/applets" overwrite="true"/>
    <!-- <copy file="${applet.src}/JNLP-INF/APPLICATION.jnlp"
	 tofile="${applet.dir}/applets/fabapp.jnlp" overwrite="true"/> -->
  </target>

  <!--
  ****************************************************************************
    Distribution targets.
  ****************************************************************************
  -->

  <!-- Main target for generating the Fabric distribution. -->
  <target name="dist" depends="dist-tarball"
      description="Generates the distribution">
    <!-- Output a checklist for verifying that the distribution is good. -->
    <echo message="Examples build and run" />
    <echo message="Regression tests successful" />
    <echo message="CHANGES file up-to-date" />
    <echo message="Version bump" />
  </target>

  <!--
  ____________________________________________________________________________
    Distribution helper targets.
  -->

  <!-- Creates the distribution tarball from CVS and SVN. -->
  <target name="dist-tarball" depends="configure-buildstring,jdk-home">
    <antcall target="mkdir-tmp" />

    <!-- Check out Polyglot from CVS. -->
    <antcall target="cvs-checkout">
      <param name="name" value="polyglot" />
      <param name="root" value="${cvs.root.polyglot}" />
    </antcall>

    <!-- Build Polyglot jars. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="polyglot" />
      <param name="sub-ant.target" value="jar-all" />
    </antcall>

    <!-- Check out Jif from CVS. -->
    <antcall target="cvs-checkout">
      <param name="name" value="jif" />
      <param name="root" value="${cvs.root.jif}" />
    </antcall>

    <!-- Configure Jif to build against the above copy of Polyglot. -->
    <concat destfile="${tmp}/jif/config.properties" append="no">
      polyglot.home=${tmp}/polyglot
      jdk.home=${jif.jdk.home}
    </concat>

    <!-- Build Jif jars. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="jif" />
      <param name="sub-ant.target" value="jar" />
    </antcall>

    <!-- Check out Fabric from SVN. -->
    <antcall target="svn-checkout">
      <param name="name" value="fabric" />
      <param name="root" value="${svn.root.fabric}" />
    </antcall>

    <!-- Generate version information in the scratch copy. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="fabric" />
      <param name="sub-ant.target" value="gen-version" />
    </antcall>

    <!-- Copy tarballs into the scratch copy. -->
    <copy todir="${tmp}/fabric/lib">
      <fileset dir="${tmp}/polyglot/lib">
	<include name="polyglot.jar" />
	<include name="ppg.jar" />
	<include name="JFlex.jar" />
	<include name="java_cup.jar" />
      </fileset>
      <fileset dir="${tmp}/jif/lib">
	<include name="jif.jar" />
      </fileset>
    </copy>

    <!-- Create the distribution tarball in the scratch copy. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="fabric" />
      <param name="sub-ant.target" value="dist.tar" />
    </antcall>

    <!-- Move the distribution tarball out of the scratch directory. -->
    <move tofile="${basedir}/fabric-${fabric.version}.tar.gz"
	file="${tmp}/fabric/fabric-${fabric.version}.tar.gz" />

    <!-- Clean up. -->
    <antcall target="rmdir-tmp" />
  </target>

  <!-- Creates a distribution tarball from the current working copy. -->
  <target name="dist.tar" depends="dist-tmp">
    <delete dir="${basedir}/fabric-${fabric.version}" />
    <move tofile="${basedir}/fabric-${fabric.version}" file="${tmp}" />
    <tar destfile="${basedir}/fabric-${fabric.version}.tar.gz"
	basedir="${basedir}" includes="fabric-${fabric.version}/**"
	compression="gzip" />
  </target>

  <!-- Creates a distribution directory in ${tmp} from the working copy. -->
  <target name="dist-tmp"
      depends="configure-version,build-all,jars,javadoc,mkdir-tmp">
    <!-- Copy top-level files. -->
    <copy todir="${tmp}" includeEmptyDirs="false">
      <fileset dir="${basedir}">
	<include name="version.properties" />
	<include name="build.xml" />
	<include name="config.properties.in" />
	<include name="README" />
      </fileset>
    </copy>

    <!-- Copy binaries. -->
    <copy todir="${tmp}/bin" includeEmptyDirs="false">
      <fileset dir="${bin}">
	<include name="add-trusted-ca" />
	<include name="ca-sign" />
	<include name="codebase-tool" />
	<include name="defs.in" />
	<include name="fab" />
	<include name="fabc" />
	<include name="fab-store" />
	<include name="filc" />
	<include name="genkey" />
	<include name="import-cert" />
	<include name="make-ca" />
	<include name="make-node" />
	<include name="run-fab-class" />
	<include name="store-browser" />
      </fileset>
    </copy>

    <!-- Make binaries executable. -->
    <chmod perm="a+x" verbose="true">
      <fileset dir="${tmp}/bin">
	<exclude name="defs.in" />
      </fileset>
    </chmod>

    <!-- Copy docs. -->
    <copy todir="${tmp}/doc" includeEmptyDirs="false">
      <fileset dir="${doc}">
	<include name="api/**" />
      </fileset>
    </copy>

    <!-- Copy configuration. -->
    <copy todir="${tmp}/etc" includeEmptyDirs="false">
      <fileset dir="${etc}">
	<include name="config/EXAMPLE.properties.in" />
	<include name="config.properties" />
	<include name="logging.properties" />
      </fileset>
    </copy>

    <!-- Copy libraries. -->
    <copy todir="${tmp}/lib" includeEmptyDirs="false">
      <fileset dir="${lib}">
	<!-- Compiled jars -->
	<include name="${name}.jar" />
	<include name="${name}-rt.jar" />
	<include name="${name}-il-sig.jar" />
	<include name="${name}-sig.jar" />

	<!-- Polyglot, Jif, and dependencies -->
	<include name="polyglot.jar" />
	<include name="jif.jar" />
	<include name="JFlex.jar" />
	<include name="java_cup.jar" />
	<include name="ppg.jar" />

	<!-- FreePastry, BDB, BouncyCastle -->
	<include name="FreePastry-2.1.jar" />
	<include name="je-3.3.75.jar" />
	<include name="bcprov-jdk15-145.jar" />
      </fileset>
    </copy>

    <!-- Copy compiler and system sources. -->
    <copy todir="${tmp}/src" includeEmptyDirs="false">
      <fileset dir="${src}">
	<include name="**/README" />
	<include name="bootstrap/**/*.java" />
	<include name="compiler/**/*.java" />
	<include name="compiler/**/package.html" />
	<include name="compiler/**/parse/*.flex" />
	<include name="compiler/**/parse/*.cup" />
	<include name="compiler/**/parse/*.ppg" />
	<include name="compiler/**/doc-files/**" />
	<include name="runtime/**/*.fil" />
	<include name="runtime/**/*.fab" />
	<include name="signatures/fabil/**/*.fil" />
	<include name="signatures/fabric/**/*.fab" />
	<include name="system/**/*.java" />
	<!-- These will be handled below. -->
	<exclude name="runtime/fabric/util/**" />
      </fileset>
    </copy>

    <!-- Handle runtime/fabric/util specially to exclude unused classes. -->
    <copy todir="${tmp}/src/runtime/fabric/util" includeEmptyDirs="false">
      <fileset dir="${runtime.src}/fabric/util">
	<include name="**/*.fil" />
	<!-- Only include classes that were compiled. -->
	<present targetdir="${runtime.classes}/fabric/util">
	  <globmapper from="*.fil" to="*.java" />
	</present>
      </fileset>
    </copy>

    <!-- Copy tools. -->
    <copy todir="${tmp}/tools" includeEmptyDirs="false">
      <fileset dir="${tools}">
	<include name="storebrowser/**/README" />
	<include name="storebrowser/**/*.java" />
	<include name="classloader/**/README" />
	<include name="classloader/**/*.java" />
      </fileset>
    </copy>
  </target>

  <!--
    Gets the JDK home from Jif's config.properties file.  If the JDK home is
    not configured in Jif, then this falls back on the JAVA_HOME environment
    variable.
  -->
  <target name="jdk-home">
    <property file="${jif.home}/config.properties" prefix="jif" />
    <condition property="jif.jdk.home" value="${env.JAVA_HOME}">
      <and>
	<isset property="env.JAVA_HOME" />
	<not>
	  <isset property="jif.jdk.home" />
	</not>
      </and>
    </condition>
  </target>

  <!--
    Checks out a fresh copy of a project from CVS into ${tmp}.

    Parameters:
      root - the CVS root
      name - the name of the module to check out
  -->
  <target name="cvs-checkout">
    <cvs command="checkout ${name}" quiet="true" cvsRsh="ssh" cvsRoot="${root}"
	dest="${tmp}" failonerror="true" />
  </target>

  <!--
    Checks out a fresh copy of a project from SVN into ${tmp}.

    Parameters:
      root - the SVN URL to check out
      name - the name of the destination in ${tmp}.
  -->
  <target name="svn-checkout">
    <exec executable="svn" failonerror="true">
      <arg value="co" />
      <arg value="-q" />
      <arg value="${root}" />
      <arg value="${tmp}/${name}" />
    </exec>
  </target>

  <target name="mkdir-tmp">
    <antcall target="rmdir-tmp" />
    <mkdir dir="${tmp}" />
  </target>

  <target name="rmdir-tmp">
    <delete dir="${tmp}" />
  </target>

  <!--
    Runs an Ant target in the ${tmp} scratch area.

    Parameters:
      sub-ant.dir - the subdirectory in ${tmp} in which to find the build.xml
		    file.
      sub-ant.target - the target to run.
  -->
  <target name="sub-ant-dist">
    <ant inheritAll="false" antfile="${tmp}/${sub-ant.dir}/build.xml"
	dir="${tmp}/${sub-ant.dir}" target="${sub-ant.target}" />
  </target>

  <!--
    ******************************************************************
    XXX REMOVE THIS "PACKAGE" TARGET
    ******************************************************************
  -->

  <target name="package" depends="build-all,jars,fablib">
    <!-- Delete any old version of the packaged directory -->
    <delete dir="${name}"/>
    <!-- Create the package directory and subdirectories -->
    <mkdir dir="${name}"/>
    <mkdir dir="${name}/lib"/>
    <mkdir dir="${name}/bin"/>
    <mkdir dir="${name}/etc"/>
    <!-- Make sure polyglot and jif jars are built -->
    <subant target="jar" failonerror="false">
		  <fileset file="${polyglot.home}/build.xml"/>
		  <fileset file="${jif.home}/build.xml"/>
    </subant>
    <!-- Package the collections -->
    <subant target="jar" failonerror="false">
		  <fileset file="${basedir}/tests/jif/build.xml"/>
    </subant>
    <!-- Package SIF -->
    <subant target="jar" failonerror="false">
		  <fileset file="${basedir}/tests/sif/build.xml"/>
    </subant>
    <!-- Package SIF examples -->
    <subant target="jar-examples" failonerror="false">
		  <fileset file="${basedir}/tests/sif/build.xml"/>
    </subant>

    <!-- Move these jars into lib -->
    <move todir="${name}/lib">
      <fileset dir="${basedir}/tests/jif" includes="fabcoll.jar"/>
      <fileset dir="${basedir}/tests/sif" includes="*.jar"/>
    </move>
    
    <!-- Now copy other jar files into lib -->
    <copy todir="${name}/lib">
      <fileset dir="${basedir}/lib" includes="fabric.jar,fabric-rt.jar"/>
      <fileset dir="${basedir}/lib" includes="FreePastry-2.1.jar,je-3.3.75.jar"/>
      <fileset dir="${polyglot.home}/lib" includes="polyglot.jar,JFlex.jar,java_cup.jar"/>
      <fileset dir="${jif.home}/lib" includes="jif.jar"/>
      <fileset dir="${java.home}/lib" includes="rt.jar"/>
    </copy>

    <!-- Copy necessary scripts into bin -->
    <copy todir="${name}/bin">
      <fileset dir="${basedir}/bin" includes="fabc,fab,fab-store,genkey,startstore"/>
    </copy>

    <!-- Make sure these scripts are executable -->
    <chmod perm="755" dir="${name}/bin" includes="*" verbose="true"/>

    <copy file="${basedir}/bin/defs.package"  tofile="${name}/bin/defs" />
    <copy file="${basedir}/README.package"  tofile="${name}/README" />


    <!-- Copy etc -->
    <copy todir="${name}/etc">
      <fileset dir="${basedir}/etc" />
    </copy>

    <!-- Now package the directory as a tar.gz file -->
    <!--exec executable="tar"
	     dir="${basedir}"
	     failonerror="true"
	     vmlauncher="false" >
	<arg value="-c" />
	<arg value="-z" />
	<arg value="-f" />
	<arg value="${name}.tar.gz" />
	<arg value="${name}/" />
    </exec-->
    
    <!-- Now delete the directory -->
    <!--delete dir="${basedir}/${name}" /-->

  </target>

  <!--
  ****************************************************************************
    Generic helper stuff for building Polyglot extensions.
  ****************************************************************************
  -->

  <target name="standard-ext">
    <antcall target="standard-ext-lexer" />
    <antcall target="standard-ext-${parser.type}-parser" />
    <antcall target="standard-ext-qq-dep" />
    <antcall target="compile-ext" />
  </target>

  <target name="standard-ext-lexer">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="${ext}.flex" />
    </antcall>
  </target>

  <target name="jflex-lexer" depends="jflex-lexer-deps"
      unless="jflex.lexer.up-to-date">
    <java classname="JFlex.Main" fork="true" dir="${lexer.dir}"
        failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="${jflex.file}" />
    </java>
  </target>

  <target name="jflex-lexer-deps">
    <dependset>
      <srcfileset dir="${lexer.dir}" includes="${jflex.file}" />
      <targetfileset dir="${lexer.dir}" includes="${lexer.class}.java" />
    </dependset>
    <available property="jflex.lexer.up-to-date"
        file="${lexer.dir}/${lexer.class}.java" />
  </target>

  <target name="standard-ext-ppg-parser">
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="ppg.file" value="${ext}.ppg" />
      <param name="cup.file" value="${ext}_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="ppg-parser" depends="ppg-parser-deps"
      unless="ppg.parser.up-to-date">
    <java classname="ppg.PPG" fork="true" dir="${parser.dir}"
        output="${parser.dir}/${cup.file}" failonerror="true" logError="true">
      <classpath refid="standard.classpath" />
      <arg value="${ppg.file}" />
    </java>
    <antcall target="cup-parser" />
  </target>

  <target name="ppg-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${ppg.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${cup.file}" />
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="ppg.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${cup.file}" />
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="cup-parser" depends="cup-parser-using-jar"
    unless="cup.parser.up-to-date">
  </target>

  <target name="cup-parser-using-jar" depends="cup-parser-deps"
      unless="cup.parser.up-to-date">
    <java classname="java_cup.Main" fork="true" dir="${parser.dir}" failonerror="true">
      <classpath refid="standard.classpath" />
      <arg value="-parser"/>
      <arg value="${parser.class}"/>
      <arg value="-symbols"/>
      <arg value="${symbol.class}"/>
      <arg value="${cup.file}"/>
    </java>
  </target>

  <target name="cup-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${cup.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="cup.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="standard-ext-qq-dep" if="has-qq">
    <antcall target="standard-ext-qq" />
  </target>

  <target name="standard-ext-qq">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="qq.flex" />
    </antcall>
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="ppg.file" value="qq.ppg" />
      <param name="cup.file" value="qq_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="compile-ext">
    <javac source="1.6" target="1.6" srcdir="${compiler.src}"
        destdir="${classes}" debug="on" includes="${ext.pkg}/**">
      <classpath refid="standard.classpath" />
    </javac>
  </target>

</project>

