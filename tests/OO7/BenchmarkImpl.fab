// You can redistribute this software and/or modify it under the terms of
// the Ozone Core License version 1 published by ozone-db.org.
//
// The original code and portions created by Thorsten Fiebig are
// Copyright (C) 2000-@year@ by Thorsten Fiebig. All rights reserved.
// Code portions created by SMB are
// Copyright (C) 1997-@year@ by SMB GmbH. All rights reserved.
//
// $Id: BenchmarkImpl.fab,v 1.4 2007-11-06 21:20:19 mdgeorge Exp $

package OO7;

import fabric.util.*;
import java.util.Random;
import fabric.util.HashMap;

import fabric.client.Core;
import fabric.client.Client;

public class BenchmarkImpl implements Benchmark {
  // data base parameters
  private final static int fTest3Conn = 3;
  private final static int fTest1Conn = 2;
  private final static int fSmall     = 1;
  private final static int fTiny      = 0;

  private final static Core local = Client.getClient().getLocalCore();
  private final static int[] fNumAtomicPerComp = new int[]@local { 20, 20, 20, 20 };
  private final static int[] fConnPerAtomic    = new int[]@local { 1, 3, 3, 3 };
  private final static int[] fDocumentSize     = new int[]@local { 20, 20, 20, 2000 };
  private final static int[] fManualSize       = new int[]@local { 1000, 1000, 1000, 100000 };
  private final static int[] fNumCompPerModule = new int[]@local { 5, 5, 50, 500 };
  private final static int[] fNumAssmPerAssm   = new int[]@local { 3, 3, 3, 3 };
  private final static int[] fNumAssmLevels    = new int[]@local { 3, 3, 7, 7 };
  private final static int[] fNumCompPerAssm   = new int[]@local { 3, 3, 3, 3 };
  private final static int[] fNumModules       = new int[]@local { 1, 1, 1, 1 };

  private final static String database = "OO7 Database";

  private static final Random rand = new Random();

  int scale = 0;
  Module module = null;
  HashMap atomicParts = null;

  public static void main(String[] args) {
    if (args.length == 0) {
      printUsage();
      System.exit(1);
    } else {
      if (args.length == 1 && args[1] == "query") {
        printUsage();
        System.exit(1);
      }
    }

    try {
      long start = System.currentTimeMillis();

      Core    core = fabric.client.Client.getClient().getCore(0);
      HashMap root = (HashMap) core.getRoot();
      
      if (args[0].equals("query")) {
        Benchmark anBenchmark = (Benchmark) root.get(database);
        if (args[1].equals("traversal")) {
          anBenchmark.traversalQuery();
        } else if (args[1].equals("match")) {
          anBenchmark.matchQuery();
        } else {
          System.out.println("Invalid query");
          printUsage();
          System.exit(1);
        }
      } else {
        if (args[0].equals("create")) {
          int scale = -1;
          if (args[1].equals("test3Conn")) {
            scale = fTest3Conn;
          } else if (args[1].equals("test1Conn")) {
            scale = fTest1Conn;
          } else if (args[1].equals("tiny")) {
            scale = fTiny;
          } else if (args[1].equals("small")) {
            scale = fSmall;
          } else {
            System.out.println("Invalid scale");
            System.exit(1);
          }
          atomic {
            Benchmark bench = new BenchmarkImpl@core(scale);
            root.put("OO7 Benchmark", bench);
          }
        }
      }

      System.out.println("time: " + (System.currentTimeMillis() - start)
          + "msec");

    } catch (Exception e) {
      System.out.println(e);
      e.printStackTrace();
    }
  }

  static void printUsage() {
    System.out.println("usage: BanchmarkImpl (create|query) [options]");
    System.out.println("    create options:");
    System.out.println("        size        - (tiny|small|large)");
    System.out.println("    query options:");
    System.out.println("        type        - (traversal|match)");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Database traversals                                                      //
  //////////////////////////////////////////////////////////////////////////////

  public void traversalQuery() throws Exception {
    Core local = Client.getClient().getLocalCore();
    HashMap table = new HashMap@local();
    long time = System.currentTimeMillis();
    traversal(module.designRoot(), table);
    time = (System.currentTimeMillis() - time);
    System.out.println("Millis: " + time);
  }

  protected void traversal(Assembly current, HashMap visited) throws Exception {
    if (current instanceof BaseAssembly) {
      BaseAssembly baseAssembly = (BaseAssembly) current;

      Iterator iter = baseAssembly.componentsShar().iterator();
      while (iter.hasNext()) {
        CompositePart next = (CompositePart) iter.next();
        if (visited.containsKey(next)) continue;
        dfs(next);
        visited.put(next, next);
      }

    } else if (current instanceof ComplexAssembly) {
      ComplexAssembly complexAssembly = (ComplexAssembly) current;

      Iterator iter = complexAssembly.subAssemblies().iterator();
      while (iter.hasNext())
        traversal((Assembly) iter.next(), visited);
    } else {
      throw new Exception("Invalid Assembly");
    }
  }

  protected void dfs(CompositePart root) throws Exception {
    Core local = Client.getClient().getLocalCore();
    dfsVisit(root.rootPart(), new HashMap@local());
  }

  protected void dfsVisit(AtomicPart current, HashMap visited) throws Exception {

    Iterator iter = current.from().iterator();
    while (iter.hasNext()) {
      Connection connection = (Connection) iter.next();
      AtomicPart part = connection.to();
      if (!visited.containsKey(part)) {
        visited.put(part, part);
        dfsVisit(part, visited);
      }
    }
  }

  public void matchQuery() throws Exception {
    // generate a random list of objects to fetch
    Core local = Client.getClient().getLocalCore();
    int[] oids = new int[1000]@local;
    for (int i = 0; i < oids.length; ++i)
      oids[i] = rand.nextInt(atomicParts.size());

    // access each
    long time = System.currentTimeMillis();
    for (int i = 0; i < oids.length; ++i) {
      AtomicPart part = (AtomicPart) atomicParts.get(new Integer@local(i));
      long x = part.x();
    }
    time = (System.currentTimeMillis() - time);
    System.out.println("Millis: " + time);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Database creation                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public BenchmarkImpl(int scale) throws Exception {
    this.scale = scale;
    Core local = Client.getClient().getLocalCore();
    this.atomicParts = new HashMap@local();
    this.module = createModule();
  }

  protected Module createModule() throws Exception {
    Core local = Client.getClient().getLocalCore();
    CompositePart[] compositeParts =
        new CompositePart[fNumCompPerModule[scale]]@local;
    for (int i = 0; i < fNumCompPerModule[scale]; ++i)
      compositeParts[i] = createCompositePart();

    Module module = new ModuleImpl();
    ComplexAssembly designRoot =
        (ComplexAssembly) createAssembly(module, fNumAssmLevels[scale],
            compositeParts);
    module.setDesignRoot(designRoot);

    return module;
  }

  protected CompositePart createCompositePart() throws Exception {
    Core local = Client.getClient().getLocalCore();
    CompositePart compositePart = new CompositePartImpl();
    compositePart.setDocumentation(new DocumentImpl());

    AtomicPart[] parts = new AtomicPart[fNumAtomicPerComp[scale]]@local;
    for (int i = 0; i < parts.length; ++i) {
      parts[i] = createAtomicPart(compositePart);
      compositePart.addPart(parts[i]);
    }
    compositePart.setRootPart(parts[0]);

    for (int i = 0; i < parts.length; ++i) {
      // Add a connection to i's neighbor
      Connection c =
          new ConnectionImpl(parts[i], parts[(i + 1) % parts.length]);

      // add random connections
      for (int j = 0; j < (fConnPerAtomic[scale] - 1); ++j) {
        c = new ConnectionImpl(parts[i], parts[rand.nextInt(parts.length)]);
      }
    }

    return compositePart;
  }

  protected AtomicPart createAtomicPart(CompositePart parent) throws Exception {
    AtomicPart result = new AtomicPartImpl();
    atomicParts.put(new Integer(atomicParts.size()), result);
    result.setPartOf(parent);
    return result;
  }

  protected Assembly createAssembly(Module parent, int level,
      CompositePart[] available) throws Exception {
    if (level == 1) {
      // create base assembly
      BaseAssembly result = new BaseAssemblyImpl();
      parent.addAssembly(result);

      for (int j = 0; j < fNumCompPerAssm[scale]; ++j) {
        int k = rand.nextInt(available.length);
        result.addComponentsShar(available[k]);
      }

      return result;
    } else {
      // create complex assembly
      ComplexAssembly result = new ComplexAssemblyImpl();
      parent.addAssembly(result);

      for (int i = 0; i < fNumAssmPerAssm[scale]; ++i)
        result.addSubAssembly(createAssembly(parent, level - 1, available));
      return result;
    }
  }
}

/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/

