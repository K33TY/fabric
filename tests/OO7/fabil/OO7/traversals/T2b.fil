package OO7.traversals;
import OO7.*;

import fabric.worker.Store;
import fabric.worker.Worker;
import fabric.util.Iterator;
import fabric.util.HashMap;

/** Traversal T2: Traversal with updates Repeat Traversal T1, but update
 *  objects during the traversal. There are three types of update patterns in
 *  this traversal. In each, a single update to an atomic part consists of
 *  swapping its (x,y) attributes. The three types of updates are:
 *
 *  B Update every atomic part as it is encountered.
 */
public class T2b extends PrivatePartTraversal {
  HashMap visited = null;

  public static void main(String[] args) {
    Store local = Worker.getWorker().getLocalStore();
    T2b t2 = null;
    atomic {
      t2 = new T2b@local();
    }
    t2.mainImpl(args);
  }

  public void visitAtomicPart (AtomicPart current) {
    long x = current.x();
    current.setX(current.y());
    current.setY(x);

    Iterator iter = current.from().iterator();
    while (iter.hasNext()) {
      Connection connection = (Connection) iter.next();
      AtomicPart part = connection.to();
      if (!visited.containsKey(part)) {
        visited.put(part, part);
        part.accept(this);
      }
    }
  }

  public void visitCompositePart (CompositePart p) {
    Store local = Worker.getWorker().getLocalStore();
    visited = new HashMap@local();
    p.rootPart().accept(this);
    visited = null;
  }
}

/*
** vim: ts=2 sw=2 cindent cino=\:0 et syntax=java
*/
