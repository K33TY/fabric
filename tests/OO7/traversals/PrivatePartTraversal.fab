package OO7.traversals;
import OO7.*;

import fabric.client.Client;
import fabric.client.Core;
import fabric.util.Iterator;

/** Common base class for various traversals.  This class represents a visitor
 *  that traverses the assembly hierarchy and then operates on the composite
 *  parts in some way.
 */
public abstract class PrivatePartTraversal extends Traversal {

  public void visitBenchmark (Benchmark b) {
    atomic {
      Core local = Client.getClient().getLocalCore();
      Iterator i = b.modulesById().values().iterator(local);
      while (i.hasNext())
        visitModule((Module) i.next());
    }
  }
  
  public void visitModule (Module m) {
    m.designRoot().accept(this);
  }
  
  public void visitComplexAssembly (ComplexAssembly ca) {
    Core local = Client.getClient().getLocalCore();
    Iterator i = ca.subAssemblies().iterator(local);
    while (i.hasNext())
      ((Assembly) i.next()).accept(this);
  }
  
  public void visitBaseAssembly (BaseAssembly ba) {
    Core local = Client.getClient().getLocalCore();
    Iterator i = ba.componentsShar().iterator(local);
    while (i.hasNext())
      ((CompositePart) i.next()).accept(this);
  }
}

/*
** vim: ts=2 sw=2 cindent cino=\:0 et syntax=java
*/
