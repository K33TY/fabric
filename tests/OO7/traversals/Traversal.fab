package OO7.traversals;
import OO7.*;

import java.net.URI;
import fabric.client.Core;
import fabric.client.Client;
import fabric.util.Map;

/*
 * Visitor interface for DesignObjects
 */
public abstract class Traversal {
  public abstract void visitBenchmark       (Benchmark       b);
  public abstract void visitModule          (Module          m);
  public abstract void visitComplexAssembly (ComplexAssembly ca);
  public abstract void visitBaseAssembly    (BaseAssembly    ba);
  public abstract void visitAtomicPart      (AtomicPart      p);
  public abstract void visitCompositePart   (CompositePart   p);

  /** Handles loading the benchmark object and starting the traversal.  This
   *  method calls visitBenchmark(args[0]) */
  public void mainImpl(String[] args) {
    try {
      
      if (args.length < 1) {
        printUsage();
        System.exit(1);
      }
      
      URI    addr = new URI(args[0]);
      Core   core = Client.getClient().getCore(addr.getHost());
      Benchmark b = (Benchmark) ((Map) core.getRoot()).get(addr.getPath());

      long start = System.currentTimeMillis();
      this.visitBenchmark (b);
      long finish = System.currentTimeMillis();
      System.out.println("cold elapsed time: " + (finish - start) + "msec");
      
      if (args.length >= 2 && args[1].equals("--hot")) {
        start = System.currentTimeMillis(); 
        int n = 3;
        for (int i = 0; i < n; i++)
          this.visitBenchmark(b);
        finish = System.currentTimeMillis();
        
        System.out.println("hot elapsed time: " + (finish - start)/n + "msec");
      }
    } catch(Exception exc) {
      exc.printStackTrace();
      printUsage();
    }
  }

  public void printUsage() {
    System.out.println("usage: tailor " + getClass().getName() + " fab://core/benchmark [--hot]");
  }
}

/*
** vim: ts=2 sw=2 cindent cino=\:0 et syntax=java
*/
