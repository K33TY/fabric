package tree;

//import java.util.Random;
import fabric.client.AbortException;
import fabric.client.Core;
import fabric.client.Client;
import fabric.util.Map;

public class Main {
  public static void main(principal pp, String[] args) throws AbortException, SecurityException {
	Runtime[pp] runtime = Runtime[pp].getRuntime();
	PrintStream[{pp→;⊥←⊥}] out;
	
	if(runtime != null) {
		out = runtime.out();
	}
	if(out == null) return;
    if (args.length != 1 || !args[0].equals("create") && !args[0].equals("read")) {
      out.println("Usage: tree.Main [create|read]");
      return;
    }
    
    Client client = fabric.client.Client.getClient();
    Map root = (Map) client.getCore("core1").getRoot();
//    Random random = new Random();
    Tree tree;
    if (args[0].equals("create")) {
      atomic {
        Core treeCore = client.getCore("core0");
        Core nodeCore = client.getCore("core1");
        tree = new Tree@treeCore(nodeCore);
        root.put("theTree", tree);
        for (int i = 0; i < 500; i++) {
          atomic {
//            int toInsert = random.nextInt();
//            tree.insertIterative(toInsert);
            tree.insertIterative(i);
        	  
          }
        }
      }
      return;
    }

    tree = (Tree) root.get("theTree"); 

    int cycle = 0;
    while (true) {
      atomic {
        int toFind = random.nextInt();
        tree.lookup(toFind);
      }

      if (++cycle % 100 == 0)
      out.println(cycle + " lookups done.");
    }
  }
}

/*
 * * vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
 */
