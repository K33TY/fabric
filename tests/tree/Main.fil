package tree;

import java.util.Random;
import fabric.worker.AbortException;
import fabric.worker.Store;
import fabric.worker.Worker;
import fabric.util.Map;

public class Main {
  public static void main(String[] args) throws AbortException {
    if (args.length != 1 || !args[0].equals("create") && !args[0].equals("read")) {
      System.out.println("Usage: tree.Main [create|read]");
      return;
    }
    
    Worker worker = fabric.worker.Worker.getWorker();
    Map root = (Map) worker.getStore("store1").getRoot();
    Random random = new Random();
    Tree theTree = null;
    if (args[0].equals("create")) {
      atomic {
        Store treeStore = worker.getStore("store0");
        Store nodeStore = worker.getStore("store1");
        theTree = new Tree@treeStore(nodeStore);
        root.put("theTree", theTree);
        for (int i = 0; i < 500; i++) {
          atomic {
            int toInsert = random.nextInt();
            theTree.insertIterative(toInsert);
          }
        }
      }
      return;
    }

    theTree = (Tree) root.get("theTree"); 

    int cycle = 0;
    while (true) {
      atomic {
        int toFind = random.nextInt();
        theTree.lookup(toFind);
      }

      if (++cycle % 100 == 0)
      System.out.println(cycle + " lookups done.");
    }
  }
}

/*
 * * vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
 */
