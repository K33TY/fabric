package shell;

import fabric.util.Map;
import fabric.util.List;
import fabric.util.HashMap;
import fabric.util.LinkedList;
import fabric.util.Iterator;

import java.lang.Class;
import java.lang.reflect.*;
import java.io.IOException;

public class Shell {
  public static void main(String[] args) {
  }

  public Shell(Object root) {
    commands = new HashMap();
    commands.put("pwd", new Command() { public void invoke(String[] args) { pwd(args); } });
    commands.put("ls",  new Command() { public void invoke(String[] args) { ls(args);  } });
    commands.put("cd",  new Command() { public void invoke(String[] args) { cd(args);  } });
    commands.put("cat", new Command() { public void invoke(String[] args) { cat(args); } });

    setRoot(root);
  }

  public void repl() throws IOException {
    while (true) {
      System.out.append("[" + tail() + "]$ ");
      String line = "";
      int ch;
      while ((ch = System.in.read()) != '\n')
        line += (char) ch;

      String[] split = line.split(" ");
      String command = split[0];
      String[] args = new String[split.length-1];
      for (int i = 0; i < args.length; i++)
        args[i] = split[i+1];

      ((Command) commands.get(command)).invoke(args);
    }
  }

  protected Map    commands;
  protected List   path;
  protected Object root;

  static class NamedObject {
    public final String name;
    public final Object object;

    public NamedObject(String name, Object value) {
      this.name   = name;
      this.object = value;
    }
  }

  protected Object tail() {
    if (path.isEmpty())
      return root;
    else
      atomic { return ((NamedObject) path.get(path.size() - 1)).object; }
  }

  protected void setRoot(Object root) {
    this.path = new LinkedList();
    this.root = root;
  }

  public interface Command {
    void invoke(String[] args);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Commands                                                                 //
  //////////////////////////////////////////////////////////////////////////////

  public void pwd(String[] args) {
    String result = root.toString();
    Iterator i = path.iterator();
    while(i.hasNext())
      result += " -> " + ((NamedObject) i.next()).name;

    System.out.println(result);
  }

  public void ls(String[] args) {
    Class tail = tail().getClass();
    Method[] all = tail.getMethods();

    List getters = new LinkedList();
    List methods = new LinkedList();

    for (int i = 0; i < all.length; i++) {
      if (all[i].getName().startsWith("get$"))
        getters.add(all[i].getName().substring(4));

      else if (all[i].getName().contains("$"))
        continue;

      else
        methods.add(all[i].getName());
    }

    Iterator i = getters.iterator();
    while(i.hasNext())
      System.out.println(i.next());

    i = methods.iterator();
    while(i.hasNext())
      System.out.println(i.next() + "()");
  }

  public void cd(String[] args) {
    if (args[0].equals(".."))
      path.remove(path.size()-1);
    else try {
      Class tail = tail().getClass();
      Method get = tail.getMethod("get$" + args[0], new Class[] {});
      Object result = (Object) get.invoke(tail(), null);

      path.add(new NamedObject(args[0], result));
    } catch( final Exception exc ) {
      System.out.println( "Cannot cd" );
    }
  }

  public void cat(String[] args) {
    try {
      Class tail = tail().getClass();
      Method get = tail.getMethod("get$" + args[0], new Class[] {});
      java.lang.Object result = get.invoke(tail(), null);

      if (result instanceof Object) {
        Object obj = (Object) result;
        System.out.println(obj);
      }
      else
        System.out.println(result);
    } catch( final Exception exc ) {
      System.out.println( "Invalid field" );
    }
  }

  /*
  public void begin(String[] args);
  public void commit(String[] args);
  public void abort(String[] args);
  public void chroot(String[] args);
  */
}

/*
** vim: ts=2 sw=2 cindent cino=\:0 et syntax=java
*/
