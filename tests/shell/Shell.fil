package shell;

import java.util.List;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Iterator;

import java.lang.Class;
import java.lang.reflect.*;
import java.io.*;

abstract class Command extends java.lang.Object {
    abstract void invoke(String native[] args);
}


public class Shell {
    public static void main(String[] args) {
        String storeName;
        try {
            storeName = args[0];
        } catch (Throwable e) {
            System.out.println("Usage: fab --worker <worker-name> shell.Shell <store-name>");
            return;
        }
        Store store = Worker.getWorker().getStore(storeName);
        Store local = Worker.getWorker().getLocalStore();
        fabric.util.Map root = (fabric.util.Map) store.getRoot();
        Shell shellobj = null;
        atomic {
            shellobj = new Shell@local(root);
        }
        System.out.print("Welcome to the Fabric Shell on "+ storeName +"\n");
        try {
            atomic {
                shellobj.repl();
            }
        } catch (Exception e) {
            System.out.println("Exiting shell...\n");
            System.exit(1);
        }
    }

    public Shell(Object root) {
        commands = new java.util.HashMap();
        commands.put("pwd", new Command() { public void invoke(String native[] args) { pwd(args); } });
        commands.put("ls",  new Command() { public void invoke(String native[] args) { ls(args);  } });
        commands.put("cd",  new Command() { public void invoke(String native[] args) { cd(args);  } });
        commands.put("cat", new Command() { public void invoke(String native[] args) { cat(args); } });

        setRoot(root);
    }

    public void repl() throws IOException {
        while (true) {
            System.out.append("[" + tail().toString() + "]$ ");
            String line = "";
            int ch;
            while ((ch = System.in.read()) != '\n')
                line += (char) ch;

            String native[] split = line.split(" ");
            String command = split[0];
            String native[] args = new java.lang.String native[split.length-1];
            for (int i = 0; i < args.length; i++)
                args[i] = split[i+1];

            ((Command) commands.get(command)).invoke(args);
        }
    }

    protected java.util.Map    commands;
    protected java.util.List   path;
    protected fabric.lang.Object root;

    static class NamedObject {
        public final String name;
        public final Object object;

        public NamedObject(String name, Object value) {
            this.name   = name;
            this.object = value;
        }
    }

    protected Object tail() {
        Object toReturn = null;
        if (path.isEmpty())
            toReturn = root;
        else
            atomic { toReturn = ((NamedObject) path.get(path.size() - 1)).object; }
        return toReturn;
    }

    protected void setRoot(Object root) {
        this.path = new java.util.LinkedList();
        this.root = root;
    }

    //////////////////////////////////////////////////////////////////////////////
    // Commands                                                                 //
    //////////////////////////////////////////////////////////////////////////////

    public void pwd(String native[] args) {
        String result = root.toString();
        Iterator i = path.iterator();
        while(i.hasNext())
            result += " -> " + ((NamedObject) i.next()).name;

        System.out.println(result);
    }

    public void ls(String native[] args) {
        Class tail = tail().getClass();
        Method native[] all = tail.getMethods();

        List getters = new java.util.LinkedList();
        List methods = new java.util.LinkedList();

        for (int i = 0; i < all.length; i++) {
            if (all[i].getName().startsWith("get$"))
                getters.add(all[i].getName().substring(4));

            else if (all[i].getName().contains("$"))
                continue;

            else
                methods.add(all[i].getName());
        }

        Iterator i = getters.iterator();
        while(i.hasNext())
            System.out.println(i.next());

        i = methods.iterator();
        while(i.hasNext())
            System.out.println(i.next() + "()");
    }

    public void cd(String native[] args) {
        if (args[0].equals(".."))
            path.remove(path.size()-1);
        else try {
            Class tail = tail().getClass();
            Method get = tail.getMethod("get$" + args[0], new java.lang.Class native[0]);
            Object result = (Object) get.invoke(tail(), new java.lang.Object native[0]);

            path.add(new NamedObject(args[0], result));
        } catch( final Exception exc ) {
            System.out.println( "Cannot cd" );
        }
    }

    public void cat(String native[] args) {
        try {
            Class tail = tail().getClass();
            Method get = tail.getMethod("get$" + args[0], new java.lang.Class native[0]);
            java.lang.Object result = get.invoke(tail(), new java.lang.Object native[0]);

            if (result instanceof Object) {
                Object obj = (Object) result;
                System.out.println(obj);
            }
            else
                System.out.println(result);
        } catch( final Exception exc ) {
            System.out.println( "Invalid field" );
        }
    }

    /*
  public void begin(String[] args);
  public void commit(String[] args);
  public void abort(String[] args);
  public void chroot(String[] args);
     */
}

/*
 ** vim: ts=2 sw=2 cindent cino=\:0 et syntax=java
 */
