package travel;

import java.io.PrintStream;
import fabric.util.Map;
import jif.runtime.Runtime;

public class Main {
    public static void main{}(String[]{} args) {
        Store store = worker$.getStore(Config.brokerStoreName);
        Map root = null;
	if (store != null) {
	    root = (Map) store.getRoot();
	}

        if (root == null) return;

	try {
	    final Principal bank = (Principal) root.get(Config.bankPrincipalMapKey);
	    final Principal customer = (Principal) root.get(Config.customerPrincipalMapKey);
	    final Broker[bank,customer] broker =
	        (Broker[bank,customer]) root.get(Config.brokerMapKey);

	    if (broker != null) {
		atomic {
		    if (broker actsfor bank && broker actsfor broker.airline) {
			broker.coordinatePurchase();

			Runtime[broker] runtime = Runtime[broker].getRuntime();
			try {
			    PrintStream[{broker->}] out = runtime.out();
			    out.println("Purchase succeeded.");
			} catch (NullPointerException e) {
			}
		    }
		}
	    }
	    if (false) throw new PurchasingError();
	} catch (ClassCastException e) {
	} catch (PurchasingError e) {
	} catch (SecurityException e) {
	}
    }
}
