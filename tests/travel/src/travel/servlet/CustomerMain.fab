package travel.servlet;

import travel.Config;
import fabric.util.Map;
import sif.servlet.Servlet;
import sif.servlet.Request;
import sif.servlet.SessionState;
import sif.servlet.SessionPrincipal;

import javax.servlet.ServletException;

public final class CustomerMain extends Servlet[CustomerPrincipal] {
  final Store{this} localStore;
  
  public CustomerMain() throws ServletException {
    FabricWorker cl = FabricWorker.getWorker();
    Store lStore = null;
    AbstractPrincipal customerPrincipal = null;
    if (cl != null) {
      lStore = cl.getLocalStore();
    }
    localStore = lStore;
  }
    
  public void initialize{CustomerPrincipal:;CustomerPrincipal!:}()
      throws ServletException {
//    addStartAction(new StartAction(this));
  }

  public String getPrivateHostID() throws ServletException {
    return "";
  }

  protected String defaultActionName(Request[CustomerPrincipal] req) {
    return "greet";
  }
  
  // This method will only be called by the runtime
  protected SessionState[lbl]{*lbl} createSessionState{*lbl}(label{*lbl} lbl,
      String{*lbl} id, SessionPrincipal{*lbl} session) {
    SessionState[lbl] toReturn = null;
    atomic {
      if (localStore != null && localStore equiv worker$ &&
	  lbl <= new label {⊤→worker$} && new label {⊤←worker$} <= lbl) {
	toReturn = new SessionState[lbl]@localStore(id, session);
      }
    }
    return toReturn;
  }
  
  // This method will only be called by the runtime
  protected SessionPrincipal createSessionPrincipal(String{worker$→;worker$←} id) {
    SessionPrincipal toReturn = null;
    atomic {
      if (localStore != null && localStore equiv worker$) {
	toReturn = new SessionPrincipal@localStore(id);
      }
    }
    return toReturn;
  }
  
  
}

