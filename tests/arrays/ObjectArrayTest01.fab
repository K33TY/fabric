package arrays;

import java.text.DecimalFormat;
import java.text.NumberFormat;

import fabric.client.Core;
import fabric.client.Client;
import fabric.lang.arrays.internal.ObjectArray;

public class ObjectArrayTest01 {
    char c;
    public ObjectArrayTest01(char c) {
        this.c = c;
    }

    public static void main(String[] args) {
        /** Parameters:
         * 1. size 1 of array
         * 2. size 2 of array (for measure resize time)
         * 3. number of outer reps
         * 4. number of inner reps
         * 5. "true" if a batch output format is desired
         */
        int SIZE1;
        int SIZE2;
        int MAX_COUNT;
        int ITER_REPS;
        boolean isBatchOutput;

        if(args.length < 5) {
            System.out.println("I need 5 arguments - size1, size2, maxCount, iterReps, isBatchOutput");
            return;
        }

        SIZE1 = Integer.parseInt(args[0]);
        SIZE2 = Integer.parseInt(args[1]);
        MAX_COUNT = Integer.parseInt(args[2]);
        ITER_REPS = Integer.parseInt(args[3]);
        isBatchOutput = args[4].equals("true")?true:false;


        Core core = fabric.client.Client.getClient().getCore("core0");        
        long startTime, startInitialize, startReadIteration, startWriteIteration, startResize, endTime;
        float creation=0, initialization=0, reading=0, replacing=0, resizing=0;

        ObjectArrayTest01 element1;
        ObjectArrayTest01 element2;
	atomic {
	  element1 = new ObjectArrayTest01@core('f');
	  element2 = new ObjectArrayTest01@core('o'); 
	}

        int percentage = 0;
        int step = 5;

        if(args.length > 5) { 
            System.out.println("Starting test in 3 seconds");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                System.out.println("Don't mess with me, buddy!");
                return;
            }
        }

        long startTest = System.currentTimeMillis();
        atomic {
            for(int count = 0; count < MAX_COUNT; count++) {

                // create array
                startTime = System.currentTimeMillis();
                ObjectArray testArray;
                testArray = new ObjectArray@core(ObjectArrayTest01.class, SIZE1);

                // initialize array with element 1
                startInitialize = System.currentTimeMillis();
                for(int i = 0; i < SIZE1; i++) {
                    testArray.set(i, element1);
                }


                // read entire array multiple times
                startReadIteration = System.currentTimeMillis();
                for(int j = 0; j < ITER_REPS; j++)
                    for(int i = 0; i < SIZE1; i++) {
//                      ObjectArrayTest01 element = (ObjectArrayTest01)testArray.get(i);
                        testArray.get(i);                        
                    }

                // replace all elements of the array multiple times
                startWriteIteration = System.currentTimeMillis();
                for(int j = 0; j < ITER_REPS; j++)
                    for(int i = 0; i < SIZE1; i++) {
                        testArray.set(i, element2);
                    }

                // resize array
                startResize = System.currentTimeMillis();
//              ObjectArray testArrayNew = new ObjectArray@core(ObjectArrayTest01.class, SIZE2);
//              for(int i = 0; i < SIZE1; i++) {
//              testArrayNew.set(i, testArray.get(i));
//              }
//              testArray = testArrayNew;

                // end time
                endTime = System.currentTimeMillis();

                // bookkeeping
                creation += startInitialize - startTime;
                initialization += startReadIteration - startInitialize;
                reading += startWriteIteration - startReadIteration;
                replacing += startResize - startWriteIteration;
                resizing += endTime - startResize;

                // show progress
                if(!isBatchOutput && count == (percentage * MAX_COUNT)/100) {
                    System.out.print(percentage + "%");
                    long timeNow = System.currentTimeMillis() - startTest;
                    if(percentage > 0) {
                        long estimatedEnd = (timeNow*100)/percentage;
                        System.out.println("(" + timeNow + "ms/" + estimatedEnd + "ms)");
                    } else {
                        System.out.println();
                    }
                    percentage += step;
                }

            }
        }
        if(!isBatchOutput) System.out.println("100%Completed");

        creation = creation * 1000 / MAX_COUNT;
        initialization = initialization * 1000 / MAX_COUNT;
        float initializationPer = initialization/SIZE1;
        reading = reading * 1000 / (MAX_COUNT*ITER_REPS);
        float readingPer = reading/SIZE1;
        replacing = replacing * 1000 / (MAX_COUNT*ITER_REPS);
        float replacingPer = replacing/SIZE1;
        resizing = resizing * 1000 / MAX_COUNT;

        NumberFormat formatter = new DecimalFormat("#0.0000");

        if(!isBatchOutput) {
            System.out.println("\nArray Creation: " + formatter.format(creation)
                + "us\nArray Initialization: " + formatter.format(initialization)
                + "us (" + formatter.format(initializationPer) 
                + "us)\nReading Elements: " + formatter.format(reading)
                + "us (" + formatter.format(readingPer) 
                + "us)\nReplacing Elements: " + formatter.format(replacing)
                + "us (" + formatter.format(replacingPer)
                + "us)\nResizing Array: " + formatter.format(resizing) + "us"); 
        } else {
            System.out.println("0 " + args[0] + " " + args[1] + " " + args[2] + " " + args[3] + " " + args[4] +
                " objectarray " + creation + " " + formatter.format(initialization)
                + " " + formatter.format(initializationPer) 
                + " " + formatter.format(reading)
                + " " + formatter.format(readingPer) 
                + " " + formatter.format(replacing) + " " + formatter.format(replacingPer)
                + " " + formatter.format(resizing));
        }
    }
}
