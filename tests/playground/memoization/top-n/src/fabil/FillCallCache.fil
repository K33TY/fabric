import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadFactory;

/**
 * Preheats the store's call cache for testing.
 */
public class FillCallCache {
  public static String USAGE =
"USAGE: FillCallCache N\n" +
"\n" +
"       Runs a worker thread for the top n test to preheat the call cache of\n" +
"       the store using a call to top 'N'.";

  public static void main(String[] args) {
    if (args.length != 1) {
      System.err.println(USAGE);
      System.exit(1);
    }

    Tester t = null;
    Config c = null;
    int topCount = 0;
    atomic {
      topCount = Integer.parseInt(args[0]);
      t = (Tester) Config.STORE.getRoot().get("tester");
      c = (Config) Config.STORE.getRoot().get("config");
    }

    atomic {
      t.topAccounts(topCount, c.NUM_USERS);
    }
  }
}
