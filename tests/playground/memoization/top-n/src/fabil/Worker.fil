import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * Entry point for basic worker.
 */
public class Worker {
  public static String USAGE =
"USAGE: Worker N SEED WRITE NOOP START_FREQ FREQ_DELTA STEP_INTERVAL\n" +
"\n" +
"       Runs a worker thread for the top N test with the random seed SEED, \n" +
"       WRITE as the ratio of write operations (of non-noops), and NOOP as\n" +
"       the ratio of intervals that should be noops.  The frequency of\n" +
"       operations starts out at START_FREQ Hz and is increased by\n" +
"       FREQ_DELTA Hz every STEP_INTERVAL milliseconds.";

  private static ExecutorService threadPool = Executors.newCachedThreadPool(
      new ThreadFactory() {
        public Thread newThread(Runnable r) {
          return new Thread(r);
        }
      }
  );

  public static boolean spawnNewThread(final Tester t, final Random rand,
      final double writeRatio, final int topCount) {
    Runnable r = null;
    atomic {
      r = new Runnable() {
        public void run() {
          try {
            t.randomOperation(rand, writeRatio, topCount);
          } catch (Throwable t) {
            Logger HOTOS_LOGGER = Logger.getLogger("HOTOS");
            HOTOS_LOGGER.log(Level.SEVERE, t.toString());
            HOTOS_LOGGER.log(Level.SEVERE, t.getMessage());
            t.printStackTrace();
          }
        }
      };
    }
    threadPool.submit(r);
    return true;
  }

  public static void main(String[] args) {
    if (args.length != 7) {
      System.err.println(USAGE);
      System.exit(1);
    }

    Tester t = null;
    Config c = null;
    int topCount = 0;
    Random rand = null;
    double writeRatio = 0;
    double noopRatio = 0;
    double arrivalRate = 0;
    double arrivalDelta = 0;
    int incrInterval = 0;
    atomic {
      topCount = Integer.parseInt(args[0]);
      rand = new Random(Long.parseLong(args[1]));
      writeRatio = Double.parseDouble(args[2]);
      noopRatio = Double.parseDouble(args[3]);
      arrivalRate = Double.parseDouble(args[4]);
      arrivalDelta = Double.parseDouble(args[5]);
      incrInterval = Integer.parseInt(args[6]);
      t = (Tester) Config.STORE.getRoot().get("tester");
      c = (Config) Config.STORE.getRoot().get("config");
    }

    long now = System.currentTimeMillis();
    long nextArrvIncrTime = System.currentTimeMillis() + incrInterval;
    long nextSpawnTime = System.currentTimeMillis();
    long nextEventTime = nextSpawnTime < nextArrvIncrTime
      ? nextSpawnTime : nextArrvIncrTime;

    while (true) {
      now = System.currentTimeMillis();
      // If it's time to increase the arrival rate, do that.
      if (now >= nextArrvIncrTime) {
        arrivalRate += arrivalDelta;
        nextArrvIncrTime = now + incrInterval;
      }
      // If it's time to spawn a new operation, do that.
      if (now >= nextSpawnTime) {
        if (rand.nextDouble() >= noopRatio) {
          spawnNewThread(t, rand, writeRatio, topCount);
        }
        nextSpawnTime = now + getArrivalInterval(arrivalRate, rand);
      }
      // Wait until next change.
      nextEventTime = nextSpawnTime < nextArrvIncrTime ? nextSpawnTime :
        nextArrvIncrTime;
      long sleepTime = nextEventTime - System.currentTimeMillis();
      if (sleepTime > 0) {
        try {
          Thread.sleep(sleepTime);
        } catch (InterruptedException e) {
          System.exit(1);
        }
      }
    }
  }

  public static long getArrivalInterval(double arrivalRate, Random rand) {
    return Math.round(-1000.0d * Math.log(rand.nextDouble()) / arrivalRate);
  }
}
