import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * Entry point for basic worker.
 */
public class Worker {
  public static String USAGE =
"USAGE: Worker SEED WRITE N\n" +
"\n" +
"       Runs a worker thread for the top n test with the random seed SEED, \n" +
"       write ratio WRITE, and N items grabbed for the top count.";

  //public static Semaphore sem = new Semaphore(10);

  private static ExecutorService threadPool = Executors.newCachedThreadPool(
      new ThreadFactory() {
        public Thread newThread(Runnable r) {
          return new Thread(r);
        }
      }
  );

  public static boolean spawnNewThread(final Tester t, final Random rand,
      final double writeRatio, final int topCount) {
    Runnable r = null;
    atomic {
      r = new Runnable() {
        public void run() {
          try {
            t.randomOperation(rand, writeRatio, topCount);
          } catch (Throwable t) {
            Logger HOTOS_LOGGER = Logger.getLogger("HOTOS");
            HOTOS_LOGGER.log(Level.SEVERE, t.toString());
            HOTOS_LOGGER.log(Level.SEVERE, t.getMessage());
            t.printStackTrace();
          //} finally {
            //sem.release();
          }
        }
      };
    }
    threadPool.submit(r);
    return true;
  }

  public static void main(String[] args) {
    if (args.length != 3) {
      System.err.println(USAGE);
      System.exit(1);
    }

    Tester t = null;
    Config c = null;
    Random rand = null;
    double writeRatio = 0;
    int topCount = 0;
    atomic {
      rand = new Random(Long.parseLong(args[0]));
      writeRatio = Double.parseDouble(args[1]);
      topCount = Integer.parseInt(args[2]);
      t = (Tester) Config.STORE.getRoot().get("tester");
      c = (Config) Config.STORE.getRoot().get("config");
    }

    long now = System.currentTimeMillis();
    double arrivalRate = c.ARRIVAL_RATE;
    long nextArrvIncrTime = System.currentTimeMillis() + c.INCR_INTERVAL_MS;
    long nextSpawnTime = System.currentTimeMillis();
    long nextEventTime = nextSpawnTime > nextArrvIncrTime
      ? nextSpawnTime : nextArrvIncrTime;

    while (true) {
      now = System.currentTimeMillis();
      // If it's time to increase the arrival rate, do that.
      if (now >= nextArrvIncrTime) {
        arrivalRate += c.ARRIVAL_INCR;
      }
      // If it's time to spawn a new operation, do that.
      if (now >= nextSpawnTime) {
        spawnNewThread(t, rand, writeRatio, topCount);
        nextSpawnTime = now + getArrivalInterval(c.ARRIVAL_RATE, rand);
      }
      // Wait until next change.
      nextEventTime = nextSpawnTime > nextArrvIncrTime ? nextSpawnTime :
        nextArrvIncrTime;
      long sleepTime = nextEventTime - System.currentTimeMillis();
      if (sleepTime >= 0) {
        try {
          Thread.sleep(sleepTime);
        } catch (InterruptedException e) {
          System.exit(1);
        }
      }
    }
  }

  public static long getArrivalInterval(double arrivalRate, Random rand) {
    return Math.round(-1000.0d * Math.log(rand.nextDouble()) / arrivalRate);
  }
}
