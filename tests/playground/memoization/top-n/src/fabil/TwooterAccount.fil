import fabric.util.List;
import fabric.util.ArrayList;
import java.util.Random;
import java.util.logging.Logger;
import java.util.logging.Level;

public class TwooterAccount {

  public final String name;

  private final List/*<TwooterAccount>*/ followers;

  public TwooterAccount(String name) {
    Store s = Config.STORE;
    this.name = name;
    this.followers = new ArrayList@s().fabric$util$ArrayList$();
  }

  public TwooterAccount(String name, List followers) {
    this.name = name;
    this.followers = followers;
  }

  public TwooterAccount TwooterAccount$() {
    fabric$lang$Object$();
    return this;
  }

  public int numFollowers() {
    return followers.size();
  }

  public void addRandomFollower(Random rand, long id) {
    atomic {
      Logger HOTOS_LOGGER = Logger.getLogger("HOTOS");
      while (true) {
        TwooterAccount candidate = getRandomTwooterAccount(rand);
        if (candidate == this) continue;
        if (!followers.contains(candidate)) {
          HOTOS_LOGGER.log(Level.INFO, "===adding " + candidate.name + " to " +
              name + " in {0}===", String.valueOf(id));
          followers.add(candidate);
          return;
        }
      }
    }
  }

  public void removeRandomFollower(Random rand, long id) {
    atomic {
      Logger HOTOS_LOGGER = Logger.getLogger("HOTOS");
      if (followers.size() == 0) return;
      TwooterAccount removed = (TwooterAccount)
        followers.remove(rand.nextInt(followers.size()));
      HOTOS_LOGGER.log(Level.INFO, "===removing " + removed.name + " from " +
          name + " in {0}===", String.valueOf(id));
    }
  }

  /**
   * Return a random TwooterAccount using a uniform distribution.
   */
  public static TwooterAccount getRandomTwooterAccount(Random rand) {
    atomic {
      Config c = (Config) Config.STORE.getRoot().get("config");
      return (TwooterAccount) Config.STORE.getRoot().get(
          new Integer(rand.nextInt(c.NUM_USERS)));
    }
  }

  /**
   * Randomly either add or remove a follower.
   */
  public void randomlyUpdateFollowers(Random rand, long id) {
    atomic {
      int choice = rand.nextInt(2);
      if (choice == 0) {
        addRandomFollower(rand, id);
      } else {
        removeRandomFollower(rand, id);
      }
    }
  }
}
