import fabric.util.Set;
import fabric.util.HashSet;
import java.util.Random;

public class TwooterAccount {

  public final String name;

  private final Set/*<TwooterAccount>*/ followers;

  public TwooterAccount(String name) {
    Store s = Config.STORE;
    this.name = name;
    this.followers = new HashSet@s().fabric$util$HashSet$();
  }

  public TwooterAccount(String name, Set followers) {
    this.name = name;
    this.followers = followers;
  }

  public TwooterAccount TwooterAccount$() {
    fabric$lang$Object$();
    return this;
  }

  public int numFollowers() {
    return followers.size();
  }

  public void addRandomFollower() {
    atomic {
      while (true) {
        TwooterAccount candidate = getRandomTwooterAccount();
        if (candidate == this) continue;
        if (!followers.contains(candidate)) {
          followers.add(candidate);
          return;
        }
      }
    }
  }

  public void removeRandomFollower() {
    atomic {
      followers.remove(getRandomFollower());
    }
  }

  /**
   * Return a random TwooterAccount using a uniform distribution.
   */
  public static TwooterAccount getRandomTwooterAccount() {
    atomic {
      Config c = (Config) Config.STORE.getRoot().get("config");
      return (TwooterAccount) Config.STORE.getRoot().get(
          new Integer(c.RAND.nextInt(c.NUM_USERS)));
    }
  }

  /**
   * Return a random follower using a uniform distribution.
   */
  public TwooterAccount getRandomFollower() {
    atomic {
      Config c = (Config) Config.STORE.getRoot().get("config");
      return (TwooterAccount)
        followers.toArray()[c.RAND.nextInt(followers.size())];
    }
  }

  /**
   * Randomly either add or remove a follower.
   */
  public void randomlyUpdateFollowers() {
    atomic {
      Config c = (Config) Config.STORE.getRoot().get("config");
      int choice = c.RAND.nextInt(2);
      if (choice == 0)
        addRandomFollower();
      else 
        removeRandomFollower();
    }
  }
}
