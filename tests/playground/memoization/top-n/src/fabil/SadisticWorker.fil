import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * Entry point for sadistic worker.
 */
public class SadisticWorker {
  public static String USAGE =
"USAGE: SadisticWorker SEED INTERVAL";

  private static ExecutorService threadPool = Executors.newCachedThreadPool(
      new ThreadFactory() {
        public Thread newThread(Runnable r) {
          return new Thread(r);
        }
      }
  );

  public static boolean spawnNewThread(final Tester t, final Random rand) {
    Runnable r = null;
    atomic {
      r = new Runnable() {
        public void run() {
          try {
            t.worstCase(rand);
          } catch (Throwable t) {
            Logger HOTOS_LOGGER = Logger.getLogger("HOTOS");
            HOTOS_LOGGER.log(Level.SEVERE, t.toString());
            HOTOS_LOGGER.log(Level.SEVERE, t.getMessage());
            t.printStackTrace();
          }
        }
      };
    }
    threadPool.submit(r);
    return true;
  }

  public static void main(String[] args) {
    if (args.length != 2) {
      System.err.println(USAGE);
      System.exit(1);
    }

    Tester t = null;
    Config c = null;
    Random rand = null;
    long arrivalInterval = 0;
    atomic {
      rand = new Random(Long.parseLong(args[0]));
      arrivalInterval = Long.parseLong(args[1]);
      t = (Tester) Config.STORE.getRoot().get("tester");
      c = (Config) Config.STORE.getRoot().get("config");
    }

    long nextSpawnTime = System.currentTimeMillis() + arrivalInterval;
    while (true) {
      long now = System.currentTimeMillis();
      if (now >= nextSpawnTime) {
        spawnNewThread(t, rand);
        nextSpawnTime = now + arrivalInterval;
      }
      long sleepTime = nextSpawnTime - System.currentTimeMillis();
      if (sleepTime > 0) {
        try {
          Thread.sleep(sleepTime);
        } catch (InterruptedException e) {
          System.exit(1);
        }
      }
    }
  }

  public static long getArrivalInterval(double arrivalRate, Random rand) {
    return Math.round(-1000.0d * Math.log(rand.nextDouble()) / arrivalRate);
  }
}
