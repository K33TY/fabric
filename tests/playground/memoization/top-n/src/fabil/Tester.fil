import fabric.util.LinkedList;
import fabric.util.List;
import java.io.IOException;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.Random;

public class Tester {
  public Tester() {
  }

  public Tester Tester$() {
    fabric$lang$Object$();
    return this;
  }

  private void printList(List a) {
    System.out.print("[");
    for (int i = 0; i < a.size(); i++) {
      System.out.print(" " + a.get(i) + " ");
    }
    System.out.print("]");
  }

  private List merge(int n, List a_orig, List b_orig) {
    Store s = Config.STORE;
    List merged = new LinkedList().fabric$util$LinkedList$();
    List a = new LinkedList().fabric$util$LinkedList$(a_orig);
    List b = new LinkedList().fabric$util$LinkedList$(b_orig);
    for (int i = 0; i < n; i++) {
      if (a.isEmpty() && b.isEmpty()) {
        break;
      } else if (a.isEmpty()
          || (!b.isEmpty()
            && (compare((TwooterAccount) a.get(0),
                        (TwooterAccount) b.get(0)) < 0))) {
        merged.add(b.get(0));
        b.remove(0);
      } else {
        merged.add(a.get(0));
        a.remove(0);
      }
    }
    return merged;
  }

  private memoized int compare(TwooterAccount a, TwooterAccount b) {
    int aCount = a.numFollowers();
    int bCount = b.numFollowers();
    if (aCount < bCount) return -1;
    if (aCount > bCount) return 1;
    return 0;
  }

  private memoized List topAccountsBetween(int n, int min, int max) {
    Store s = Config.STORE;
    List rtn = new LinkedList@s().fabric$util$LinkedList$(); 
    if (max - min <= n) {
      for (int i = min; i < max; i++) {
        TwooterAccount foo = (TwooterAccount) s.getRoot().get(new Integer(i));
        int j = 0;
        for (j = 0; j < rtn.size(); j++)
          if (((TwooterAccount) rtn.get(j)).numFollowers() < foo.numFollowers())
            break;
        rtn.add(j, foo);
      }
    } else if (max > min) {
      rtn.addAll(merge(n, topAccountsBetween(n, min, min + ((max - min) >> 1)),
            topAccountsBetween(n, min + ((max - min) >> 1), max)));
    }
    return rtn;
  }

  public List topAccounts(int n, int total) {
    return topAccountsBetween(n, 0, total);
  }

  public memoized int foo(int n) {
    return 1;
  }

  public void randomOperation(Random rand) {
    long id = rand.nextLong();
    Logger HOTOS_LOGGER = Logger.getLogger("HOTOS");
    HOTOS_LOGGER.log(Level.INFO, "===started {0}===", String.valueOf(id));
    atomic {
      Config c = (Config) Config.STORE.getRoot().get("config");
      double choice = rand.nextDouble();
      if (choice <= c.WRITE_RATIO) {
        HOTOS_LOGGER.log(Level.INFO, "===write {0}===", String.valueOf(id));
        TwooterAccount.getRandomTwooterAccount(rand).randomlyUpdateFollowers(rand);
      } else {
        HOTOS_LOGGER.log(Level.INFO, "===read {0}===", String.valueOf(id));
        topAccounts(c.TOP_COUNT, c.NUM_USERS);
      }
    }
    HOTOS_LOGGER.log(Level.INFO, "===committed {0}===", String.valueOf(id));
  }
}
