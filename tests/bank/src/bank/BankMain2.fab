package bank;
import fabricated.util.LinkedList;

public class BankMain2 {
	private final principal{bankTop->;bankTop<-} bankTop;
	private final Core{bankTop->;bankTop<-} bankCore;
	private LinkedList[{bankTop->;bankTop<-}]{bankTop->;bankTop<-} customers;
	
	//trusted merchant's principal
//	private principal {bankTop:;bankTop←} brokerPcp;

	//bank customers' principals
	

	//private final Core {bankTop:;bankTop←} nodeLocation;

//	public static void main{*←} (String{*←}[]{*←} args) {
//		BankMain bank_ = null;
//		atomic {
//			bank_ = new BankMain();
//		}

////		m_.begin();
//	}


	public BankMain2 () {
		bankCore = client$.getLocalCore();
		bankTop = bankCore;
		customers = new LinkedList();
	}

//	public void login(String username, String password) {
//		try {
//			if(userPcp.authenticate(username, password)) {
//				return;
//			}
//		} catch (NullPointerException e) {
//		}
//	}
	
	public void createAcct{bankTop->;bankTop<-} (principal u) {
//		BankAcct{bankTop->;bankTop<-} b = null;
		if(bankTop actsfor BankEP && bankTop actsfor UserEP && bankCore equiv bankTop) {
			BankAcct b = new BankAcct[{bankTop->;bankTop<-}]@bankCore();

//			BankAcct b = new BankAcct@bankCore();
			try {
				customers.add(b);
	//		} catch (ArrayIndexOutOfBoundsException e) { }
			} catch (NullPointerException e) { }

		}
	}


//	public void setBroker {bankTop:;bankTop←} (principal {bankTop:;bankTop←} M) {
//		brokerPcp = M;		
//	}

//	public static BankClient[bankTop]{cp:;cp←} requestClient{cp:;cp←} (principal cp)
//	where authority(bankTop), caller(cp), endorse({cp:;cp←; bankTop←}) {
//		
//		return new BankClient[bankTop]();
//	}

	public boolean{bankTop->;bankTop←} transferFunds{bankTop->;bankTop←} (int{bankTop->;bankTop←} amt)
	where bankTop equiv BankEP, bankTop actsfor UserEP {
		try {
			BankAcct[{bankTop->;bankTop←}] acct1 = (BankAcct)customers.get(0);
			BankAcct[{bankTop->;bankTop←}] acct2 = (BankAcct)customers.get(1);
			
			
			//if(bankTop equiv BankEP && bankTop actsfor UserEP) {
				if (acct1.getBalance() <= amt) {
					atomic {
						acct1.debit(amt);
//						acct2.credit(amt);
					}
//					return true;	
				}
			//}
		} catch (ClassCastException e){
		} catch (IndexOutOfBoundsException e) {
		} catch (NullPointerException e) {
		}
		
		return false;
	}
}
