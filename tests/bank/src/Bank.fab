import fabricated.util.List;
import fabricated.util.LinkedList;

/**
 * A Bank holds a collection of accounts, and has methods for accessing those accounts.
 */
public class Bank[principal owner] {
  private final List[{owner<-;owner->}] {owner<-;owner->} accounts;
  private final Core                    {owner<-;owner->} location;

  /**
   * create a new bank at the given location
   */
  public Bank{owner<-;owner->} (Core {owner<-;owner->} location)
    where location actsfor owner {
    this.location = location;
    this.accounts = new LinkedList[{owner<-;owner->}]@location();
  }

  /**
   * create and return a new Account, owned by user
   */
  public Account[userActual,owner] createAccount{userActual} (principal{owner<-} userActual) {
    Account[userActual, owner] result = null;
    try {
      result = new Account[userActual, owner]();
      AccountWrapper[owner] foo = new AccountWrapper[owner](userActual, result);
      accounts.add(foo);
    } catch(ClassCastException exc) {
    } catch(IllegalArgumentException exc) {
    } catch(NullPointerException exc) {
    }

    return result;
  }
}

/*
** vim: ts=2 sw=2 et cindent cino=\:0
*/
