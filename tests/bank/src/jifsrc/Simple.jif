class Balance[principal bank, principal user] { // on Bank store
    int{bank<-; bank->user} value = 0;

    int{bank<-; bank->user} debit{bank<-}(int{bank<-; bank->user} amt) {
        if (amt <= value & value > 0 & amt > 0) {
            value -= amt;
        }
        return value;
    }
    int{bank<-; bank->user} credit{bank<-}(int{bank<-; bank->user} amt) {
        if (amt > 0) {
            value += amt;
        }
        return value;
    }
}

class Account[principal bank] { // on Bank store
    final principal{bank<-} user;
    final Balance[bank,user] {bank<-} balance;

    Account(principal{bank<-} user_) {
        user = user_;
        balance = new Balance();
    }
    int{bank<-; bank->user} debit{bank<-}(int{bank<-; bank->user} amt) {
        try { balance.debit(amt); return balance.value; } catch (NullPointerException e) { return 0; }
    }
    int{bank<-; bank->user} credit{bank<-}(int{bank<-; bank->user} amt) {
        try { balance.credit(amt); return balance.value; } catch (NullPointerException e) { return 0; }
    }

}

class Tickets[principal bank, principal airline, principal user] { // on Airline store
    int {airline<-bank; airline->user} num_tickets;
    Tickets{airline<-}() {
        num_tickets = 0;
    }
}

class Airline {
    final principal{airline<-} bank;
    final principal{airline<-} user;
    final principal{airline<-} airline;

    final Tickets[bank, airline, user]{airline<-} tickets;

    Airline{airline_<-}(principal{airline_<-} bank_,
		       principal{airline_<-} user_,
		       principal{airline_<-} airline_) {
	airline = airline_;
	user = user_;
	bank = bank_;
	tickets = new Tickets[bank, airline, user]();
    }
}

class Broker[principal bank, principal customer] extends AbstractPrincipal {
    final Account[bank]{this←} customerAcct;
    final Account[bank]{this←} airlineAcct;
    final principal airline;
    final Tickets[bank, airline, customer]{this←} custTickets;

    void doit{this<-}()
        where this actsfor bank
    {
      try {
        final principal cust1 = customerAcct.user;
        final principal cust2 = customer;
        final principal airline_ = airlineAcct.user;
        if (this actsfor cust1 & this actsfor cust2 & this actsfor airline &
	    this actsfor airline_) {
            customerAcct.debit(1000);   // @wBank
            airlineAcct.credit(1000);   // @wBank
            custTickets.num_tickets++;  // @wAirline
        }
      } catch (NullPointerException e) {}

    }

    Broker{this<-}(Account[bank]{this←} aa, Account[bank]{this←} ab, Tickets[bank, airline_, customer]{this←} ta, principal{bank<-} airline_) {
        customerAcct = aa;
        airlineAcct = ab;
        custTickets = ta;
	airline = airline_;
        super("broker");
    }
}

class Main {

    public void main{*<-}() {
        final principal a=null, b=null;
        final principal bank=null;
	final principal airline = null;
        Account accountA = new Account(a); // @ storeA (storeB?)
        accountA.credit(10000);

        Account accountB = new Account(b); // @ storeB
        Tickets custTickets = new Tickets(); // @ storeA

        final Broker broker = new Broker(accountA, accountB, custTickets, airline);

        if (broker actsfor bank) {
            broker.doit();
        }
    }
}
