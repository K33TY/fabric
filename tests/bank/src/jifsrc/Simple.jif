class Balance[principal bank, principal user] {
    int{bank<-; bank->user} value = 0;

    int{bank<-; bank->user} debit{bank<-}(int{bank<-; bank->user} amt) {
        if (amt <= value & value > 0 & amt > 0) {
            value -= amt;
        }
        return value;
    }
    int{bank<-; bank->user} credit{bank<-}(int{bank<-; bank->user} amt) {
        if (amt > 0) {
            value += amt;
        }
        return value;
    }
}

class Account[principal bank] {
    final principal{bank<-} user;
    final Balance[bank,user] {bank<-} balance;

    Account(principal{bank<-} user_) {
        user = user_;
        balance = new Balance();
    }
    int{bank<-; bank->user} debit{bank<-}(int{bank<-; bank->user} amt) {
        try { balance.debit(amt); return balance.value; } catch (NullPointerException e) { return 0; }
    }
    int{bank<-; bank->user} credit{bank<-}(int{bank<-; bank->user} amt) {
        try { balance.credit(amt); return balance.value; } catch (NullPointerException e) { return 0; }
    }

}

class Tickets[principal bank, principal airline] {
    int{bank<-airline} num_tickets;
    final principal{bank<-} user;
    Tickets{bank<-}(principal{bank<-} user_) {
        user = user_;
        num_tickets = 0;
    }
}

class Airline[principal bank] {
    final principal{bank<-} user;
    final principal{bank<-} airline;
    Tickets[bank, airline]{bank<-} tickets;
    Airline{bank<-}(principal{bank<-} user_, principal{bank<-} airline_) {
	user = user_;
	airline = airline_;
	tickets = new Tickets[bank, airline](user_);
    }
}

class Broker[principal bank] extends AbstractPrincipal {
    final Account[bank]{this←} accountA;
    final Account[bank]{this←} accountB;
    final principal airline;
    final Tickets[bank, airline]{this←} ticketsA;

    void doit{this<-}()
        where this actsfor bank
    {
      try {
        final principal A = accountA.user;
        final principal A2 = ticketsA.user;
        final principal B = accountB.user;
        if (this actsfor A & this actsfor B & this actsfor A2) {
            accountA.debit(1000); // @ wA (@wB?)
            accountB.credit(1000); // @ wB
            ticketsA.num_tickets++;  // @wA
        }
      } catch (NullPointerException e) {}

    }

    Broker{this<-}(Account[bank]{this←} aa, Account[bank]{this←} ab, Tickets[bank, airline_]{this←} ta, principal{bank<-} airline_) {
        accountA = aa;
        accountB = ab;
        ticketsA = ta;
	airline = airline_;
        super("broker");
    }
}

class Main {

    public void main{*<-}() {
        final principal a=null, b=null;
        final principal bank=null;
	final principal airline = null;
        Account accountA = new Account(a); // @ storeA (storeB?)
        accountA.credit(10000);

        Account accountB = new Account(b); // @ storeB
        Tickets ticketsA = new Tickets(a); // @ storeA

        final Broker broker = new Broker(accountA, accountB, ticketsA, airline);

        if (broker actsfor bank) {
            broker.doit();
        }
    }
}
