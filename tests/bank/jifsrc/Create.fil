public class Create {

    /**
     * create the setup for the OO7 test:
     *
     * brokerCore (args[0])
     * ==========
     * broker: Broker[bank,customer]
     *  label        -> brokerLabel
     *  bank         -> bank
     *  customer     -> customer
     *  customerAcct -> customerAccount
     *  airlineAcct  -> airlineAccount
     *  airline      -> airline
     *  custTickets  -> tickets
     *
     * bank: DelegatingPrincipal
     *  label       -> brokerLabel
     *  delegatesTo -> broker
     *
     * customer: DelegatingPrincipal
     *  label       -> brokerLabel
     *  delegatesTo -> broker
     *
     * airline: DelegatingPrincipal
     *  label       -> brokerLabel
     *  delegatesTo -> broker
     *  
     * brokerLabel: Label
     *  {broker<-}
     *
     * bankCore (args[1])
     * ========
     * airlineBalance: Balance[bank,airline]
     *  label   -> airlineLabel
     *  bank    -> bank
     *  user    -> airline
     *  value   -> 0
     *
     * airlineAccount: Account[bank]
     *  label   -> {bank<-}
     *  bank    -> bank
     *  balance -> airlineBalance
     * 
     * airlineLabel: Label
     *  {bank<-; bank->airline}
     *
     * customerBalance: Balance[bank,customer]
     *  label   -> customerLabel
     *  bank    -> bank
     *  user    -> customer
     *  value   -> 0
     *
     * customerAccount: Account[bank]
     *  label   -> {bank<-}
     *  bank    -> bank
     *  user    -> customer
     *  balance -> customerBalance
     *
     * customerLabel: Label
     *  {bank<-; bank->customer}
     *  
     * airlineCore (args[2])
     * ===========
     * tickets: Tickets[bank,airline,user]
     *  label   -> ticketsLabel
     *  bank    -> bank
     *  airline -> airline
     *  user    -> user
     *  airline -> airline
     *  count   -> 0
     *
     * ticketsLabel: Label
     *  {bank<-airline}
     */
    public static void main(String[] args) {
        atomic {
            Core  brokerCore = Client.getClient().getCore(args[0]);
            Core    bankCore = Client.getClient().getCore(args[1]);
            Core airlineCore = Client.getClient().getCore(args[2]);

            IntPolicy  brokerTrusted  = LabelUtil.writerPolicy(brokerCore,  broker, broker);   // {broker<-}
            IntPolicy  bankTrusted    = LabelUtil.writerPolicy(brokerCore,  bank,   bank);     // {bank<-}
            IntPolicy  airlineTrusted = LabelUtil.writerPolicy(airlineCore, bank,   airline);  // {bank<-airline} 
            ConfPolciy airlineSecret  = LabelUtil.readerPolicy(bankCore,    bank,   airline);  // {bank->airline}
            ConfPolicy customerSecret = LabelUtil.readerPolicy(bankCore,    bank,   customer); // {bank->customer}
            
            final Label brokerLabel   = LabelUtil.toLabel(brokerCore,  brokerTrusted);
            final Label airlineLabel  = LabelUtil.toLabel(bankCore,    bankTrusted, airlineSecret);
            final Label customerLabel = LabelUtil.toLabel(bankCore,    bankTrusted, customerSecret);
            final Label ticketsLabel  = LabelUtil.toLabel(airlineCore, airlineTrusted);

            Principal bank     = new AbstractPrincipal@brokerCore~brokerLabel().jif$lang$AbstractPrincipal$("bank");
            Principal customer = new AbstractPrincipal@brokerCore~brokerLabel().jif$lang$AbstractPrincipal$("customer");
            Principal airline  = new AbstractPrincipal@brokerCore~brokerLabel().jif$lang$AbstractPrincipal$("airline");

            Account  airlineAccount = new Balance@bankCore~airlineLabel (bank, airline).Balance$();
            Account customerAccount = new Balance@bankCore~customerLabel(bank,customer).Balance$();

            Tickets tickets = new Tickets@airlineCore~ticketsLabel(bank,airline,customer).Tickets$();

            Broker    broker   = new Broker@brokerCore~brokerLabel(bank,customer).Broker$(customerAccount,airlineAccount,tickets,airline);

            // make broker top
            airline.addDelegatesTo(broker);
               bank.addDelegatesTo(broker);

            // add core delegations
            airline.addDelegatesTo(airlineCore);
             broker.addDelegatesTo(brokerCore);
               bank.addDelegatesTo(bankCore);

            // add client delegations
            Client  brokerClient = Client.getClient(args[0]);
            Client    bankClient = Client.getClient(args[1]);
            Client airlineClient = Client.getClient(args[2]);

            airline.addDelegatesTo(airlineClient);
             broker.addDelegatesTo(brokerClient);
               bank.addDelegatesTo(bankClient);
        }
    }

}

/*
** vim: ts=4 sw=4 et cindent cino=\:0
*/
