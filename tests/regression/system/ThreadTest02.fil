package system;

import fabric.worker.Worker;
import fabric.worker.Store;

/**
 * Tests two top-level transactions with conflicting accesses.
 */
public class ThreadTest02 {
  int i = 0;

  public static void main(String[] args) {
    Store store = Worker.getWorker().getStore("store0");
    ThreadTest02 state;
    T thread;

    atomic {
      state = new ThreadTest02@store();
      thread = new T@store(state);
    }

    fabric.worker.transaction.TransactionManager.getInstance().startThread(thread);

    atomic {
      System.out.println("Thread 1: writing shared state.");
      state.i++;
      System.out.println("Thread 1: waiting 2 seconds.");
      sleep(2);
      System.out.println("Thread 1: committing.");
    }

    sleep(1);

    int i = 0;
    atomic {
      System.out.println("Thread 1: attempting to read shared state.");
      i = state.i;
    }

    if (i == 42)
      System.out.println("TEST PASSED.");
    else
      System.out.println("TEST FAILED.");
  }

  public static class T extends Thread {
    protected ThreadTest02 state;

    T(ThreadTest02 state) {
      this.state = state;
    }

    public void run() {
      atomic {
	System.out.println("Thread 2: waiting for 1 second.");
	ThreadTest02.sleep(1);
	System.out.println("Thread 2: attempting to write shared state.");
	state.i = 42;
	System.out.println("Thread 2: waiting 2 seconds.");
	ThreadTest02.sleep(2);
	System.out.println("Thread 2: committing.");
      }
    }
  }

  public static void sleep(int secs) {
    try {
      Thread.sleep(1000*secs);
    } catch (InterruptedException e) {
    }
  }
}

