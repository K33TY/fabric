package system;

import jif.runtime.Runtime;
import java.io.PrintStream;

public class RemoteCall01 {
  final Core{_->_; *<-*} core;

  final RemoteClient{_->_; *<-*} remoteClient;

  final RemoteCall01Data[{client$->; client$<-}]{_->_; *<-*} data;

  RemoteCall01() {
      core = client$.getCore("core0");

    remoteClient = client$("core0");
    data = new RemoteCall01Data[{client$->; client$<-}]@core();
  }

  public void moo{client$->;client$<-}() : {client$->;client$<-} {
    if (data == null) return;
    data.i++;
  }

  void run{client$->;client$<-}() {
    try {
      atomic {
	if (remoteClient actsfor client$)
	  moo@remoteClient();
      }

      int{client$->; client$<-} curI = 0;
      atomic {
	if (data == null) return;
	curI = data.i;
      }

      Runtime[client$] runtime = null;
      atomic {
	runtime = Runtime.getRuntime();
      }
      if (runtime == null) return;

      PrintStream out = null;
      out = runtime.out();
      if (out == null) return;
      out.println();

      if (curI == 1) out.println("TEST PASSED.");
      else out.println("TEST FAILED: expected t.i == 1 but got " + curI);
    } catch (SecurityException e) {
    }
  }
  
  public static void main{_->_; *<-*}(String[] args) {
    Core core = null;
      core = client$.getCore("core0");
    
    RemoteCall01 obj = null;
    atomic {
      obj = new RemoteCall01@core();
    }

    obj.run();
  }
}

class RemoteCall01Data[label L] {
  int{L} i;
}

