package system;

import jif.runtime.Runtime;
import java.io.PrintStream;

public class RemoteCall01 {
  static final label{*bot} bot = new label{_->_; *<-*};
  final principal{*bot} p = new jif.lang.ExternalPrincipal("user");
  final label{*bot} lbl = new label{p->;p<-};

  final RemoteClient{*bot} remoteClient = client$("core0");

  final RemoteCall01Data[lbl]{*bot} data = new RemoteCall01Data[lbl]();

  public void moo{p->;p<-}() : {p->;p<-} {
    if (data == null) return;
    data.i++;
  }

  void run{*bot}() {
    try {
// TODO: create a main method to instantiate an object and call run() on it.
//      Core core = null;
//      try {
//	core = client$.getCore("core0");
//      } catch (NullPointerException e) {
//	return;
//      }

      atomic {
	if (remoteClient actsfor p && client$ actsfor p)
	  moo@remoteClient();
      }

      int{*lbl} curI = 0;
      atomic {
	if (data == null) return;
	curI = data.i;
      }

      Runtime[p] runtime = null;
      atomic {
	runtime = Runtime.getRuntime();
      }
      if (runtime == null) return;

      PrintStream out = null;
      out = runtime.out();
      if (out == null) return;
      out.println();

      if (curI == 1) out.println("TEST PASSED.");
      else out.println("TEST FAILED: expected t.i == 1 but got " + curI);
    } catch (SecurityException e) {
    }
  }
}

class RemoteCall01Data[label L] {
  int{L} i;
}

