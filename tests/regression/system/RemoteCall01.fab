package system;

import jif.runtime.Runtime;
import java.io.PrintStream;

public class RemoteCall01 {
  static final label{*bot} bot = new label{_->_; *<-*};
  final label{*bot} lbl = new label{client$->;client$<-};

  final RemoteClient{*bot} remoteClient = client$("core0");

  final RemoteCall01Data[lbl]{*bot} data = new RemoteCall01Data[lbl]();

  public void moo{client$->;client$<-}() : {client$->;client$<-} {
    if (data == null) return;
    data.i++;
  }

  void run{*bot}() {
    try {
      atomic {
	if (remoteClient actsfor client$)
	  moo@remoteClient();
      }

      int{*lbl} curI = 0;
      atomic {
	if (data == null) return;
	curI = data.i;
      }

      Runtime[client$] runtime = null;
      atomic {
	runtime = Runtime.getRuntime();
      }
      if (runtime == null) return;

      PrintStream out = null;
      out = runtime.out();
      if (out == null) return;
      out.println();

      if (curI == 1) out.println("TEST PASSED.");
      else out.println("TEST FAILED: expected t.i == 1 but got " + curI);
    } catch (SecurityException e) {
    }
  }
  
  public static void main{*bot}(String[] args) {
    Core core = null;
    try {
      core = client$.getCore("core0");
    } catch (NullPointerException e) {
      return;
    }
    
    new RemoteCall01@core().run();
  }
}

class RemoteCall01Data[label L] {
  int{L} i;
}

