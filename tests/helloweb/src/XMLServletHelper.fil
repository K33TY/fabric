import OO7.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import fabric.worker.Worker;
import fabric.worker.Core;
import fabric.util.Iterator;
import fabric.util.Map;

import java.net.URI;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * the fabric side of the XMLServlet
 */

public class XMLServletHelper {
  DocumentBuilder builder;

  Benchmark db;
  Core local;

  public Document dbSummary() {
    Document result = builder.newDocument();
    Element  root   = result.createElement("database");

    Iterator i = db.modulesById().values().iterator(local);

    while (i.hasNext()) {
      Module m = (Module) i.next();
      Element mod = result.createElement("module");
      mod.setAttribute("id", Integer.toString(m.id()));

      Iterator j = m.assembly().iterator(local);
      while (j.hasNext()) {
        Assembly a = (Assembly) j.next();
        Element assm = result.createElement("assembly");
        assm.setAttribute("id", Integer.toString(a.id()));
        mod.appendChild(assm);
      }

      Element designRoot = result.createElement("design-root");
      designRoot.setAttribute("id", Integer.toString(m.designRoot().id()));
      mod.appendChild(designRoot);

      root.appendChild(mod);
    }

    result.appendChild(root);
    return result;
  }

  public Document assemblySummary(String assmId) {
    Document result = builder.newDocument();
    Integer  id   = new Integer(assmId);

    if (db.complexAssembliesById().containsKey(id)) {
      ComplexAssembly ca = (ComplexAssembly) db.complexAssembliesById().get(id);

      Element root = result.createElement("complex-assembly");
      if (ca.superAssembly() != null)
        root.setAttribute("parent", Integer.toString(ca.superAssembly().id()));

      Iterator i = ca.subAssemblies().iterator(local);
      while (i.hasNext()) {
        Assembly next = (Assembly) i.next();
        Element childElement = result.createElement("assembly");
        childElement.setAttribute("id", Integer.toString(next.id()));
        root.appendChild(childElement);
      }

      result.appendChild(root);
    } else if (db.baseAssembliesById().containsKey(id)) {
      BaseAssembly ba = (BaseAssembly) db.baseAssembliesById().get(id);

      Element root = result.createElement("base-assembly");
      root.setAttribute("parent", Integer.toString(ba.superAssembly().id()));

      Iterator i = ba.componentsShar().iterator(local);
      Iterator j = ba.componentsPriv().iterator(local);
      while (i.hasNext() || j.hasNext()) {
        Element partElement = result.createElement("part");

        CompositePart next = null;
        if (i.hasNext()) {
          next   = (CompositePart) i.next();
          partElement.setAttribute("shared", "true");
        } else {
          next   = (CompositePart) j.next();
        }

        partElement.setAttribute("id", Integer.toString(next.id()));
        root.appendChild(partElement);
      }

      result.appendChild(root);
    } else throw new RuntimeException("id not in either set: " + assmId);
    return result;
  }

  public XMLServletHelper(String dbUri) throws Exception {
    local = Worker.getWorker().getLocalCore();

    URI    addr = new URI(dbUri);
    Core   core = Worker.getWorker().getCore(addr.getHost());

    db      = (Benchmark) ((Map) core.getRoot()).get(addr.getPath());
    builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
  }
  
  public static XMLServletHelper create(Core core, String uri) throws Exception {
    atomic {
      return new XMLServletHelper@core(uri);
    }
  }
}

/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/

