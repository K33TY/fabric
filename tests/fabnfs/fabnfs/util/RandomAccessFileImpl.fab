package fabnfs.util;

import fabnfs.util.ResizableFileByteArray;
import fabric.client.Core;
import java.io.IOException;

public class RandomAccessFileImpl implements RandomAccessFile {
    FileImpl file;
    ResizableFileByteArray contents;
    FileSystemObject fabFile;
    int currentPos;

    public RandomAccessFileImpl(Core remoteCore, String path) throws IOException {
        this.file = new FileImpl(remoteCore, path);

        if (!file.exists()) {
//            System.err.println("File " + path + " does not exist. Creating it...");
            if (!file.mkfile()) {
                throw new IOException("Cannot find or create file: " + path);
            }
        }
        fabFile = file.element;
        if (fabFile instanceof FabFile) {
            contents = ((FabFile)fabFile).contents;
        } else {
            contents = null;
        }
        currentPos = 0;
    }

    public void seek(long offset) {
        currentPos += (int)offset;
    }

    public void write(FileByteArray b, int off, int len) {
        atomic {
            if (contents == null) return;
            if (contents.getLength() < currentPos + len) {
                contents.setLength(currentPos + len);
            }
            for(int i = 0; i < len; i++) {
                contents.set(currentPos + i, b.get(i+off));
            }
            fabFile.lastModifiedDate = System.currentTimeMillis();
        }
    }

    public void close() {
        currentPos = 0;

    }

}
