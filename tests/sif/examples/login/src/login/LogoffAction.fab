package login;

import javax.servlet.ServletException;

import sif.servlet.*;
import sif.html.*;

public class LogoffAction[principal servP] extends AbstractAction[servP] {
    public LogoffAction(Servlet[servP]{this} servlet) {
        super();
        initFields("logoff",servlet);
    }

    public final void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req) 
    throws (ServletException{*lbl;*:req.session;req.session!:})
        where caller(req.session),
        lbl <= {*:req.session} {

        if (req == null)    throw new ServletException("Error processing request");
        Servlet[servP] servlet_ = getServlet();
        SessionState state_ = req.getSessionState(lbl);
        if (!(servlet_ instanceof AbstractServlet[servP]) ||
                !(state_ instanceof AuthSessState[servP, lbl])) 
            throw new ServletException("Error processing request");
        final AuthSessState[servP, lbl] state = (AuthSessState[servP, lbl])state_;
        final AbstractServlet[servP] servlet = (AbstractServlet[servP])servlet_;
        if (state == null || servlet == null)    throw new ServletException("Error processing request");

        atomic {
            Action[servP] a = servlet.findStartAction(req, servlet.defaultActionName(req));
//            if (!ensureLoggedIn(lbl, req, a)) return;

            final label newLbl = new label {*lbl; req.session!:};

            if (req.session equiv state.sessionPrincipal) {
                principal{req.session!:;*lbl} currentUser_ = state.currentUser();
                if (!(currentUser_ instanceof DelegatingPrincipal))
                    throw new ServletException("Error processing request");
                final DelegatingPrincipal{req.session!:;*lbl} currentUser = (DelegatingPrincipal)currentUser_;
                
                if (currentUser != null && 
                        req.session actsfor currentUser && 
                        lbl <= new label {currentUser→;currentUser←}) {
                    currentUser.removeDelegatesTo(req.session);
                }
                
                // invalidate the session.
                req.invalidateSession();
                
                // produce the goodbye page.
                String title = "Goodbye";
                Paragraph[newLbl, newLbl] para = new Paragraph[newLbl, newLbl]("You have succesfully logged off.");
                NodeList[newLbl, newLbl] content = new NodeList[newLbl, newLbl](newLbl, newLbl, para); 
                content = content==null?null:content.append(newLbl, newLbl, new Hyperlink[servP, newLbl, newLbl](req.contextURL(), "Login again"));
                content = new NodeList[newLbl, newLbl](newLbl, newLbl, createBanner(newLbl, title), createBody(newLbl, newLbl, content));
                servlet.createPage(req, title, newLbl, newLbl, content);        
            }
            else {
                throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
            }
        }
    }
}
