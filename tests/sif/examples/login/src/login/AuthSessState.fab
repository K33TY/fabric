package login;

import sif.servlet.SessionState;
import sif.servlet.SessionPrincipal;
import jif.util.*;

public class AuthSessState[principal servP, covariant label T] extends SessionState[T] {
    public final PrincipalWrapper[servP,{sessionPrincipal!:}]{T} wrapper;
    
    public AuthSessState(String{T} id, SessionPrincipal{T} session) {
        wrapper = new PrincipalWrapper[servP,{sessionPrincipal!:}]();
    	super(id, session);
    }
    
    public AuthSessState(SessionPrincipal{T} sp, String{T} si, PrincipalWrapper[servP, {sessionPrincipal!:}]{T} wrap) {
    	PrincipalWrapper local = null;
    	if(sp equiv sessionPrincipal) {
    		local = wrap;
    	}
    	this.wrapper = local;
    	// TODO Call super correctly
    	super(si, sp);
    }
    
    public principal{T;sessionPrincipal←} currentUser() {
    	try {
    		return wrapper.currentUser;
    	} catch (NullPointerException e) {return null;}
    }
    
    void currentUser{sessionPrincipal!:}(principal{sessionPrincipal!:} cu) 
    where T <= {sessionPrincipal!:} {
    	try {
    		wrapper.currentUser(cu);
    	} catch (NullPointerException e) {}
    }
    
    public static AuthSessState[Q, {P←}]{P←} declassifySS{P←}(AuthSessState[Q, {P→;P←}]{P→;P←} ss_, principal{P←} P, principal{P←} Q)
    where caller(P) {
//    	final USessState[Q,{P→;P←}]{P←} ss = declassify(ss_, {P→;P←} to {P←});
//    	if(ss == null) return null;
//    	final SSW[{P→;P←}]{P←} ssremote = declassify(ss.remote, {P→;P←} to {P←});
//    	if(ssremote == null) return null;
//        final Principal{P←} sessionPrincipal = declassify(ssremote.sessionPrincipal, {P→;P←} to {P←});
//        final String{P←}    sessionId = declassify(ssremote.sessionId, {P→;P←} to {P←});
//        final SSW[{P←}] rem = new SSW[{P←}](sessionPrincipal, sessionId);
//        UserWrapper[Q,{rem.sessionPrincipal←},{P→;P←}]{P←} ssuwrapper = null;
//        UserWrapper[Q,{ssremote.sessionPrincipal←},{P→;P←}]{P→;P←} ssuwrapper_ = ss.uwrapper;
//        if(ssremote.sessionPrincipal equiv rem.sessionPrincipal) {
//        	ssuwrapper = declassify(ssuwrapper_, {P→;P←} to {P←});
//        }
//        if(ssuwrapper == null) return null;
//        final User[Q,{rem.sessionPrincipal←}] currentUser = ssuwrapper.currentUser;
//        final UserWrapper[Q, {rem.sessionPrincipal←}, {P←}] uw = new UserWrapper[Q, {rem.sessionPrincipal←}, {P←}]();
//        if(P equiv rem.sessionPrincipal) {
//        	uw.currentUser(currentUser);
//        }
//        return new USessState[Q,{P←}](rem, uw);
        return null;
    }
}