package login;

import javax.servlet.ServletException;
import sif.servlet.*;
import sif.html.*;

import jif.util.*;

public class LoginAction[principal servP] extends AbstractAction[servP] {
    final Action[servP]{this} successAction;
    
    final Input[servP]{this} inpUserID;
    final Input[servP]{this} inpPassword;
    
    public LoginAction(Servlet[servP]{this} servlet,
                       Action[servP]{this} successAction, 
                       principal{this} session) {
        this.successAction = successAction;
        this.inpUserID = new Input[servP](servlet, new label {session←});
        this.inpPassword = new Input[servP](servlet, new label {session:;session←});
        super();
        initFields(servlet);
    }

    public final void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req) 
    throws (ServletException{*lbl;*:req.session;req.session←})
        where caller(req.session),
        lbl <= {*:req.session} {

        Servlet[servP] servlet = getServlet();
        SessionState state = req.getSessionState();
        if (req == null || servlet == null || state == null) throw new ServletException("Error processing request");

        atomic {
            if (req.session equiv state.sessionPrincipal) {
                // when this action is invoked, just produce the login page.
                final label sessLbl = new label {req.session→;req.session←};
                if (lbl <= sessLbl && inpPassword != null && inpUserID != null 
                        && inpUserID.inputLbl <= sessLbl && inpPassword.inputLbl equiv sessLbl 
                        && new label {*lbl; session←} <= inpUserID.inputLbl) {
                    producePage(new label {*lbl;session←}, req, servlet, state, null, null);
                }
                else {
                    String lblString = LabelUtil.toString(lbl);
                    throw new ServletException("LoginAction.producePage: lbl too high: " + lblString);
                }
            }
            else {
                throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
            }
        }
    }
    
    protected void producePage{*lbl}(label{*lbl} lbl,
                                           Request[servP]{*lbl} req,
                                           Servlet[servP]{*lbl} servlet,
                                           SessState[servP, lbl]{*lbl} state,
                                           String{*lbl} uidError, 
                                           String{*lbl} passwdError) 
             where session equiv req.session, 
                   session equiv state.sessionPrincipal,
                   lbl <= {*:req.session},
                   {session←} <= lbl,
                   {*this.inpUserID.inputLbl} <= {session:;session←},
                   {*this.inpPassword.inputLbl} <= {session:;session←},
                   lbl <= {*this.inpUserID.inputLbl},
                   {session:;session←} <= {*this.inpPassword.inputLbl},
                   caller(session)
    {
        Node[lbl, lbl] userIDText = desc(lbl, "User ID:");
        Node[lbl, lbl] passwordText = desc(lbl, "Password:");
        Node[lbl, lbl] welcomeText = new Paragraph[lbl, lbl]("Please login");
        String title = "Login";
        Node[lbl, lbl] banner = createBanner(lbl, title);

        if (req == null || servlet == null || state == null) return;

        String defaultUserID = defaultValue(lbl, lbl, req, null, inpUserID);
        NodeList[lbl, lbl] entries = new NodeList[lbl, lbl](lbl, lbl, new TRow[lbl, lbl](lbl, lbl, new NodeList[lbl, lbl](lbl, lbl, userIDText,
                inpNode(lbl, new TextInput[servP, lbl, lbl](inpUserID, 40, defaultUserID), uidError))));
        entries = entries.append(lbl, lbl, new TRow[lbl, lbl](lbl, lbl, new NodeList[lbl, lbl](lbl, lbl, passwordText,
                inpNode(lbl, new PasswordInput[servP, lbl, lbl](inpPassword, 40, ""), passwdError))));
        entries = entries == null?null:entries.append(lbl, lbl, new TRow[lbl, lbl](lbl, lbl,
                new TCell[lbl, lbl](lbl, lbl, new SubmitButton[servP, lbl, lbl](servlet, lbl, "Login"))));
        Node[lbl, lbl] form = servlet.createForm(lbl, lbl, new SubmitLoginAction[servP](servlet, session, this),
                                                                lbl, lbl, 
                                                                new Table[lbl, lbl](lbl, lbl, entries)); 
        Node[lbl, lbl] content = new NodeList[lbl, lbl](lbl, lbl, banner, createBody(lbl, lbl, new NodeList[lbl, lbl](lbl, lbl, welcomeText, form)));
        servlet.createPage(req, title, lbl, lbl, content);
    }
        
    private Node[lbl, lbl]{lbl} desc{*lbl}(label{*lbl} lbl, String{*lbl} txt) {
        TCell[lbl, lbl] n = new TCell[lbl, lbl]("desc", lbl, lbl, new Text[lbl, lbl](txt));
        return n;
    }

    private Node[lbl, lbl] inpNode{*lbl}(label{*lbl} lbl, InputNode[servP, lbl, lbl]{*lbl} inp, String{*lbl} error) {
        TCell[lbl, lbl] cell;
        cell = new TCell[lbl, lbl](lbl, lbl, inp);
        
        if (error == null) {
            return cell;
        }
        // There is an error for this input
        TCell[lbl, lbl] err = new TCell[lbl, lbl]("error", lbl, lbl, new Text[lbl, lbl](error));
        return new NodeList[lbl, lbl](lbl, lbl, cell, err);
    }
}

class SubmitLoginAction[principal servP] extends AbstractAction[servP] {
    private final LoginAction[servP]{this} loginAct;
    public SubmitLoginAction(Servlet[servP]{this} s, LoginAction[servP]{this} loginAct) {
        this.loginAct = loginAct;
        super();
        initFields(s);
    }
    
    public final void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req) 
    throws (ServletException{*lbl;*:req.session;req.session←})
        where caller(req.session),
        lbl <= {*:req.session} {

        Servlet[servP] servlet_ = getServlet();
        if (!(servlet_ instanceof AbstractServlet[servP])) throw new ServletException("Error processing request");
        servlet = (AbstractServlet[servP])servlet_;
        SessionState state_ = req.getSessionState();
        if (!(state_ instanceof AuthSessState[servP, lbl])) throw new ServletException("Incorrect session state");
        final AuthSessState[servP, lbl] state = (AuthSessState[servP, lbl])state_;
        if (req == null || servlet == null || state == null) throw new ServletException("Error processing request");

        atomic {
            final label newLbl = new label {*lbl; req.session←};

            if (req.session equiv css.sessionPrincipal) {
                this.invokeImpl(newLbl, req, servlet, state);
            }
            else {
                throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
            }
        }
    }

    public void invokeImpl{*lbl}(label{*lbl} lbl,
                                          Request[servP]{*lbl} req,
                                          AbstractServlet[servP]{*lbl} servlet,
                                          AuthSessState[servP, lbl]{*lbl} state) 
        throws (ServletException{*lbl;req.session←})
            where caller(req.session),
            lbl <= {⊤→req.session},
            req.session equiv state.sessionPrincipal
    {
        if (req == null || servlet == null || state == null) 
            throw new ServletException("invalid args");
        
        if (loginAct == null) throw new ServletException("loginAct is null!");
        
        if (req.session equiv loginAct.session && lbl <= new label{req.session→}) {
                this.submit(lbl, req, servlet, state);
        }
        else {
            String lblString = null;
                lblString = LabelUtil.toString(lbl);
            throw new ServletException("SubmitLoginAction.invokeSessImpl: lbl is too high: " + lblString);
        }
    }
    
    protected void submit{*lbl}(label{*lbl} lbl,
                                Request[servP]{*lbl} req,
                                AbstractServlet[servP]{*lbl} servlet,
                                AuthSessState[servP, {*lbl}]{*lbl} state) 
        throws (ServletException{*lbl;req.session←})
        where req.session equiv state.sessionPrincipal,
              req.session equiv loginAct.session,
              lbl <= {⊤→req.session},
              caller(req.session)
    {
 
        if (req == null || servlet == null || state == null || !(session instanceof SessionPrincipal)) 
            return;

        if (loginAct == null || loginAct.successAction == null || 
                loginAct.inpUserID == null || loginAct.inpPassword == null) return;

        ServletException ex = null;
        // user has submitted username and password.
        // extract data from request
        if (loginAct.inpUserID == null || loginAct.inpPassword == null) {
            return;
        }
        final label sessLbl = new label{req.session→;req.session←};
        if (loginAct.inpUserID.inputLbl <= sessLbl && 
                loginAct.inpPassword.inputLbl <= sessLbl &&
                new label {*lbl; req.session←} <= loginAct.inpUserID.inputLbl &&
                lbl <= new label {req.session:;req.session←} &&
                sessLbl <= loginAct.inpPassword.inputLbl) {
            String userID = req.getParam(loginAct.inpUserID);
            String password = req.getParam(loginAct.inpPassword);
            
            // validate data
            String uidErr = null;
            String passwordErr = null;
            
            final principal loginUser = servlet.lookupUserID(userID, req.session);
            
            if (userID == null || userID.length() == 0) {
                // invalid user ID
                uidErr = "Invalid user ID.";                
            }
            else if (password == null || password.length() == 0) {
                // invalid password
                passwordErr = "Please enter a password.";                
            }
            else if (loginUser == null) {
                // unknown user or incorrect password 
                passwordErr = "Unknown or incorrect username and password.";
            }
            else {
                passwordErr = runClosure(loginUser, (SessionPrincipal)session, password);
            }
            if (uidErr != null || passwordErr != null) {
                // there were errors, send the user back to the login page.
                // DOWNGRADE REASON: The PC depends here on confidential info (i.e., the password). 
                // We're prepared to declassify that the logon failed.
                declassify ({*lbl;session←}) { // declassify the fact that the uid/password was wrong.
                    loginAct.producePage(new label {*lbl;session←}, req, servlet, state, 
                                         declassify(uidErr, {*lbl;session←}), 
                                         declassify(passwordErr, {*lbl;session←}));
                }
            }
            else {
                // successful login!
                // set the current user in the session state, and send the user
                // back to the return action. 
                // DOWNGRADE REASON: The current user is publically readable info. Here, we
                // depend on confidential information, i.e. the password. But we're happy to declassify
                // the fact that the user has logged on successfully.
                declassify({session:;session←} to {session←}) {                     
                    User[servP, {session:;session←}] logU_ = declassify(endorse(loginUser, {session:;session←}), {session←});
                    User[servP, {session←}] logU = User.declassifyUser(session, servP, logU_);
                    try {
                    	final USessState[servP, {session←}] uss = (USessState[servP, {session←}])SessionState[{session←}].declassifySS(state, session);
                    	if(uss.sessionPrincipal equiv session) {
                    		uss.currentUser(logU);
                    	}
                    } catch(ClassCastException e) {}
                    catch (NullPointerException e) {}
                    
                    final label newLbl = new label {*lbl; req.session←};
                    final LoginAction[servP] loginAct = this.loginAct;
                    if (loginAct != null && loginAct.successAction != null) {
                        try {
                            loginAct.successAction.invokeImpl(newLbl, req, servlet, state);
                        }
                        catch (ServletException e) {
                            ex = e;
                        }
                    }
                }
            }
        }
        if (ex != null) throw ex;
    }        
    
    private String{session:;session←} runClosure{session:;session←}(User[servP, {session:;session←}]{session:;session←} loginUser, 
                                                  SessionPrincipal{session:;session←} sp, 
                                                  String{session:;session←} password) 
     where caller(session) {
        // DOWNGRADE REASON: Has effects at level {loginUser:}, which we need to hide away, since
        // session does not yet act for loginUser.
        declassify ({session←}) { 
            final User[servP, {session:;session←}] logUser_ = declassify(loginUser, {session←});
            final User[servP, {session←}] logUser = User.declassifyUser(session, servP, logUser_);
            FabricWorker worker = FabricWorker.getWorker();
            if(worker == null) return null;
            
            final Store{session←} localStore = worker.getLocalStore();
//            SessionPrincipal spdeclass = SessionPrincipal.declassifySP(sp, session);
            SessionPrincipal spdeclass = declassify(sp, {session:;session←} to {session←});
            LoginClosure[servP, logUser] lc = new LoginClosure[servP, logUser]{session←}@localStore(spdeclass);
            Capability[logUser, {logUser:}] cap = 
                PrincipalUtil.authorize(logUser, 
                                        declassify(password, {session←}),
                                        lc,
                                        new label {logUser:});
            if (cap == null) {                                                
                return "Unknown or incorrect username and password.";
            }
            // successful login!                        
            // loginUser delegates authority to the session principal 
            cap.invoke();
        }
        return null;
    }       
}
        
