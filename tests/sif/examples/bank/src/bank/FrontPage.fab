package bank;

import javax.servlet.ServletException;

import sif.html.*;
import sif.servlet.Action;
import sif.servlet.Request;
import sif.servlet.Servlet;
import fabric.util.Map;


import travel.Broker;
import travel.Config;
import travel.Account;


public class FrontPage extends BankAction authority (BankPrincipal) {
    public FrontPage(BankMain{this} m) throws ServletException {
        super();
        initFields("frontpage", m);
    }
    
    public final void invoke{*lbl}(label{*lbl} lbl, Request[BankPrincipal]{*lbl} req) 
    throws (ServletException{*lbl;⊤→req.session;req.session←})
        where caller(req.session),
        lbl <= {⊤→req.session} {

        Servlet[BankPrincipal] s = getServlet();
        if (s == null || !(s instanceof BankMain)) throw new ServletException("No servlet available"); 
        if (req == null) throw new ServletException("No request available"); 
        BankMain m = (BankMain)s;

        atomic {
            
            if (lbl <= new label {req.session←}) {
                loginBank(req.session, req);
            }

            FabricWorker w = worker$;
            if (w == null) throw new ServletException("Internal Error");
            final Store store = worker$.getStore(Config.bankStoreName);
            Map root = null;
            if (store != null) {
                root = (Map) store.getRoot();
            }
            if (root == null) throw new ServletException("Bank Store not accessible");
            
            Account[BankPrincipal] airlineAccount_ = null,customerAccount_ = null;
            
            Object aobj = root.get(Config.airlineAccountKey);
            Object cobj = root.get(Config.customerAccountKey);
            if (aobj instanceof Account[BankPrincipal] && cobj instanceof Account[BankPrincipal]) {
                airlineAccount_ = (Account[BankPrincipal])aobj;
                customerAccount_ = (Account[BankPrincipal])cobj;
            }
            final Account[BankPrincipal] airlineAccount = airlineAccount_,customerAccount = customerAccount_;
            if (airlineAccount == null || customerAccount == null)
                throw new ServletException("Could not fetch bank information base");
            
            // Display the account balances of all accounts maintained by the bank

            final label lblc = new label {BankPrincipal→CustomerPrincipal; BankPrincipal←};
            final label lbla = new label {BankPrincipal→AirlinePrincipal; BankPrincipal←};
            final label lblca = new label {BankPrincipal→AirlinePrincipal; BankPrincipal→AirlinePrincipal; BankPrincipal←};
            if (lbl equiv new label {BankPrincipal←} &&
                    lblc <= lblca && 
                    lbla <= lblca && 
                    req.session actsfor BankPrincipal &&
                    airlineAccount.user equiv AirlinePrincipal &&
                    customerAccount.user equiv CustomerPrincipal) {
                Text msg = new Text[lbl,lbl]("The following are the accounts maintained by the Acme Bank");
                Text name1 = new Text(airlineAccount.name() + ": ");
                Text name2 = new Text(customerAccount.name());
                Text value1 = new Text[lbla,lbl](Float.toString(airlineAccount.balance()));
                Text value2 = new Text[lblc,lbl](Float.toString(customerAccount.balance()));
                NodeList[lblca, lbl] entries = NodeList.EMPTY();
                entries = entries==null?null:entries.append(lbl, lbl, 
                        new TRow[lbl, lbl](new TCell[lbl, lbl](msg)));
                entries = entries==null?null:entries.append(new TRow[lbla, lbl](new TCell[lbla, lbl]
                        (new NodeList[lbla,lbl](name1,value1))));
                entries = entries==null?null:entries.append(lblc, lbl, new TRow[lblc, lbl](new TCell[lblc, lbl]
                        (new NodeList[lblc,lbl](name2,value2))));
                s.createPage(req, "Bank Home Page", lblca, lbl,
                        new NodeList[lblca,lbl](lbl, lbl, createBanner(lbl, "Welcome to the Acme Bank System"),
                                lblca, lbl, new Table[lblca, lbl](entries)));
            }
        }
    }
    
    // TODO Add Login in 3rd stage. Use the userserv library  
    // For now, automatically make req.session actsfor BankPrincipal
    private final void loginBank{session←}(principal{session←} session, Request[BankPrincipal]{session←} reqParam) 
    where authority(BankPrincipal), endorse({BankPrincipal←})
    {
        final Request[BankPrincipal] req = endorse(reqParam, {session←} to {BankPrincipal←});
        final DelegatingPrincipal p = (DelegatingPrincipal)BankPrincipal;
        if (p == null) return;
        final principal sessionLow = endorse(session, {session←} to {BankPrincipal←});
        if (p equiv BankPrincipal) {
            p.addDelegatesTo(sessionLow);
        }
        
    }
    
}
