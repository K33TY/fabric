package calendar;

import userserv.*;
import sif.servlet.*;
import sif.html.*;
import fabricated.util.List;
import fabricated.util.Date;
import fabric.lang.security.Principal;

public class CalServDeclassifier authority (CalServEP) {

    // DOWNGRADE REASON: transfer user list from CalServEP to p
    static principal{p:;p!:}[]{p:;p!:} userListToPrincipals{users}(principal{users} p, 
                                                                                 List[{CalServEP:;CalServEP!:}]{p:;p!:} users) 
    where caller (CalServEP,p), endorse({p:;p!:}) {
        if (users == null) return null;
        int size = transfer(CalServEP, p, users.size());
        principal{p:;p!:}[] ps = new principal[size<0?0:size];
        for (int i = 0; i < size; i++) {
            User[CalServEP, {p:;p!:}] u = null;
            try {
                u = (User[CalServEP, {p:;p!:}])users.get(i);
            }
            catch (IndexOutOfBoundsException impossible) { }
            catch (ClassCastException impossible) { }
            try {
                ps[i] = (principal)(Principal)transfer(CalServEP, p, u);
            }
            catch (IndexOutOfBoundsException impossible) { }
            catch (ClassCastException impossible) { }
        }
        return ps;
        
    }

    // DOWNGRADE REASON: transfer user display string from CalServEP to p
    static String{*lbl} declassUserDisplayString{p:}(label{p:} lbl, principal{p:} p, User[CalServEP, {p:}]{p:} u) 
      where {p!:} <= lbl, lbl <= {p:}, caller (CalServEP,p), endorse({p:;p!:}) {
        String userName = u==null?null:u.displayString();
        String s = null;
        try {
            s = (String)transfer(CalServEP, p, userName);
        }
        catch (ClassCastException imposs) { }
        return declassify(s, {*lbl;p!:});
    }
        
      // DOWNGRADE REASON: transfer user list from CalServEP to p
     static String{*lbl} declassUserListToString{p:;p}(
                       label{p:} lbl,
                       principal{users} p, 
                       List[{CalServEP:;CalServEP!:}]{p:} users, 
                       boolean{users} useDisplayString,
                       String{users} seperator) 
      where {p!:} <= lbl, lbl <= {p:}, caller (CalServEP,p), endorse({p:;p!:}) 
      {
          String sb = "";
          int i = 0;
          while (users != null && i < users.size()) {
              try {
                  User[CalServEP, {p:}] u = (User[CalServEP, {p:}])users.get(i);
                  if (u != null) {
                      if (useDisplayString) {
                          sb += u.displayString();
                      }
                      else {
                          sb += u.name();                          
                      }
                  }
                  if (i+1 < users.size()) {
                      sb += seperator;                
                  }
              }
              catch (IndexOutOfBoundsException impossible) { }
              catch (ClassCastException impossible) { }
              
              i++;
          }
          String{p:;p!:} s = null;
          try {
              s = (String)transfer(CalServEP, p, sb);
          }
          catch (ClassCastException imposs) { }
          return declassify(s, {*lbl;p!:});
      }
      
      // DOWNGRADE REASON: utility method to transfer from P to Q
      static Object{Q:;Q!: ⊓ P!:} transfer{P:;Q:}(principal{P:;Q:} P, 
              principal{P:;Q:} Q, 
              Object{P:;Q:} o) 
              where caller(P,Q), endorse({P:;Q:;P!: ⊓ Q!:}){
          declassify ({P!: ⊓ Q!:}) {
              Object o1 = endorse(o, {P:;Q:} to {P:;Q:;Q!: ⊓ P!:});
              Object o2 = declassify(o1, {P:;Q!: ⊓ P!:;Q:} to {Q!: ⊓ P!:;Q:});
              return o2;
          }
          
      }
      // DOWNGRADE REASON: utility method to transfer from P to Q
      static int{Q:;Q!: ⊓ P!:} transfer{P:;P!:;Q:;Q!:}(principal{P:;P!:;Q:;Q!:} P, 
              principal{P:;P!:;Q:;Q!:} Q, 
              int{P:;P!:;Q:;Q!:} i) 
              where caller(P,Q), 
              endorse({P:;Q:;P!: ⊓ Q!:}){
          try {
              return ((Integer)transfer(P,Q,new Integer(i))).intValue();
          }
          catch (ClassCastException impossible) { }
          catch (NullPointerException impossible) { }
          return 0;
      }
        
      
      // DOWNGRADE REASON: utility method to transfer date from P to Q
      static Date[{Q:;Q!:}]{Q:;Q!:} declassDate{P!:}(principal{P!:} P, 
                                                  principal{Q:;Q!:} Q, 
                                                  Date[{P!:}]{P!:} d) 
                                                  where caller (P,Q), endorse({P!: ⊓ Q!:}) {
          declassify ({P!: ⊓ Q!:}) {
              int day = d==null?0:d.getDay();
              int month = d==null?0:d.getMonth();
              int year = d==null?0:d.getYear();
              int hour = d==null?0:d.getHour();
              int minute = d==null?0:d.getMinute();
              
              int d3 = transfer(P, Q, day);
              int m3 = transfer(P, Q, month);
              int y3 = transfer(P, Q, year);    
              int h3 = transfer(P, Q, hour);    
              int mi3 = transfer(P, Q, minute);    
              
              Date[{Q:;Q!:}] newD = null;
              try {
                  newD = new Date[{Q:;Q!:}](y3, m3, d3, h3, mi3);
              }
              catch (IllegalArgumentException impossible) { }
              return newD;
          }
      }

      // DOWNGRADE REASON: utility method to transfer date from P to lbl.
      static Date[lbl]{P!:; lbl} declassDate{P:;P!:}(principal{P:;P!:} P,
              label{P:;P!:} lbl,
              Date[{P:;P!:}]{P:;P!:} d) 
              where {P!:} <= lbl, caller(P) 
    {
        int day = d==null?0:d.getDay();
        int month = d==null?0:d.getMonth();
        int year = d==null?0:d.getYear();
        int hour = d==null?0:d.getHour();
        int minute = d==null?0:d.getMinute();
        
        int d3 = declassify(day, {P:;P!:} to {P!:});
        int m3 = declassify(month, {P:;P!:} to {P!:});
        int y3 = declassify(year, {P:;P!:} to {P!:});
        int h3 = declassify(hour, {P:;P!:} to {P!:});
        int mi3 = declassify(minute, {P:;P!:} to {P!:});
        
        Date[lbl] newD = null;
        try {
            newD = new Date[lbl](y3, m3, d3, h3, mi3);
        }
        catch (IllegalArgumentException impossible) { }
        return newD;
    }
    
     // Typically P and Q are CalServEP and current user or vice versa
     // Used when storing and retrieving events from the persistent store
     // TODO : Don't need two constructors here, can do with one
      public static Event[{Q→;Q←}]{Q→;Q←} handOverEvent{P← ⊓ Q← ⊓ CalServEP←}(
    		  principal{P→;Q→;P←;Q←} P,
    		  principal{P→;Q→;P←;Q←} Q,
    		  Event[{P→;P←}]{P→;Q→;P←;Q←} event_,
    		  Store store)
    		  where caller(P,Q,CalServEP) {
//    	  final Event[{P→;P←}]{P← ⊓ Q← ⊓ CalServEP←} event = declassify(endorse(event_,
//    			  {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q← ⊓ CalServEP←}),
//    			  {P→;Q→;P← ⊓ Q← ⊓ CalServEP←} to {P← ⊓ Q← ⊓ CalServEP←});
//    	  if(event == null || event.uid == null) return null;
//			final label ntimeLbl = endorse(event.timeLbl, {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q←});
//			final label ninfoLbl = endorse(event.infoLbl, {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q←});
//			Event$1[event.infoLbl] e1r = event.remote1;
//			Event$1[ninfoLbl] nremote1 = endorse(e1r, {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q←});
//			Date[event.timeLbl] e1s = event.startTime;
//			Date[event.timeLbl] e1e = event.endTime;
//			Date[ntimeLbl] nstartTime = endorse(e1s, {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q←});
//			Date[ntimeLbl] nendTime = endorse(e1e, {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q←});
//
//			final Event e1_ = new Event[{P→;Q→;P← ⊓ Q←}](
//						endorse(event.uid.uid, {P→;Q→;P←;Q←;CalServEP→;CalServEP←} to {P→;Q→;P← ⊓ Q←;CalServEP→;CalServEP←}),
//						ntimeLbl,
//						ninfoLbl,
//						nstartTime,
//						nendTime,
//						nremote1
//				);
//
//			final Event[{P→;Q→;P← ⊓ Q←}] e1 = 
//				endorse(e1_, {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q←});
//			if(e1 == null || e1.uid == null) return null;
//			int muid_ = endorse(e1.uid.uid, {P→;Q→;CalServEP→;Q←;CalServEP←} to {P→;Q→;CalServEP→;P← ⊓ Q← ⊓ CalServEP←});
//			int muid = declassify(muid_, {P→;Q→;CalServEP→;P← ⊓ Q← ⊓ CalServEP←} to {Q→;Q←;CalServEP→;CalServEP←});
//
//			final label mtimeLbl = declassify(e1.timeLbl, {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			final label minfoLbl = declassify(e1.infoLbl, {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			Event$1[e1.infoLbl] e2r = e1.remote1;
//			Event$1[minfoLbl] mremote1 = declassify(e2r, {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			Date[e1.timeLbl] e2s = e1.startTime;
//			Date[e1.timeLbl] e2e = e1.endTime;
//			Date[mtimeLbl] mstartTime = declassify(e2s, {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			Date[mtimeLbl] mendTime = declassify(e2s, {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			Event[{Q→;Q←}] e2_ =
//				new Event[{Q→;Q←}](
//						muid,
//						mtimeLbl,
//						minfoLbl,
//						mstartTime,
//						mendTime,
//						mremote1
//				);
//			final Event e2 = declassify(endorse(e2_, {P→;Q→;P←;Q←} to {P→;Q→;P← ⊓ Q←}), {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			return e2;
          return null;
          // TODO
      }      
      
      
      // Typically called with P as the current user and Q as the session principal
      // Not necessary now since ShowCalendarSessAction is a java object
//      public static ShowCalendarSessAction[{Q←}]{Q←} handOverSessionAction{Q←}(ShowCalendarSessAction[{P←}]{P←} scsa_, principal{P←} P, principal{Q←} Q) 
//      where Q actsfor P, caller(Q) {
//    	  ShowCalendarSessAction[{P←}]{Q←} scsa = endorse(scsa_, {P←} to {Q←});
//    	  if(scsa == null) return null;
//    	    final Input[CalServEP]{Q←} displayDateInput = endorse(scsa.displayDateInput, {P←} to {Q←});
//    	    final Input[CalServEP]{Q←} displayKindInput = endorse(scsa.displayKindInput, {P←} to {Q←});
//    	    final Input[CalServEP]{Q←} eventIDInput = endorse(scsa.eventIDInput, {P←} to {Q←});
//    	    Main servlet_ = null;
//    	    try {
//    	    	servlet_ = (Main)scsa.getServlet();
//    	    } catch (ClassCastException e) {}
//    	    final Main{Q←} servlet = endorse(servlet_, {P←} to {Q←});
//    	    final principal{Q←} session = endorse(scsa.session, {P←} to {Q←});
//    	    
//    	    final ChangeDisplayDateAction[{Q←}]{Q←} changeDisplayDateAction = new ChangeDisplayDateAction[{Q←}](servlet, session); 
//    	    final EditEventAction[{Q←}]{Q←} editEventAction = new EditEventAction[{Q←}](servlet, session);
//
//    	    return new ShowCalendarSessAction[{Q←}](displayDateInput, displayKindInput, eventIDInput, changeDisplayDateAction, editEventAction, servlet, session);
//      }
      
//      public static ShowCalendarSessAction[{P←}]{P←} declassifySCSA{P←}(ShowCalendarSessAction[{P→;P←}]{P→;P←} scsa_, principal{P→;P←} P) where caller(P) {
//    	  ShowCalendarSessAction[{P→;P←}]{P←} scsa = declassify(scsa_, {P→;P←} to {P←});
//    	  if(scsa == null) return null;
//  	    final Input[CalServEP]{P←} displayDateInput = declassify(scsa.displayDateInput, {P→;P←} to {P←});
//	    final Input[CalServEP]{P←} displayKindInput = declassify(scsa.displayKindInput, {P→;P←} to {P←});
//	    final Input[CalServEP]{P←} eventIDInput = declassify(scsa.eventIDInput, {P→;P←} to {P←});
//	    
//	    
//	    Main servlet_ = null;
//	    try {
//	    	servlet_ = (Main)scsa.getServlet();
//	    } catch (ClassCastException e) {}
//	    final Main{P←} servlet = declassify(servlet_, {P→;P←} to {P←});
//	    final principal{P←} session = declassify(scsa.session, {P→;P←} to {P←});
//
//	    final ChangeDisplayDateAction[{P←}] changeDisplayDateAction_ = new ChangeDisplayDateAction[{P←}](servlet, session);
//	    final ChangeDisplayDateAction[{P←}]{P←} changeDisplayDateAction = declassify(changeDisplayDateAction_, {P→;P←} to {P←});
//	    final EditEventAction[{P←}] editEventAction_ = new EditEventAction[{P←}](servlet, session); 
//	    final EditEventAction[{P←}]{P←} editEventAction = declassify(editEventAction_, {P→;P←} to {P←});
//	    
//	    ShowCalendarSessAction[{P←}] toReturn_ = new ShowCalendarSessAction[{P←}](displayDateInput, displayKindInput, eventIDInput, changeDisplayDateAction, editEventAction, servlet, session);
//	    ShowCalendarSessAction[{P←}] toReturn = declassify(toReturn_, {P→;P←} to {P←});
//	    return toReturn;
//      }
      
//      public static CreateEditEvent[{P←}]{P←} declassifyCEE{P←}(CreateEditEvent[{P→;P←}]{P→;P←} cee_, principal{P→;P←} P) where caller(P) {
//    	  CreateEditEvent[{P→;P←}]{P←} cee = declassify(cee_, {P→;P←} to {P←});
//    	  if(cee == null) return null;
//    	  final boolean{P←} isReadOnly = declassify(cee.isReadOnly, {P→;P←} to {P←});
//    	  final boolean{P←} isCreate = declassify(cee.isCreate, {P→;P←} to {P←});
//    	  final Event[{P←}]{P←} event = declassifyEvent(P, cee.event);
//    	  final FinishEditEventReceiver{P←} finishEditEventReceiver = declassify(cee.finishEditEventReceiver, {P→;P←} to {P←});
//    	  final UAction[CalServEP]{P←} cancelAction = declassify(cee.cancelAction, {P→;P←} to {P←});
//    	  final Input[CalServEP]{P←} inpName = declassify(cee.inpName, {P→;P←} to {P←});
//    	  final Input[CalServEP]{P←} inpStart = declassify(cee.inpStart, {P→;P←} to {P←});
//    	  final Input[CalServEP]{P←} inpEnd = declassify(cee.inpEnd, {P→;P←} to {P←});
//    	  final Input[CalServEP]{P←} inpNote = declassify(cee.inpNote, {P→;P←} to {P←});
//
//    	  Main servlet_ = null;
//    	  try {
//    		  servlet_ = (Main)cee.getServlet();
//    	  } catch (ClassCastException e) {}
//    	  final Main{P←} servlet = declassify(servlet_, {P→;P←} to {P←});
//    	  final principal{P←} session = declassify(cee.session, {P→;P←} to {P←});
//
//    	  CreateEditEvent[{P←}] toReturn_ = new CreateEditEvent[{P←}](servlet, session, finishEditEventReceiver, cancelAction, event, isReadOnly, isCreate, inpName, inpStart, inpEnd, inpNote); 
//    	  CreateEditEvent[{P←}] toReturn = declassify(toReturn_, {P→;P←} to {P←});
//    	  return toReturn;
//      }
      
      
      // Typically called with Q as session principal and P as the current user 
      public static State[{Q←}]{Q←} declassifyState{Q←}(State[{P→;P←}]{P→;P←} state_, principal{P→;P←} P, principal{P→;P←} Q) where Q actsfor P, caller(Q) {
//    	  final State[{P→;P←}] state__ = endorse(state_, {P→;P←} to {P→;Q←}); 
//    	  final State[{P→;P←}]{Q←} state = declassify(state__, {P→;Q←} to {Q←});
//    	  if(state == null) return null;
//    	    final User[CalServEP, {P→;Q←}] currentUser_ = User.endorseUser(CalServEP, P, Q, state.currentUser);
//    	    final User[CalServEP, {Q←}] currentUser1 = User.declassifyUser(CalServEP, P, Q, currentUser_);
//    	    final User[CalServEP, {P→;P←}] stateCurrentUser = state.currentUser;
//    	    Date[{stateCurrentUser←}] stateDisplayDate = state.displayDate;
//    	    fabricated.util.Date[{stateCurrentUser←}] displayDate_ = endorse(stateDisplayDate, {P→;P←} to {P→;Q←});
//    	    fabricated.util.Date[{currentUser1←}] displayDate = declassify(displayDate_, {P→;Q←} to {Q←});
//    	    final int{Q←} displayKind = declassify(endorse(state.displayKind, {P→;P←} to {P→;Q←}), {P→;Q←} to {Q←});
//    	    final User[CalServEP, {P→;Q←}] displayUser1 = User.endorseUser(CalServEP, P, Q, state.displayUser);
//    	    final User[CalServEP, {Q←}] displayUser = User.declassifyUser(CalServEP, P, Q, displayUser1);
//    	    State[{Q←}] toReturn_ = new State[{Q←}](currentUser1, displayDate, displayKind, displayUser);
//    	    State[{Q←}]{Q←} toReturn = declassify(endorse(toReturn_, {P→;P←} to {P→;Q←}), {P→;Q←} to {Q←});
//    	    return toReturn;
          return null;
          // TODO
    	  
      }
      
      public static State[{P←}]{P←} declassifyState{P←}(principal{P←} P, State[{P→;P←}]{P→;P←} state)
          where caller(P)
      {
          // TODO Implement me
          return null;
      }
      
      public static State[{Q←}]{Q←} endorseState{P←}(principal{P←} P, principal{P←} Q, State[{P←}]{P←} state)
          where caller(Q), Q actsfor P
      {
          // TODO Implement me
          return null;
      }
      
      
      // Typically called with P as CalRootEP and Q as CalServEP 
      public static Event[{Q→;Q←}]{Q→;Q←} transferEvent{Q→;P←⊓Q←}(
    		  principal{P→;Q→;P←⊓Q←} P,
    		  principal{P→;Q→;P←⊓Q←} Q,
    		  Event[{P→;Q→}]{P→;Q→} event_)
    		  where caller(P,Q), Q equiv CalServEP {
//    	  final Event[{P→;Q→}]{Q→;P←⊓Q←} event = declassify(endorse(event_, {P→;Q→} to {P→;Q→;P← ⊓ Q←}), {P→;Q→;P← ⊓ Q←} to {Q→;P← ⊓ Q←});
//    	  if(event == null || event.uid == null) return null;
//			final label ntimeLbl = declassify(endorse(event.timeLbl, {P→;Q→} to {P→;Q→;P← ⊓ Q←}), {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			final label ninfoLbl = declassify(endorse(event.infoLbl, {P→;Q→} to {P→;Q→;P← ⊓ Q←}), {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			Event$1[event.infoLbl] e1r = event.remote1;
//			Event$1[ninfoLbl] nremote1 = declassify(endorse(e1r, {P→;Q→} to {P→;Q→;P← ⊓ Q←}), {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			Date[event.timeLbl] e1s = event.startTime;
//			Date[event.timeLbl] e1e = event.endTime;
//			Date[ntimeLbl] nstartTime = declassify(endorse(e1s, {P→;Q→} to {P→;Q→;P← ⊓ Q←}), {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			Date[ntimeLbl] nendTime = declassify(endorse(e1e, {P→;Q→} to {P→;Q→;P← ⊓ Q←}), {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//			
//			final int nuid_ = endorse(event.uid.uid, {P→;Q→} to {P→;Q→;P← ⊓ Q←}); 
//			final int nuid = declassify(nuid_, {P→;Q→;P← ⊓ Q←} to {Q→;Q←});
//
//			final Event e_ = new Event[{Q→;Q←}](nuid, ntimeLbl, ninfoLbl, nstartTime, nendTime, nremote1);
//
//			final Event[{Q→;Q←}]{Q→;Q←} e = declassify(e_, {P→;Q→;P←⊓Q←} to {Q→;Q←});
//			return e;
          return null;
          // TODO
      }
      
      public static Event[{P←}]{P←} declassifyEvent{P←}(
    		  principal{P→;P←} P,
    		  Event[{P→;P←}]{P→;P←} event_)
    		  where caller(P),
    		  authority(CalServEP),
    		  endorse({P←⊓CalServEP←}) {
//    	  final Event[{P→;P←}] event = endorse(declassify(event_, {P→;P←} to {P←}), {P←} to {P←⊓CalServEP←});
//    	  if(event == null || event.uid == null) return null;
//			final label ntimeLbl = declassify(event.timeLbl, {P→;P←} to {P←});
//			final label ninfoLbl = declassify(event.infoLbl, {P→;P←} to {P←});
//			Event$1[event.infoLbl] e1r = event.remote1;
//			Event$1[ninfoLbl] nremote1 = declassify(e1r, {P→;P←} to {P←});
//			Date[event.timeLbl] e1s = event.startTime;
//			Date[event.timeLbl] e1e = event.endTime;
//			Date[ntimeLbl] nstartTime = declassify(e1s, {P→;P←} to {P←});
//			Date[ntimeLbl] nendTime = declassify(e1e, {P→;P←} to {P←});
//			
//			final int nuid_ = endorse(event.uid.uid, {P→;P←;CalServEP→;CalServEP←} to {P→;CalServEP→;P←⊓CalServEP←});
//			final int nuid = declassify(nuid_, {P→;CalServEP→;P←⊓CalServEP←} to {P←;CalServEP→;CalServEP←});
//
//			final Event e_ = new Event[{P←}](nuid, ntimeLbl, ninfoLbl, nstartTime, nendTime, nremote1);
//
//			final Event[{P←}]{P←} e = declassify(e_, {P→;P←} to {P←});
//			return e;
          return null;
          // TODO
      }
              
      
}
