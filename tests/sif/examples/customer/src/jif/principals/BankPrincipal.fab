package jif.principals;

import fabric.util.Map;
import travel.Config;
import fabric.client.Core;

public class BankPrincipal extends ExternalPrincipal {
  public BankPrincipal() {
    super("customer");
  }
  
  public static BankPrincipal{*!:} getInstance{*!:}() {
    atomic {
      FabricClient cl = FabricClient.getClient();
      if (cl != null) {
        final Core brokerCore = cl.getCore(Config.brokerCoreName);
        if (brokerCore != null) {
          Map rootMap = brokerCore.getRoot();
          if (rootMap != null) {
            Object obj = rootMap.get(Config.bankPrincipalMapKey);
            BankPrincipal bankPrincipal = null;
            if (obj instanceof BankPrincipal) {
              bankPrincipal = (BankPrincipal) obj;
            } else {
              bankPrincipal = new BankPrincipal@brokerCore();
              rootMap.put(Config.bankPrincipalMapKey, bankPrincipal);
            }
            
            return bankPrincipal;
          }
        }
      }
      
      return null;
    }
  }
  
  // Don't much care what core is, we're going to create it where we want
  public static BankPrincipal{*!:} getInstance{*!:}(Core core) {
      return getInstance();
  }
}
