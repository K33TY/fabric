package customer;

import travel.Config;
import travel.Broker;
import fabric.util.Map;
import sif.servlet.Servlet;
import sif.servlet.Request;
import sif.servlet.SessionState;
import sif.servlet.SessionPrincipal;

import javax.servlet.ServletException;

public final class CustomerMain extends Servlet[CustomerPrincipal] {
  final Core{this} localCore;
  final Core{this} brokercore;
  final principal{this} broker;
  
  public CustomerMain() throws ServletException {
    FabricWorker cl = FabricWorker.getWorker();
    Core lCore = null;
    AbstractPrincipal customerPrincipal = null;
    if (cl != null) {
      lCore = cl.getLocalCore();
    }
    localCore = lCore;
    brokercore = worker$.getCore(Config.brokerCoreName);

    Map root = null;
    if (brokercore != null) {
        root = (Map) brokercore.getRoot();
    }
    if (root != null) {
        Broker[BankPrincipal, CustomerPrincipal] brokerInit = null;
        Object obj = root.get(Config.brokerMapKey);
        if (obj instanceof Broker[BankPrincipal, CustomerPrincipal]) {
            brokerInit =
                (Broker[BankPrincipal, CustomerPrincipal])obj;
    }
    broker = brokerInit;
    } else {
        broker = null;
    }
    
  }
    
  public void initialize{CustomerPrincipal:;CustomerPrincipal!:}()
      throws ServletException {
      addStartAction(new FrontPage(this));
  }

  public String getPrivateHostID() throws ServletException {
    return "";
  }

  protected String defaultActionName(Request[CustomerPrincipal] req) {
    return "frontpage";
  }
  
  // TODO Provide default implementations for these 2 methods in Servlet.fab:
  // This method will only be called by the runtime
  protected SessionState[lbl]{*lbl} createSessionState{*lbl}(label{*lbl} lbl,
      String{*lbl} id, SessionPrincipal{*lbl} session) {
    SessionState[lbl] toReturn = null;
    atomic {
      if (localCore != null && localCore equiv worker$ &&
	  lbl <= new label {⊤→worker$} && new label {⊤←worker$} <= lbl) {
	toReturn = new SessionState[lbl]@localCore(id, session);
      }
    }
    return toReturn;
  }
  
  // This method will only be called by the runtime
  protected SessionPrincipal createSessionPrincipal(String{broker→;broker←} id) {
    SessionPrincipal toReturn = null;
    atomic {
      if (brokercore != null && brokercore equiv broker) {
	toReturn = new SessionPrincipal@brokercore(id);
      }
    }
    return toReturn;
  }
  
  
}

