package travel;

import java.io.PrintStream;
import fabric.util.Map;
import jif.runtime.Runtime;

public class Main {
    public static boolean{BankPrincipal→AirlinePrincipal; BankPrincipal→CustomerPrincipal;broker←;BankPrincipal←;AirlinePrincipal←;CustomerPrincipal←}
      startTxImpl{CustomerPrincipal←; BankPrincipal←}(
            float{BankPrincipal→AirlinePrincipal ⊓ BankPrincipal→CustomerPrincipal; CustomerPrincipal←; BankPrincipal←} amount,
            Broker[BankPrincipal, CustomerPrincipal]{CustomerPrincipal←; BankPrincipal←} broker)
    where   broker actsfor BankPrincipal,
            broker actsfor broker.airline,
            broker.airlineAcct.user equiv AirlinePrincipal,
            broker.customerAcct.user equiv CustomerPrincipal,
            broker.airline equiv AirlinePrincipal
    {
        Core core = client$.getCore(Config.brokerCoreName);
        Map root = null;
        if (core != null) {
            root = (Map) core.getRoot();
        }

        if (root == null) return false;

        atomic {
            try {
                if (broker != null) {
                    broker.coordinatePurchase(amount);
                    return true;
                }
            } catch (PurchasingError e) {}
        }
          
        return false;
    }
      
      public static boolean{BankPrincipal→AirlinePrincipal; BankPrincipal→CustomerPrincipal;broker←;BankPrincipal←;AirlinePrincipal←;CustomerPrincipal←}
      startTx{CustomerPrincipal←}(
            float{BankPrincipal→AirlinePrincipal ⊓ BankPrincipal→CustomerPrincipal; CustomerPrincipal←} amount,
            Broker[BankPrincipal, CustomerPrincipal]{CustomerPrincipal←} broker)  {
          if (broker != null 
                  && broker actsfor BankPrincipal 
                  && broker actsfor broker.airline
                  && broker.airlineAcct != null
                  && broker.airlineAcct.user equiv AirlinePrincipal
                  && broker.customerAcct != null
                  && broker.customerAcct.user equiv CustomerPrincipal
                  && broker.airline equiv AirlinePrincipal
                  && broker actsfor CustomerPrincipal) {
              return startTxImpl(amount, broker);
          }
          return false;
      }
    
}
