package travel;

import java.io.PrintStream;
import fabric.util.Map;
import jif.runtime.Runtime;

public class Main {
    public static boolean{BankPrincipal→AirlinePrincipal; BankPrincipal→CustomerPrincipal;broker←;BankPrincipal←;AirlinePrincipal←;CustomerPrincipal←}
      startTxImpl{CustomerPrincipal←; BankPrincipal←}(
            float{BankPrincipal→AirlinePrincipal ⊓ BankPrincipal→CustomerPrincipal; CustomerPrincipal←; BankPrincipal←} amount,
            Broker[BankPrincipal, CustomerPrincipal]{CustomerPrincipal←; BankPrincipal←} broker)
    where   broker actsfor BankPrincipal,
            broker actsfor broker.airline,
            broker.airlineAcct.user equiv AirlinePrincipal,
            broker.customerAcct.user equiv CustomerPrincipal,
            broker.airline equiv AirlinePrincipal
    {
        boolean returnBool = false;
        Core core = client$.getCore(Config.brokerCoreName);
        Map root = null;
        if (core != null) {
            root = (Map) core.getRoot();
        }

        if (root == null) returnBool = false;

        atomic {
            try {
                if (broker != null) {
                    broker.coordinatePurchase(amount);
                    returnBool = true;
                }
            } catch (PurchasingError e) {returnBool = false;}
        }
          
        return returnBool;
    }
      
      public static LabeledBoolean
      startTx{CustomerPrincipal←}(
            float{BankPrincipal→AirlinePrincipal ⊓ BankPrincipal→CustomerPrincipal; CustomerPrincipal←} amount)  {
          Core core = client$.getCore(Config.brokerCoreName);
          Map root = null;
          if (core != null) {
              root = (Map) core.getRoot();
          }

          if (root == null) return null;
          Broker[BankPrincipal, CustomerPrincipal] brokerInit = null;
          Object obj = root.get(Config.brokerMapKey);
          if (obj instanceof Broker[BankPrincipal, CustomerPrincipal]) {
              brokerInit =
                  (Broker[BankPrincipal, CustomerPrincipal])obj;
          }
          final Broker[BankPrincipal, CustomerPrincipal] broker = brokerInit;
          final label ll = new label 
                  {BankPrincipal→AirlinePrincipal; BankPrincipal→CustomerPrincipal;broker←;BankPrincipal←;AirlinePrincipal←;CustomerPrincipal←}; 
          boolean returnBool = false;
          
          if (broker != null 
                  && broker actsfor BankPrincipal 
                  && broker actsfor broker.airline
                  && broker.airlineAcct != null
                  && broker.airlineAcct.user equiv AirlinePrincipal
                  && broker.customerAcct != null
                  && broker.customerAcct.user equiv CustomerPrincipal
                  && broker.airline equiv AirlinePrincipal
                  && broker actsfor CustomerPrincipal) {
              returnBool = startTxImpl(amount, broker);
          } else {
              returnBool = false;
          }
          return new LabeledBoolean(ll, returnBool);
      }
    
}
