package calendar;

import fabricated.util.Date;
import fabricated.util.List;
import sif.servlet.*;
import userserv.*;
import sif.html.Page;

import javax.servlet.ServletException;

public final class Main extends UServlet[CalServEP] authority (CalServEP, worker$) {

    final CalendarDB{this} cal;
	final Store{this} localStore;
	
	final String{this} storeName = "gaia.systems.cs.cornell.edu";

	public Main{CalServEP,worker$→;CalServEP&worker$←}()
	    where authority(worker$, CalServEP)
	{
	    // create the necessary trust bonds
        FabricWorker cl = FabricWorker.getWorker();
        CalendarDB local = null;
        Store lStore = null;
        if(cl != null) {
            lStore = cl.getLocalStore();
            final Store remote = cl.getStore(storeName);
            final Store lStoreFinal = lStore;
            try {
                final DelegatingPrincipal worker = (DelegatingPrincipal)cl.getPrincipal();
                final DelegatingPrincipal servp = (DelegatingPrincipal)CalServEP;
                final DelegatingPrincipal remotep = (DelegatingPrincipal)remote.getPrincipal();
                atomic {
                    if (worker equiv worker$ && servp equiv CalServEP) {
                        worker.addDelegatesTo(servp);
                        servp.addDelegatesTo(worker);
                        
                        // Making remote actfor CalServEP
                        // TODO Revisit this relationship
                        servp.addDelegatesTo(remotep);
                    }
                }
            } catch (NullPointerException unlikely) {}
              catch (ClassCastException unlikely) {}
              
	        atomic {
	            if(remote != null && remote actsfor CalServEP) {
	                // would be nice if the instance of CalendarDB were on local store
	                local =  new CalendarDB@remote(lStoreFinal, remote);
	            } 
	        } 
        }
	    localStore = lStore;
	    cal = local;
		super();
	}

	public void initialize{CalServEP:;CalServEP!:}() throws ServletException {
		//!@! ADD THIS BACK IN, AND REMOVE FOLLOWING LINE super.initialize();
		addStartAction(new LogoffAction[CalServEP](this));

		if (cal != null)
			cal.initialize();
		addStartAction(new ShowCalendar(this));
	}

    // This method will only be called by the runtime
    protected SessionState[lbl]{*lbl} createSessionState{*lbl}(label{*lbl} lbl,
            String{*lbl} id, SessionPrincipal{*lbl} session) {
        SessionState[lbl] toReturn = null;
        atomic {
            if (localStore != null && localStore equiv worker$ &&
                    lbl <= new label {⊤→worker$} && 
                    new label {⊤←worker$} <= lbl) {
                toReturn = new CalendarSessionState[lbl]@localStore(id, session);
            }
        }
        return toReturn;
    }
    
    // This method will only be called by the runtime
    protected SessionPrincipal createSessionPrincipal(String{worker$→;worker$←} id) {
        SessionPrincipal toReturn = null;
        atomic {
            if (localStore != null && localStore equiv worker$) {
                toReturn = new SessionPrincipal@localStore(id);
            }
        }
        return toReturn;
    }
        
    
	protected String defaultActionName(Request[CalServEP] req) {
		return "show";
	}

	public String getPrivateHostID() throws ServletException {
		return "";
	}


	// DOWNGRADE REASON: transfer User from CalServEP to p &&& access control
	public User[CalServEP, {p:; p!:}]{p:; p!:} lookupUserID{p:; p!:}(String{p:; p!:} userID, principal{p:; p!:} p) 
	where authority (CalServEP), caller(p), endorse({p:; p!: meet CalServEP!:}) {
	    String{p→;CalServEP← ⊓ p←} userID_ = endorse(userID, {p:; p!:} to {p→;CalServEP← ⊓ p←});
	    String{CalServEP→;CalServEP←} userID__ = declassify(userID_, {p→;CalServEP← ⊓ p←} to {CalServEP→;CalServEP←});
		User[CalServEP, {CalServEP→;CalServEP←}] u = null;
		if(cal!=null) {
		    declassify({CalServEP→;CalServEP←}) {
		        u = cal.lookupUserID(userID__);
		    }
		}
		User[CalServEP, {p→;p←}] u2 = User.handOverUser(CalServEP, p, u);
		return u2;
	}

	// DOWNGRADE REASON: Hide the side effect at level CalServEP!:, and endorse the PC
	// (i.e., the CalServEP has no trouble handing out fresh user ids to whoever asks)
	// &&& access control
	private int{CalServEP:;CalServEP!:} getFreshUid{p:;p!:}(principal p) 
	where authority (CalServEP), caller(p), endorse({p:;p!: meet CalServEP!:}) {
		declassify ({CalServEP:;p!: meet CalServEP!:}) {
			if (cal != null) return cal.getFreshUid();
			return -1;
		}
	}
	/**
	 * Returns a new Event, filled out with default values.
	 */
	Event[{currUser!:}]{currUser!:} defaultEvent{currUser!:}(User[CalServEP, {currUser!:}]{currUser!:} currUser) 
	where authority(CalServEP),
	caller(currUser) {
//        try {
	    
	    if (localStore == null) return null;
	    if(localStore actsfor currUser && localStore equiv CalServEP) {
		Date[{currUser!:}] now = new Date[{currUser!:}]@localStore();
		int uid = this.getFreshUid(currUser);

		return new Event[{currUser!:}]@localStore(uid, 
				new label {currUser!:}, 
				new label {currUser:;currUser!:}, // default info label only readable by currUser
				now,
				now,
				"",
				"",
				new fabricated.util.LinkedList[{CalServEP:;CalServEP!:}]@localStore(),
				new fabricated.util.LinkedList[{CalServEP:;CalServEP!:}]@localStore(),
				currUser);
	    } else {
	        return null;
	    }
//	    } catch (NullPointerException ex) { return null; }
	}

	void updateEventInCalendar{p→;p←}(principal{p→;p←} p, Request[CalServEP]{p→;p←} req, Event[{p→;p←}]{p→;p←} ueicEvent) 
	    where {p←} <= ueicEvent.infoLbl,
	    caller(p), authority(CalServEP), endorse({p→;p← meet CalServEP←})
	{
		if (cal != null) {

			// sanitize the event to prevent SQL attacks
		    
		    // TODO : Check if the following two lines are necessary
//			final Event e = endorse(sanitizeEvent(p, declassify(ueicEvent, {p←})), {p→;p← meet CalServEP←});
//			if(e == null) return;
			// DOWNGRADE REASON: handover ueicEvent from p to CalServEP
			declassify ({p← meet CalServEP←}) {
//				final label ntimeLbl = endorse(e.timeLbl, {p→;CalServEP→;CalServEP←; p←} to {p→;CalServEP→;p← meet CalServEP←});
//				final label ninfoLbl = endorse(e.infoLbl, {p→;CalServEP→;CalServEP←; p←} to {p→;CalServEP→;p← meet CalServEP←});
//				Event$1[e.infoLbl] e1r = e.remote1;
//				Event$1[ninfoLbl] nremote1 = endorse(e1r, {p→;CalServEP→;CalServEP←; p←} to {p→;CalServEP→;p← meet CalServEP←});
//				Date[e.timeLbl] e1s = e.startTime;
//				Date[e.timeLbl] e1e = e.endTime;
//				Date[ntimeLbl] nstartTime = endorse(e1s, {p→;CalServEP→;CalServEP←; p←} to {p→;CalServEP→;p← meet CalServEP←});
//				Date[ntimeLbl] nendTime = endorse(e1e, {p→;CalServEP→;CalServEP←; p←} to {p→;CalServEP→;p← meet CalServEP←});
//
//				final Event e1_ = new Event[{p→;CalServEP→;p← meet CalServEP←}](
//							endorse(e.uid, {p→;CalServEP→;CalServEP←; p←} to {p→;CalServEP→;p← meet CalServEP←}),
//							ntimeLbl,
//							ninfoLbl,
//							nstartTime,
//							nendTime,
//							nremote1
//					);
//
//				final Event[{p→;CalServEP→;p← meet CalServEP←}] e1 = 
//					endorse(e1_, {p→;CalServEP→;CalServEP←; p←} to {p→;CalServEP→;p← meet CalServEP←});
//				
//				int muid_ = endorse(e1.uid, {p→;CalServEP→;CalServEP←} to {p→;CalServEP→;p← meet CalServEP←});
//				int muid = declassify(muid_, {p→;CalServEP→;p← meet CalServEP←} to {CalServEP→; CalServEP←});
//
//				final label mtimeLbl = declassify(e1.timeLbl, {p→;CalServEP→;p← meet CalServEP←} to {CalServEP→; CalServEP←});
//				final label minfoLbl = declassify(e1.infoLbl, {p→;CalServEP→;p← meet CalServEP←} to {CalServEP→; CalServEP←});
//				Event$1[e1.infoLbl] e2r = e1.remote1;
//				Event$1[minfoLbl] mremote1 = declassify(e2r, {p→;CalServEP→;p← meet CalServEP←} to {CalServEP→; CalServEP←});
//				Date[e1.timeLbl] e2s = e1.startTime;
//				Date[e1.timeLbl] e2e = e1.endTime;
//				Date[mtimeLbl] mstartTime = declassify(e2s, {p→;CalServEP→;p← meet CalServEP←} to {CalServEP→; CalServEP←});
//				Date[mtimeLbl] mendTime = declassify(e2s, {p→;CalServEP→;p← meet CalServEP←} to {CalServEP→; CalServEP←});
//				Event[{CalServEP→; CalServEP←}] e2_ =
//					new Event[{CalServEP→; CalServEP←}](
//							muid,
//							mtimeLbl,
//							minfoLbl,
//							mstartTime,
//							mendTime,
//							mremote1
//					);
//				final Event e2 = declassify(e2_, {p→;CalServEP→;p← meet CalServEP←} to {CalServEP→; CalServEP←});
				
			    // TODO handOverEvent will also take a store as an argument and move the event from
			    // localStore to this store
				Event e2 = CalServDeclassifier.handOverEvent(p, CalServEP, ueicEvent);
				cal.updateEvent(e2);
			}
		}
	}
	
	/**
	 * Get the event identified by the id
	 */
	Event[{p→;p←}]{p:;p!:}
	retrieveEvent{p:;p!:}(principal{p!:;p:} p, int{p!:;p:} eventID)
	where caller(p), authority(CalServEP), endorse({p:;p!: meet CalServEP!:}) {
		declassify ({p!: meet CalServEP!:}) {
			int{CalServEP:; p!:} eid1 = declassify(eventID, {p:; p!:} to {CalServEP:; p!:});
			int{CalServEP:; CalServEP!:} eid2 = endorse(eid1, {CalServEP:; p!:} to {CalServEP:; CalServEP!:});

			Event e = cal==null?null:cal.retrieveEvent(eid2);

//			Event e1 = endorse(e, {CalServEP:;CalServEP!:;eventID; p} to {p:;CalServEP:;CalServEP!: meet p!:});
//			Event e2 = declassify(e1,{CalServEP:;p:;CalServEP!: meet p!:} to {p:;CalServEP!: meet p!:});
			Event e2 = CalServDeclassifier.handOverEvent(CalServEP, p, e);
			return e2;
		}
	}

	// TODO: Tentative where clause, not sure if it holds at runtime
	Event[{p←}]{p←} sanitizeEvent{p←}(principal{p←} p, Event[{p←}]{p←} e)
	    where {p←} <= e.infoLbl 
	{
		if (e == null || cal == null || e.remote1 == null || e.uid == null || localStore == null) {
			return e;
		}
		String name = cal.escapeString(e.remote1.name);
		String note = cal.escapeString(e.remote1.note);

//		try {
		if (localStore actsfor p) {
		// need to construct a new event...
		return new Event[{p←}]@localStore(e.uid.uid,
				e.timeLbl,
				e.infoLbl,
				e.startTime,
				e.endTime,
				name,
				note,
				e.remote1.attendees,
				e.remote1.viewers,
				e.remote1.creator);
		} else {
		    return null;
		}
//		} catch (NullPointerException ex) { return e; }
	}

	/**
	 * Get the subset of events that start on or after dt, and before end.
	 */
	List[{CalServEP:;CalServEP!:}]{p!:} 
	eventSubset{p!:}(principal{p!:} p,
			Date[{p!:}]{p!:} start, 
			Date[{p!:}]{p!:} end,
			User[CalServEP, {p!:}]{p!:} displayUser)
			where caller(p), authority(CalServEP), endorse({p!: meet CalServEP!:}) {
		// DOWNGRADE REASON: need to convert a Date[{p!:}] to a Date[{CalServEP:;CalServEP!:}], then transfer ownership of usr, then get the result, and transfer it back to p
		Date[{CalServEP:;CalServEP!:}] startDate = CalServDeclassifier.declassDate(p, CalServEP, start);
		Date[{CalServEP:;CalServEP!:}] endDate = CalServDeclassifier.declassDate(p, CalServEP, end);

		User[CalServEP, {CalServEP!:}]{CalServEP!:} us1 = User.handOverUserInteg(CalServEP, p, displayUser); 

		List[{CalServEP:;CalServEP!:}] subset = cal==null?null:cal.eventSubset(startDate, endDate, us1);

		List[{CalServEP:;CalServEP!:}] subset1 = endorse(subset, {CalServEP:;CalServEP!:;p!:} to {CalServEP:;CalServEP!: meet p!:});
		List[{CalServEP:;CalServEP!:}] subset2 = declassify(subset1,{CalServEP:;CalServEP!: meet p!:} to {CalServEP!: meet p!:});
		return subset2;
	}

	boolean{p:; p!:} compareDates{p:; p!:}(
			principal{p:; p!:} p,
			Date[{CalRootEP:; p!:}]{p:; p!:} c,
			Date[{CalRootEP:; p!:}]{p:; p!:} d) 
			where caller(p),
			CalRootEP actsfor p {
		return cal != null && cal.compareDates(p, c, d); 
	}
}

