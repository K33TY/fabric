package calendar;

import javax.servlet.ServletException;

import sif.servlet.*;
import sif.html.*;
import userserv.*;
import fabricated.util.Date;
import fabricated.util.List;

/**
 * A reusable Action for either creating, editing, or viewing events.
 */
public class CreateEditEvent extends USessAction[CalServEP] authority (CalServEP, CalRootEP) {
    /**
     * Is the action being used to show a read-only event?
     */
    final private boolean{this} isReadOnly;
    /**
     * Is the action being used to create an event?
     */
    final private boolean{this} isCreate;
    
    /**
     * The event being viewed/edited/created
     */
    final label{this} evLbl;
    final Event[this.evLbl]{this} event;
    
    /**
     * The object to hand the event off to after editing/creating successfully
     * completed
     */
    final private FinishEditEventReceiver{this} finishEditEventReceiver;
    
    /**
     * The action to return to when the user cancels (this is the normal action
     * for a read only event).
     */
    final private UAction[CalServEP]{this} cancelAction;

    /*
     * Inputs for editing/creating an event.
     */
    final Input[CalServEP]{this} inpName; 
    final Input[CalServEP]{this} inpStart;
    final Input[CalServEP]{this} inpEnd;
    final Input[CalServEP]{this} inpNote;
    
    public CreateEditEvent(Main{this} servlet,
                           principal{this} session,
                           FinishEditEventReceiver{this} finishEditEventReceiver, 
                           UAction[CalServEP]{this} cancelAction,
                           label{this} evLbl,
                           Event[evLbl]{this} event,
                           boolean{this} isReadOnly,
                           boolean{this} isCreate) 
        where evLbl <= {this}
    {
        this.finishEditEventReceiver = finishEditEventReceiver;
        this.cancelAction = cancelAction;
        this.evLbl = evLbl;
        this.event = event;
        this.isReadOnly = isReadOnly;
        this.isCreate = isCreate;

        Input[CalServEP] iName = null;
        Input[CalServEP] iStart = null;
        Input[CalServEP] iEnd = null;
        Input[CalServEP] iNote = null;

        if (event != null) {
            iName = new Input[CalServEP](servlet, event.infoLbl);
            iStart = new Input[CalServEP](servlet, event.timeLbl);
            iEnd = new Input[CalServEP](servlet, event.timeLbl);
            iNote = new Input[CalServEP](servlet, event.infoLbl);
        }
        
        this.inpName = iName;
        this.inpStart = iStart;
        this.inpEnd = iEnd;
        this.inpNote = iNote;

        super(servlet, session);        

    }

    public Event[evLbl]{this} getEvent() {
        return event;
    }

    public void invokeSessImpl{*lbl;session!:}(label{*lbl;session!:} lbl,
            Request[CalServEP]{*lbl;session!:} req,
            UServlet[CalServEP]{*lbl;session!:} uservlet,
            USessState[CalServEP,{*lbl;session!:}]{*lbl;session!:} ustate,
            User[CalServEP,{*lbl;session!:}]{*lbl;session!:} currentUser) 
    throws (ServletException{*lbl;session!:})
        where session equiv req.session, 
              session equiv ustate.remote.sessionPrincipal,
              session actsfor currentUser,
              lbl <= {*:req.session},
              caller(session)
    {
        if(evLbl <= new label {*lbl;session!:}) {
            invokeSessImplImpl(lbl, req, uservlet, ustate, currentUser);
        }
    }
    
    public void invokeSessImplImpl{*lbl;session!:}(label{*lbl;session!:} lbl,
            Request[CalServEP]{*lbl;session!:} req,
            UServlet[CalServEP]{*lbl;session!:} uservlet,
            USessState[CalServEP,{*lbl;session!:}]{*lbl;session!:} ustate,
            User[CalServEP,{*lbl;session!:}]{*lbl;session!:} currentUser) 
    throws (ServletException{*lbl;session!:})
        where session equiv req.session, 
              session equiv ustate.remote.sessionPrincipal,
              session actsfor currentUser,
              evLbl <= {*lbl;session!:},
              lbl <= {*:req.session},
              caller(session)
  {
        if (req == null || uservlet == null || ustate == null || 
                event == null || !(uservlet instanceof Main) || 
                !(ustate instanceof CalendarSessionState[{*lbl;session!:}]))
            throw new ServletException("invalid args");

        final Main servlet = (Main)uservlet;
        CalendarSessionState state_ = null;
        try {
            state_ = (CalendarSessionState)ustate;
        } catch (ClassCastException imposs) {}
        final CalendarSessionState state = state_;
        if(state == null || state.remote == null) {
            throw new ServletException("invalid args");
        }
        if (isReadOnly) {
            if (event.infoLbl <= new label {*:req.session} && event.infoLbl <= new label {CalRootEP:} &&
                    new label {CalRootEP!:} <= event.infoLbl && event.timeLbl <= event.infoLbl &&
                    lbl <= new label {CalRootEP:} && state.remote.sessionPrincipal equiv session && CalRootEP actsfor currentUser) {  
                produceReadOnlyPage(new label {*lbl; currentUser!:}, req, servlet, state, currentUser);
            }
//            else {
//                String lblString = null;
//                lblString = LabelUtil.toString(lbl);
//                throw new ServletException("Cannot view event! CreateEditEvent.invokeSessImpl: lbl too high: " + lblString);
//            }
        }
        else if(evLbl <= new label {currentUser:;currentUser!:} && lbl <= new label {currentUser:;currentUser!:}) {
            declassify ({currentUser:;currentUser!:} to {currentUser!:}) {
            
            final Event event_ = Event.declassifyEvent(currentUser, this.event);
            if(event_ != null) 
            if (inpName != null && inpStart != null && inpEnd != null && inpNote != null) {
                if (event_.infoLbl <= new label {currentUser:;currentUser!:} &&
                        new label {currentUser!:} <= event_.timeLbl && event_.timeLbl <= event_.infoLbl && 
                        event_.infoLbl <= inpName.inputLbl && event_.timeLbl <= inpStart.inputLbl && 
                        event_.timeLbl <= inpEnd.inputLbl && event_.infoLbl <= inpNote.inputLbl && 
                        CalRootEP actsfor currentUser) {
                    // DOWNGRADE REASON: get lbl down from {currentUser:;currentUser!:} to {currentUser!:}.
                    // i.e., currentUser is prepared to declassify the info flow of being able to edit the event
                    // Where is the difference coming from?!?!
                    declassify ({currentUser:;currentUser!:} to {currentUser!:}) {
                        final User[CalServEP, {currentUser:;currentUser!:}] currentUser_ = declassify(currentUser, {currentUser:;currentUser!:} to {currentUser!:});
                        final User[CalServEP, {currentUser!:}] cu_ = User.declassifyUser(currentUser_, CalServEP, currentUser_);  
                        final principal cu = cu_;
                        if(cu equiv currentUser) {
                            declassify ({currentUser:;currentUser!:} to {currentUser!:}) {
                            CalendarSessionState state2 = declassify(state, {currentUser:;currentUser!:} to {currentUser!:});
                            final CalendarSessionState[{cu!:}] state1 = CalendarSessionState.declassifyState(currentUser, state2);
                            if(state1 != null && state1.remote != null) 
                            
                            if(session equiv state1.remote.sessionPrincipal && cu_ equiv currentUser) {
                                declassify ({currentUser:;currentUser!:} to {currentUser!:}) {

                                    produceEditPage(new label {cu!:}, 
                                            declassify(req, {currentUser:;currentUser!:} to {currentUser!:}),     
                                            declassify(servlet, {currentUser:;currentUser!:} to {currentUser!:}),
                                            state1,
                                            cu_,
                                            null,
                                            null,
                                            null,
                                            event_);
                                }
                            }
                            }
                        }
                        
                    }
                }
//                else {
//                    String lblString = null;
//                    lblString = LabelUtil.toString(lbl);
//                    throw new ServletException("Cannot edit event! CreateEditEvent.invokeSessImpl: lbl too high: " + lblString);
//                }
            }
            }
        }
    }

    protected boolean{*lbl; this} produceEditPage{*lbl}(label{*lbl} lbl, 
            Request[CalServEP]{*lbl} req,
            Main{*lbl} servlet,
            CalendarSessionState[lbl]{*lbl} state,
            User[CalServEP,lbl]{*lbl} currentUser,
            String{*thisEvent.infoLbl;*lbl} nameErr,
            String{*thisEvent.timeLbl;*lbl} startErr,
            String{*thisEvent.timeLbl;*lbl} endErr,
            Event[{*lbl;this}]{*lbl;this} thisEvent)
        where session equiv req.session, 
              session equiv state.remote.sessionPrincipal,
              req.session actsfor currentUser,
              {currentUser!:} equiv {*lbl},
              lbl <= thisEvent.timeLbl, 
              thisEvent.infoLbl <= {currentUser:;currentUser!:},
              {currentUser!:} <= thisEvent.timeLbl, 
              thisEvent.timeLbl <= thisEvent.infoLbl,
              thisEvent.infoLbl <= inpName.inputLbl,
              thisEvent.timeLbl <= inpStart.inputLbl,
              thisEvent.timeLbl <= inpEnd.inputLbl,
              thisEvent.infoLbl <= inpNote.inputLbl,
              CalRootEP actsfor currentUser,
              caller(req.session),
              authority (CalServEP)
    {
        Node[lbl,lbl] hrule = new HRule[lbl,lbl]();

        if (req == null || servlet == null || state == null || 
                thisEvent == null || thisEvent.remote1 == null || inpName == null || inpStart == null || inpEnd == null || inpNote == null) return false;
        
        SelectUsersAction[CalServEP] editAttendees = 
            new SelectUsersAction[CalServEP](false, servlet, session,
                                                  currentUser,
                                                  this,
                                                  this, 
                                                  thisEvent.remote1.attendees, 
                                                  "Please enter the user ids of the event attendees.",
                                                  thisEvent.infoLbl);
        
        SelectUsersAction[CalServEP] editViewers = 
            new SelectUsersAction[CalServEP](false, servlet, session,
                                                  currentUser,
                                                  this,
                                                  this, 
                                                  thisEvent.remote1.viewers, 
                                                  "Please enter the user ids of users who can view the event time.",
                                                  thisEvent.infoLbl);
        
        
        
        String defaultName = defaultValue(lbl, thisEvent.infoLbl, req, thisEvent.remote1.name, this.inpName);        
        String defaultNote = defaultValue(lbl, thisEvent.infoLbl, req, thisEvent.remote1.note, this.inpNote);        
        String defaultStart = defaultValue(lbl, thisEvent.timeLbl, req, DateUtil.dateToString(thisEvent.timeLbl, thisEvent.startTime, false), this.inpStart);      
        String defaultEnd = defaultValue(lbl, thisEvent.timeLbl, req, DateUtil.dateToString(thisEvent.timeLbl, thisEvent.endTime, false), this.inpEnd);      
                
        InputNode[CalServEP, thisEvent.infoLbl, lbl] inpNameNode = new TextInput[CalServEP, 
                                    {*thisEvent.infoLbl;currentUser!:},lbl](inpName, 40, defaultName);
        InputNode[CalServEP, thisEvent.infoLbl, lbl] inpNoteNode = new TextArea[CalServEP, 
                                   {*thisEvent.infoLbl;currentUser!:},lbl](inpNote, 3, 40, defaultNote);
        InputNode[CalServEP, thisEvent.timeLbl, lbl] inpStartNode = new TextInput[CalServEP, 
                                     {*thisEvent.timeLbl;currentUser!:},lbl](inpStart, 40, defaultStart);
        InputNode[CalServEP, thisEvent.timeLbl, lbl] inpEndNode = new TextInput[CalServEP, 
                                   {*thisEvent.timeLbl;currentUser!:},lbl](inpEnd, 40, defaultEnd);
       
        NodeList[thisEvent.infoLbl,lbl]{*lbl} entries = NodeList[thisEvent.infoLbl,lbl].EMPTY();
        entries = new NodeList[thisEvent.infoLbl,lbl](thisEvent.infoLbl, lbl, new TRow[thisEvent.infoLbl,lbl](new NodeList[thisEvent.infoLbl,lbl](lbl, lbl, desc(lbl, "thisEvent:"),
                thisEvent.infoLbl, lbl, editData(thisEvent.infoLbl, lbl, inpNameNode, nameErr))));
        entries = entries==null?null:entries.append(thisEvent.timeLbl,lbl, new TRow[thisEvent.timeLbl,lbl](
                new NodeList[thisEvent.timeLbl,lbl](lbl, lbl, desc(lbl, "Start:"),
                        thisEvent.timeLbl, lbl, editData(thisEvent.timeLbl, lbl, inpStartNode, startErr))));
        entries = entries==null?null:entries.append(thisEvent.timeLbl, lbl, new TRow[thisEvent.timeLbl,lbl](new NodeList[thisEvent.timeLbl,lbl](lbl, lbl, desc(lbl, "End:"),
                        thisEvent.timeLbl, lbl, editData(thisEvent.timeLbl, lbl, inpEndNode, endErr))));
        
        // DOWNGRADE REASON (not counted): Hand over from CalServEP to currentUser.
        String creatorName = CalServDeclassifier.declassUserDisplayString(thisEvent.infoLbl, currentUser, thisEvent.remote1.creator);
        
        entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
        
        entries = entries==null?null:entries.append(new TRow[thisEvent.infoLbl,lbl](new NodeList[thisEvent.infoLbl,lbl](lbl, lbl, desc(lbl, "Creator:"),
                thisEvent.infoLbl, lbl, desc(thisEvent.infoLbl, lbl, creatorName))));
        
        // output the attendees information
        entries = entries==null?null:entries.append(new TRow[thisEvent.infoLbl,lbl](new NodeList[thisEvent.infoLbl,lbl](lbl, lbl, desc(lbl, "Attendees:"),
                thisEvent.infoLbl, lbl, desc(thisEvent.infoLbl, lbl, userListToNode(thisEvent.infoLbl, lbl, req, thisEvent.remote1.attendees)))));
        entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new NodeList[lbl,lbl](desc(lbl, ""),
                desc(lbl, new Hyperlink[CalServEP, lbl,lbl](editAttendees, "Edit attendees")))));
        entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
        
        // output the viewers information.
        entries = entries==null?null:entries.append(new TRow[thisEvent.infoLbl,lbl](new NodeList[thisEvent.infoLbl,lbl](lbl, lbl, desc(lbl, "Viewers:"),
                thisEvent.infoLbl, lbl, desc(thisEvent.infoLbl, lbl, userListToNode(thisEvent.infoLbl, lbl, req, thisEvent.remote1.viewers)))));
        entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new NodeList[lbl,lbl](desc(lbl, ""),
                desc(lbl, new Hyperlink[CalServEP, lbl,lbl](editViewers, "Edit viewers")))));
        
        entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
        
        // output the note.
        entries = entries==null?null:entries.append(new TRow[thisEvent.infoLbl,lbl](new NodeList[thisEvent.infoLbl,lbl](lbl, lbl, desc(lbl, "Note:"),
                thisEvent.infoLbl, lbl, editData(thisEvent.infoLbl, lbl, inpNoteNode, null))));
        
        entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
                        
        
        // output the button row
        NodeList[lbl,lbl] buttonRow = NodeList[lbl,lbl].EMPTY();
        buttonRow = buttonRow==null?null:buttonRow.append(new SubmitButton[CalServEP, lbl,lbl](getServlet(), lbl,
                (isCreate?"Create":"Update")+" Event"));
        buttonRow = buttonRow==null?null:buttonRow.append(new NBSP[lbl,lbl]());
        buttonRow = buttonRow==null?null:buttonRow.append(new Hyperlink[CalServEP, lbl,lbl](this.cancelAction,
                       "Cancel"));     
        
        entries =
            entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, buttonRow, 2, false)));
        
        Node[thisEvent.infoLbl,lbl] form = servlet.createForm(thisEvent.infoLbl,lbl,
                                     new FinishEditEvent(servlet, session, this, finishEditEventReceiver),
                                     thisEvent.infoLbl, lbl,
                                     new Table[thisEvent.infoLbl,lbl](entries)); 
        
        String title = (isCreate?"Create":"Edit")+" Event";
        servlet.createPage(req, title, thisEvent.infoLbl, lbl, new NodeList[thisEvent.infoLbl,lbl](lbl, lbl, createBanner(lbl, title), thisEvent.infoLbl, lbl, createBody(thisEvent.infoLbl, lbl, form)));
        return true;
    }   

      protected boolean produceReadOnlyPage{*lbl}(label{*lbl} lbl,  
              Request[CalServEP]{*lbl} req,
              Main{*lbl} servlet,
              CalendarSessionState[lbl]{*lbl} state,
              User[CalServEP,lbl]{*lbl} currentUser)
        where session equiv req.session, 
              session equiv state.remote.sessionPrincipal,
              session actsfor currentUser,   
              CalRootEP actsfor currentUser,
              lbl <= {*:req.session},
              event.timeLbl <= event.infoLbl,
              event.infoLbl <= {*:req.session},
              event.infoLbl <= {CalRootEP:},
              evLbl <= {lbl;req;servlet;state;currentUser},
              lbl <= {CalRootEP:},
              {CalRootEP!:} <= event.infoLbl,
              caller(req.session),
              authority (CalServEP, CalRootEP)
      {
          Node[lbl,lbl] hrule = new HRule[lbl,lbl]();
          
          if (req == null || servlet == null || state == null || event == null || event.remote1 == null) return false;

          // bndR is the label for the output. Note that it is completely untrusted data
          final label bndR = new label {*event.timeLbl; *event.infoLbl; *lbl; _!:_};
          final label infoLblBot = new label {*event.infoLbl; *lbl; _!:_};
          final label infoLblCur = new label {*event.infoLbl; *lbl; currentUser!:};
          final label timeLblBot = new label {*event.timeLbl; *lbl; _!:_};
          final label infoAndLbl = new label {*event.infoLbl; *lbl};
          
          String defaultName = defaultValue(lbl, event.infoLbl, req, event.remote1.name, this.inpName);        
          String defaultNote = defaultValue(lbl, event.infoLbl, req, event.remote1.note, this.inpNote);        
          String defaultStart = defaultValue(lbl, event.timeLbl, req, DateUtil.dateToString(event.timeLbl, event.startTime, false), this.inpStart);      
          String defaultEnd = defaultValue(lbl, event.timeLbl, req, DateUtil.dateToString(event.timeLbl, event.endTime, false), this.inpEnd);      
          
          NodeList[bndR,lbl] entries = NodeList[bndR,lbl].EMPTY();
          entries = entries==null?null:entries.append(infoLblCur, lbl, new TRow[infoLblCur,lbl](new NodeList[infoLblCur,lbl](lbl, lbl, desc(lbl, "Event:"),
                  infoLblCur, infoLblCur, displayData(infoLblCur, defaultName))));
          
          entries = entries==null?null:entries.append(timeLblBot, lbl, new TRow[timeLblBot,lbl](new NodeList[timeLblBot,lbl](lbl, lbl, desc(lbl, "Start:"),
                  timeLblBot, timeLblBot, displayData(timeLblBot, defaultStart))));
          entries = entries==null?null:entries.append(timeLblBot, lbl, new TRow[timeLblBot,lbl](new NodeList[timeLblBot,lbl](lbl, lbl, desc(lbl, "End:"),
                  timeLblBot, timeLblBot, displayData(timeLblBot, defaultEnd))));
          
          entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
          
          User eventCreat = event.remote1.creator;
          
          String creatorName = CalServDeclassifier.declassUserDisplayString(event.infoLbl, CalRootEP, eventCreat); 
          entries = entries==null?null:entries.append(infoLblBot, lbl, new TRow[infoLblBot,lbl](new NodeList[infoLblBot,lbl](lbl, lbl, desc(lbl, "Creator:"),
                  infoLblBot, lbl, desc(infoLblBot, lbl, creatorName))));
          
          // output the attendees information
          entries = entries==null?null:entries.append(infoAndLbl, lbl, new TRow[infoAndLbl,lbl](new NodeList[infoAndLbl,lbl](lbl, lbl, desc(lbl, "Attendees:"),
                  infoAndLbl, lbl, desc(infoAndLbl, lbl, userListToNode(infoAndLbl, lbl, req, event.remote1.attendees)))));

          entries = new NodeList[bndR,lbl](bndR, lbl, entries, lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
          
          // output the viewers information
          entries = entries==null?null:entries.append(infoAndLbl, lbl, new TRow[infoAndLbl,lbl](new NodeList[infoAndLbl,lbl](lbl, lbl, desc(lbl, "Viewers:"),
                  infoAndLbl, lbl, desc(infoAndLbl, lbl, userListToNode(infoAndLbl, lbl, req, event.remote1.viewers)))));

          entries = new NodeList[bndR,lbl](bndR, lbl, entries, lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
          
          entries = entries==null?null:entries.append(infoLblBot, lbl, new TRow[infoLblBot,lbl](infoLblBot,lbl, new NodeList[infoLblBot,lbl](lbl, lbl, desc(lbl, "Note:"),
                  infoLblBot, lbl, displayData(infoLblBot, lbl, defaultNote))));
          
          entries = entries==null?null:entries.append(lbl, lbl, new TRow[lbl,lbl](new TCell[lbl,lbl](null, hrule, 2, false)));
                    
          Node[lbl,lbl] returnLink = new Hyperlink[CalServEP, lbl,lbl](this.cancelAction, "Return");
          
          NodeList[bndR,lbl] temp = new NodeList[bndR,lbl](bndR, lbl, entries, lbl, lbl, new TCell[lbl,lbl](null, returnLink, 2, false));

          String title = "View Event";
          servlet.createPage(req, title, bndR, lbl, new NodeList[bndR,lbl](lbl, lbl, createBanner(lbl, title), bndR, lbl, createBody(bndR, lbl, temp)));
          return true;
      }   
      
     /**
      * Takes a list of users and returns a NodeList containing
      * Text nodes for the users' display strings, each followed by a Br node.
      */
     private Node[lbl,bnd]{*bnd} userListToNode{req}(label{*bnd} lbl, label{*bnd} bnd, Request[CalServEP]{*bnd} req, List[{CalServEP:;CalServEP!:}]{*lbl} users) 
                  where {CalRootEP!:} <= lbl,
                        lbl <= {CalRootEP:},
                        bnd <= lbl,
                        authority (CalServEP, CalRootEP), 
                        caller (req.session) 
    {
        return new Text[lbl,bnd](CalServDeclassifier.declassUserListToString(lbl, CalRootEP, users, true, ", "));
    }
                                       
    private Node[lbl,lbl] desc{*lbl}(label{*lbl} lbl, Node[lbl,lbl]{*lbl} nd) {
      TCell[lbl,lbl] n = new TCell[lbl,lbl]("desc", nd);
      return n;
    }
    private Node[lbl,lbl]{lbl} desc{*lbl}(label{*lbl} lbl, String{*lbl} s) {
      return desc(lbl, new Text[lbl,lbl](s));
    }
    private Node[lbl,bnd]{lbl;bnd} desc{*bnd}(label{*bnd} lbl, label{*bnd} bnd, Node[lbl,bnd]{*bnd} nd) where bnd <= lbl {
      TCell[lbl,bnd] n = new TCell[lbl,bnd]("desc", nd);
      return n;
    }
    private Node[lbl,bnd]{lbl;bnd} desc{*bnd}(label{*bnd} lbl, label{*bnd} bnd, String{*lbl} s) where bnd <= lbl {
      return desc(lbl, bnd, new Text[lbl,bnd](s));
    }
    
    /**
     * Returns the input
     * with the error text next to it.
     * 
     * lbl must be <= lbl2
     */
    private Node[bnd,lbl]{*lbl} editData{*lbl}(label{*lbl} bnd, label{*lbl} lbl, 
            InputNode[CalServEP, bnd, lbl]{*lbl} inp,            
            String{*bnd} error) where {*lbl} <= {*bnd}
    {
         String{*bnd} t = error==null?"":error;
        Text[bnd,lbl]{*lbl} errTxt = new Text[bnd,lbl](t);
        TCell[bnd,lbl] err = new TCell[bnd,lbl]("error", errTxt);
        return new NodeList[bnd,lbl](new TCell[bnd,lbl](inp), err);
    }
    
    private Node[lbl,lbl]{lbl} displayData{*lbl}(label{*lbl} lbl, String{*lbl} text)
    {
        Text[lbl,lbl] txt = new Text[lbl,lbl](text);
        return new TCell[lbl,lbl](txt);
    }
    private Node[lbl,bnd]{bnd;lbl} displayData{*bnd}(label{*bnd} lbl, label{*bnd} bnd, String{*lbl} text) where bnd <= lbl
    {
        Text[lbl,bnd] txt = new Text[lbl,bnd](text);
        return new TCell[lbl,bnd](txt);
    }
    
}

class FinishEditEvent extends USessAction[CalServEP] authority (CalServEP) {
    private final CreateEditEvent{this} createEditEvent;
    private final FinishEditEventReceiver{this} eventReceiver;

    public FinishEditEvent(Main{this} servlet,
                             principal{this} session,
                             CreateEditEvent{this} createEditEvent, 
                             FinishEditEventReceiver{this} eventReceiver) {
          this.createEditEvent = createEditEvent;
          this.eventReceiver = eventReceiver;
          super(servlet, session);
    }
        
    public void invokeSessImpl{*lbl;session!:}(label{*lbl;session!:} lbl,
            Request[CalServEP]{*lbl;session!:} req,
            UServlet[CalServEP]{*lbl;session!:} uservlet,
            USessState[CalServEP,{*lbl;session!:}]{*lbl;session!:} ustate,
            User[CalServEP, {*lbl;session!:}]{*lbl;session!:} currentUser) 
    throws (ServletException{*lbl;req.session!:})
        where session equiv req.session, 
              session equiv ustate.remote.sessionPrincipal,
              session actsfor currentUser,              
              lbl <= {*:req.session},
              caller(session)
    {
        if(createEditEvent != null && createEditEvent.evLbl <= lbl) {
            invokeSessImplImpl(lbl, req, uservlet, ustate, currentUser);
        }
    }

    public void invokeSessImplImpl{*lbl1;session!:}(label{*lbl1;session!:} lbl1,
            Request[CalServEP]{*lbl1;session!:} req,
            UServlet[CalServEP]{*lbl1;session!:} uservlet,
            USessState[CalServEP,{*lbl1;session!:}]{*lbl1;session!:} ustate,
            User[CalServEP, {*lbl1;session!:}]{*lbl1;session!:} currentUser) 
    throws (ServletException{*lbl1;req.session!:})
        where session equiv req.session, 
              session equiv ustate.remote.sessionPrincipal,
              session actsfor currentUser,
              createEditEvent.evLbl <= lbl1,
              lbl1 <= {*:req.session},
              caller(session)
    {
         if (createEditEvent != null && req != null && createEditEvent.event != null 
                 && createEditEvent.inpName != null && createEditEvent.inpStart != null && createEditEvent.inpEnd != null
                     && createEditEvent.inpNote != null) {
             if (createEditEvent.session equiv req.session && lbl1 equiv new label {currentUser!:} && 
                     this.createEditEvent.event.infoLbl <= new label {currentUser:;currentUser!:} &&
                     new label {currentUser!:} <= this.createEditEvent.event.timeLbl && CalRootEP actsfor currentUser && req.session actsfor currentUser &&  
                     this.createEditEvent.event.timeLbl <= this.createEditEvent.event.infoLbl &&
                     this.createEditEvent.event.infoLbl <= this.createEditEvent.inpName.inputLbl &&
                     this.createEditEvent.event.timeLbl <= this.createEditEvent.inpStart.inputLbl &&
                     this.createEditEvent.event.timeLbl <= this.createEditEvent.inpEnd.inputLbl &&
                     this.createEditEvent.event.infoLbl <= this.createEditEvent.inpNote.inputLbl) {
                 finishEdit(lbl1, 
                            createEditEvent.event.timeLbl,
                            req,  
                            uservlet, 
                            ustate, 
                            currentUser);
             }
             else {
                 String lblString = null;
                 lblString = LabelUtil.toString(lbl1);
                 throw new ServletException("FinishEditEvent.invokeSessImpl: lbl too high: " + lblString);
             }
         }
    }
    

    protected void finishEdit{*lbl}(label{*lbl} lbl, 
            label{*lbl} timeLbl, // equivalent to createEditEvent.event.timeLbl
            Request[CalServEP]{*lbl} req,
            UServlet[CalServEP]{*lbl} uservlet,
            USessState[CalServEP,lbl]{*lbl} ustate,
            User[CalServEP, lbl]{*lbl} currentUser)
     throws (ServletException{*lbl;req.session!:})
       where req.session equiv ustate.remote.sessionPrincipal,
             req.session equiv session,
             req.session equiv createEditEvent.session,
             session actsfor currentUser,
             CalRootEP actsfor currentUser,
             {*lbl} equiv {currentUser!:},
             this.createEditEvent.event.infoLbl <= {currentUser:; currentUser!:},
             this.createEditEvent.event.timeLbl <= createEditEvent.event.infoLbl,
             {currentUser!:} <= this.createEditEvent.event.timeLbl,
             this.createEditEvent.event.infoLbl <= this.createEditEvent.inpName.inputLbl,
             this.createEditEvent.event.timeLbl <= this.createEditEvent.inpStart.inputLbl,
             this.createEditEvent.event.timeLbl <= this.createEditEvent.inpEnd.inputLbl,
             this.createEditEvent.event.infoLbl <= this.createEditEvent.inpNote.inputLbl,
             this.createEditEvent.evLbl <= lbl,
             caller(req.session),
             authority(CalServEP)
   {
         // user has finished editing.
          
        if (req == null || uservlet == null || ustate == null || 
                !(uservlet instanceof Main) ||
                !(ustate instanceof CalendarSessionState[lbl]) ||
                this.createEditEvent == null || this.eventReceiver == null || 
                createEditEvent.event == null || createEditEvent.event.remote1 == null ||
                createEditEvent.event.uid == null) {
            throw new ServletException("null args");
        }
        final Main servlet = (Main)uservlet;
        CalendarSessionState state_ = null;
        try {
            state_ = (CalendarSessionState)ustate;
        } catch (ClassCastException imposs) {}
        final CalendarSessionState state = state_;
        if(state == null || state.remote == null) {
            throw new ServletException("null args");
        }
        ServletException{*lbl;req.session!:} ex = null;
        
        if (state.remote.sessionPrincipal equiv session) { // always true
            // extract data from request
            String name = defaultValue(lbl, createEditEvent.event.infoLbl, req, null, createEditEvent.inpName);        
            String note = defaultValue(lbl, createEditEvent.event.infoLbl, req, null, createEditEvent.inpNote);        
            String start = defaultValue(lbl, createEditEvent.event.timeLbl, req, null, createEditEvent.inpStart);      
            String end = defaultValue(lbl, createEditEvent.event.timeLbl, req, null, createEditEvent.inpEnd);      
            
            // validate data
            String nameErr = null;
            if (name == null || name.length() == 0) {
                // report error
                nameErr = "Event name must be provided.";
            }
            
            Date[createEditEvent.event.timeLbl] startDate = DateUtil.stringToDate(createEditEvent.event.timeLbl, start);
            Date[createEditEvent.event.timeLbl] endDate = DateUtil.stringToDate(createEditEvent.event.timeLbl, end);

            String startErr = null;
            String endErr = null;
            
            if (startDate == null) startErr = "Not a valid date."; 
            if (endDate == null) endErr = "Not a valid date."; 
            
            if (startDate != null && endDate != null &&
                    endDate.before(startDate)) {
                // report error
                endErr = "End date cannot be before start date.";
            }            
            
            // send user back to page if data not validated
            boolean pageProduced = false;
            if (nameErr != null || startErr != null || endErr != null) {
                if (state.remote.sessionPrincipal equiv this.session) { // always true
                    // DOWNGRADE REASON: pc tained by infoLbl (nameErr), ok with releasing the error message about the name.
                    declassify({*createEditEvent.event.infoLbl;currentUser!:} to {currentUser!:}) {
                        final Event event = Event.declassifyEvent(currentUser, createEditEvent.event);
                        if(event !=null && event.infoLbl equiv this.createEditEvent.event.infoLbl && event.timeLbl equiv this.createEditEvent.event.timeLbl) {
                            pageProduced = createEditEvent.produceEditPage(new label {currentUser!:},
                                    req, 
                                    servlet, 
                                    state, 
                                    currentUser, 
                                    nameErr, 
                                    startErr, 
                                    endErr,
                                    event);
                        }
                    }
                }
            }
            if (!pageProduced) {
                // Only now, that we've verified the data is ok, do we
                // copy it back into the event.
                
                // load the data back into a Event.
                principal{currentUser:;currentUser!:}[] infoReaders = CalServDeclassifier.userListToPrincipals(currentUser, createEditEvent.event.remote1.attendees);
                principal{currentUser:;currentUser!:}[] timeReaders = CalServDeclassifier.userListToPrincipals(currentUser, createEditEvent.event.remote1.viewers);
                
                label newInfoLbl_ = new label {};
                label newViewersLbl_ = new label {};
                label newTimeLbl_ = new label {};
                try {
                    newInfoLbl_ = LabelUtil.toLabel(LabelUtil.readerPolicy(new label {currentUser:;currentUser!:}, currentUser, infoReaders),
                
                                                               LabelUtil.writerPolicy(createEditEvent.event.infoLbl, currentUser, null));
                    newViewersLbl_ = LabelUtil.toLabel(LabelUtil.readerPolicy(new label {currentUser:;currentUser!:}, currentUser, timeReaders),
                                                                  LabelUtil.writerPolicy(createEditEvent.event.infoLbl, currentUser, null));
                    // the new time label is the meet of the viewers and the attendees, i.e., all attendees can see the time.
                    newTimeLbl_ = LabelUtil.meetLbl(newInfoLbl_, newViewersLbl_);
                }
                catch (NullPointerException imposs) { }
                
                final label newInfoLbl = newInfoLbl_;
                final label newViewersLbl = newViewersLbl_;
                final label newTimeLbl = newTimeLbl_;
                

                if (new label {currentUser!:} <= newTimeLbl && newTimeLbl <= newInfoLbl) {
                    // DOWNGRADE REASON: convert from createEditEvent.event.infoLbl to newInfoLbl, and similarly for timeLbl
                    declassify({currentUser:; currentUser!:} to {currentUser!:}) {
                        User user__ = declassify(createEditEvent.event.remote1.creator, {currentUser:; currentUser!:} to {currentUser!:});
                        User user_ = User.declassifyUser(currentUser, CalServEP, user__);
                        Date[newTimeLbl] newStartDate = CalServDeclassifier.declassDate(currentUser, newTimeLbl, startDate);
                        Date[newTimeLbl] newEndDate = CalServDeclassifier.declassDate(currentUser, newTimeLbl, endDate);
                        
                        int{CalServEP:;CalServEP!:;currentUser:; currentUser!:} uid = createEditEvent.event.uid.uid;
                        Event newEvent = 
                            new Event(uid,
                                      newTimeLbl,
                                      newInfoLbl,
                                      newStartDate, 
                                      newEndDate, 
                                      declassify(name, {currentUser:; currentUser!:} to {currentUser!:}), 
                                      declassify(note, {currentUser:; currentUser!:} to {currentUser!:}), 
                                      declassify(createEditEvent.event.remote1.attendees, {currentUser:; currentUser!:} to {currentUser!:}), 
                                      declassify(createEditEvent.event.remote1.viewers, {currentUser:; currentUser!:} to {currentUser!:}), 
                                      user_);                                                    
                        
                        // send user back to return action.
                        try {
                            eventReceiver.receiveEvent(lbl, 
                                                       req, 
                                                       servlet, 
                                                       state, 
                                                       currentUser, 
                                                       createEditEvent.getEvent(), 
                                                       newEvent);
                        }
                        catch (ServletException e) {
                            ex = e;
                        }
                    }
                }
            }
        }
        if (ex != null) throw ex;
   }
}

