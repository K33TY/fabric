package calendar;

import userserv.*;
import jif.util.*;

/**
 * An Event represents an entry in the calendar system.  A single Event object
 * is shared amongst all users involved in that event.
 *
 * Note: this class has a natural ordering that is inconsistent with equals.
 */
public class Event[covariant label T] /*implements Comparable*/ implements JifObject[{CalServEP:;CalServEP!:;T}] {
	final int{CalServEP→;CalServEP←;T} uid;

	// timeLbl is typically less restrictive than infoLbl
	// A principal could be allowed to read data marked with timeLbl, indicating
	// a busy status, but with no information about the event
	final label{T} timeLbl;
	// Data marked with infoLbl includes all information pertaining to the event
	final label{T} infoLbl;
	final Event$1[infoLbl]{T} remote1;

	final Date[timeLbl]{T} startTime;
	final Date[timeLbl]{T} endTime;

	public Event{*infoLbl_}(int{CalServEP:;CalServEP!:;T} uid_,
			label{T} timeLbl_,
			label{T} infoLbl_,
			Date[timeLbl_]{T} startTime_,
			Date[timeLbl_]{T} endTime_,
			String{*infoLbl_} name_,
			String{*infoLbl_} note_,
			List[{CalServEP:;CalServEP!:}]{*infoLbl_} attendees_,
			List[{CalServEP:;CalServEP!:}]{*infoLbl_} viewers_,
			User[CalServEP]{*infoLbl_} creator_) {
		this.uid = uid_;
		this.timeLbl = timeLbl_;
		this.infoLbl = infoLbl_;
		this.startTime = startTime_;
		this.endTime = endTime_;
		this.remote1 = new Event$1[infoLbl](name_, note_, attendees_, viewers_, creator_);
	}

	public Event{T}(int{CalServEP:;CalServEP!:;T} uid_,
			label{T} timeLbl_,
			label{T} infoLbl_,
			Date[timeLbl_]{T} startTime_,
			Date[timeLbl_]{T} endTime_,
			Event$1[infoLbl_]{T} remote1) {
		this.uid = uid_;
		this.timeLbl = timeLbl_;
		this.infoLbl = infoLbl_;
		this.startTime = startTime_;
		this.endTime = endTime_;
		this.remote1 = remote1;
	}


	public String{CalServEP:;CalServEP!:;T} toString() {
		return Integer.toString(uid);
	}

	public int{CalServEP:;CalServEP!:;T} hashCode() {
		return uid;
	}

	public boolean{o;CalServEP:;CalServEP!:;T} equals(IDComparable[{CalServEP:;CalServEP!:;T}] o) {
		return equals(new label {CalServEP:;CalServEP!:;T}, o);
	}
	public boolean{o;CalServEP:;CalServEP!:;lbl;*lbl;T} equals(label lbl, IDComparable[lbl] o) {
		if (o instanceof Event[lbl]) {
			Event[lbl] that = (Event[lbl])o;
			return this.uid == that.uid;
		}
		return false;
	}

}

