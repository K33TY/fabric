package sif.servlet;
import fabric.lang.Principal;

/**
 * Global state for a single session.
 */

public class SessionState[covariant label T] {

    protected SessionState{T}(String{T} sessionId) {
    	this.remote = new SSW(new SessionPrincipal[T](this), sessionId);
    }
    
    protected SessionState{T}() {
    	this.remote = new SSW(new SessionPrincipal[T](this), "<uninitialized>");
    }
    
    public SSW[T]{⊥→⊥;⊤←⊤} remote;


    public final String{T;this} getSessionId() {
    	try {
    		return remote.sessionId;
    	} catch(NullPointerException e) {return null;} 
    }

    public final Principal{T;this} sessionPrincipal() {
    	try {
    		return remote.sessionPrincipal;
    	} catch(NullPointerException e) {return null;}
    }
    
    /** convenience method for non-fabric code */
    public static SessionState[lbl]{*lbl} createSessionState{*lbl}(label{*lbl} lbl, String{*lbl} id) {
    	atomic {
    		return new SessionState[lbl](id);
    	}
    }
}

class SSW[covariant label T] {
    public final Principal{T} sessionPrincipal;
    final String{T}    sessionId;
    SSW(Principal{T} sessionPrincipal, String{T} sessionID) {
    	this.sessionPrincipal = sessionPrincipal;
    	this.sessionId = sessionId;
    }
	
}

