# pth test script
#
# This file is a test script for pth (Polyglot Test Harness). It
# conforms to the following grammar.
#
#      ScriptFile   ::= CompilerTest+
#      CompilerTest ::= ExtClassName ["CmdLineArgs"] { FileTest [; FileTest]* }
#                    |  javac ["CmdLineArgs"] { FileTestNoFailure [; FileTestNoFailure]* }
#      FileTest     ::= Filenames [Description] [FailureSet]
#      FileTestNoFailure ::= Filenames [Description]
#      Filenames    ::= Filename [Filename]*
#      Description  ::= LitString
#      FailureSet   ::= Failure [, Failure]*
#      Failure      ::= ( ErrorKind )
#                    |  ( ErrorKind, "RegExp" )
#                    |  ( "RegExp" )
#                    |  ( )
#      ErrorKind    :   one of, or a unique prefix of one of the following 
#                       strings: "Warning", "Internal Error", "I/O Error", 
#                       "Lexical Error", "Syntax Error", "Semantic Error"
#                       or "Post-compiler Error".
#      Filename     :   the name of a file. Is interpreted from the 
#                       directory where pth is run.
#      LitString    :   a literal string, enclosed in quotes.
#      RegExp       :   a regular expression, as in java.util.regex; 
#                       is always enclosed in quotes.
#      CmdLineArgs  :   additional command line args for the Polyglot 
#                       compiler; is always enclosed in quotes.

# Compile some java classes first
#javac "-d java-out -cp ." {
#}
 
bolt.ExtensionInfo "-d out -classpath java-out -assert -noserial -postopts \"-source 1.7 -Xlint\\:-options\" -morepermissiveinference" {
  ObjectInitGood001_01.bolt;
  ObjectInitGood001_02.bolt;
  ObjectInitGood002_01.bolt;
  ObjectInitGood002_02.bolt;
  ObjectInitGood003_01.bolt;
  ObjectInitGood003_02.bolt;
  ObjectInitGood004.bolt;
  ObjectInitGood005.bolt;
  ObjectInitGood006.bolt;
  ObjectInitGood007.bolt;
  ObjectInitGood008.bolt;
  ObjectInitGood009.bolt;
  ObjectInitGood010.bolt;
  ObjectInitGood011.bolt;
  ObjectInitGood012.bolt;

  ObjectInitBad001_01.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad001_02.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad002_01.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad002_02.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad003_01.bolt
    (Semantic, "might already have been initialized");
  ObjectInitBad003_02.bolt
    (Semantic, "might already have been initialized");
  ObjectInitBad003_03.bolt
    (Semantic, "might already have been initialized");
  ObjectInitBad003_04.bolt
    (Semantic, "might already have been initialized");
  ObjectInitBad003_05.bolt
    (Semantic, "might already have been initialized");
  ObjectInitBad003_06.bolt
    (Semantic, "might already have been initialized");
  ObjectInitBad004_01.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad004_02.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad004_03.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad004_04.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad004_05.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad004_06.bolt
    (Semantic, "might not have been initialized");
  ObjectInitBad005_01.bolt
    (Semantic, "Cannot access a non-static method");
  ObjectInitBad005_02.bolt
    (Semantic, "Cannot access a non-static method");
  ObjectInitBad005_03.bolt
    (Semantic, "Cannot access a non-static method");
  ObjectInitBad005_04.bolt
    (Semantic, "Cannot access a non-static method");
  ObjectInitBad005_05.bolt
    (Semantic, "Cannot access a non-static method");
  ObjectInitBad005_06.bolt
    (Semantic, "Cannot access a non-static method");
  ObjectInitBad006_01.bolt
    (Semantic, "cannot be instantiated");
  ObjectInitBad006_02.bolt
    (Semantic, "cannot be instantiated");
  ObjectInitBad006_03.bolt
    (Semantic, "cannot be instantiated");
  ObjectInitBad006_04.bolt
    (Semantic, "cannot be instantiated");
  ObjectInitBad006_05.bolt
    (Semantic, "cannot be instantiated");
  ObjectInitBad006_06.bolt
    (Semantic, "cannot be instantiated");
  ObjectInitBad007_01.bolt
    (Semantic, "Cannot access a non-static field");
  ObjectInitBad007_02.bolt
    (Semantic, "Cannot access a non-static field");
  ObjectInitBad007_03.bolt
    (Semantic, "Cannot access a non-static field");

  FieldAssignBad001_01.bolt
    (Semantic, "Cannot assign a value to final field");
  FieldAssignBad001_02.bolt
    (Semantic, "Cannot assign a value to final field");
  FieldAssignBad001_03.bolt
    (Semantic, "Cannot assign a value to final field");
  FieldAssignBad001_04.bolt
    (Semantic, "Cannot assign a value to final field");
  FieldAssignBad001_05.bolt
    (Semantic, "Cannot assign a value to final field");
  FieldAssignBad001_06.bolt
    (Semantic, "Cannot assign a value to final field");

  SuperGood001.bolt;
  SuperGood002.bolt;
  SuperGood003.bolt;
  SuperGood004.bolt;
  SuperGood005.bolt;
  SuperGood006.bolt;

  ScopeBad001.bolt
    (Semantic, "Could not find field or local variable");
  SuperBad001_01.bolt
    (Semantic, "Cannot access a non-static method");
  SuperBad001_02.bolt
    (Semantic, "Cannot access a non-static method");
  SuperBad002_01.bolt
    (Semantic, "cannot be instantiated");
  SuperBad002_02.bolt
    (Semantic, "cannot be instantiated");
  SuperBad003.bolt
    (Semantic, "Cannot access a non-static field");

  ScopeGood001.bolt;
  ScopeGood002.bolt;
}
