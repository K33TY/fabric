/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

/**
 * This represents the abstract notion of a delegating principal in Fabric. All
 * application-defined principals in Fabric must inherit from this class.
 * <code>AbstractPrincipal</code> is provided for convenience in extending this
 * class.
 * <p/>
 * This class is separate from Principal because some built-in principals (e.g.,
 * TopPrincipal, ConjunctivePrincipal, DisjunctivePrincipal) do not support the
 * delegation functions <code>addDelegatesTo()</code> and
 * <code>removeDelegatesTo</code>.
 */
public abstract class DelegatingPrincipal extends Principal {
  char{_->}@{this->} __dummy__;
  public abstract void addDelegatesTo{this:;this!:}(principal{this:;this!:} p) where caller (this);    
  public abstract void removeDelegatesTo{this:;this!:}(principal{this:;this!:} p) where caller (this);
  
}
