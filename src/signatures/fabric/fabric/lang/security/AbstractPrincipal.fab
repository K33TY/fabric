package fabric.lang.security;

/**
 * This is an abstract implementation of the principal interface.
 * It provides convenience methods for delgating authority to superiors.
 */
public abstract class AbstractPrincipal extends DelegatingPrincipal {
    @{store$→}

    protected AbstractPrincipal(String{this} name) {
    }
    
    protected AbstractPrincipal(String{this} name, principal{this} superior) {
    }

    public native String{this; this←} name();
    
    public native boolean{this; p; this←} delegatesTo{this→}(principal{this→} p);

    public native boolean{this; p; this←} equals{this→}(Principal{this→} p);
      
    public native boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
      isAuthorized{this→;this←}(java.lang.Object authPrf,
                 Closure[this, lb] closure,
                 label lb,
                 boolean executeNow)
      where authority (this),
          {authPrf;closure;lb;executeNow} <= lb,
          lb <= {this→};

    public native ActsForProof{this; c; p; searchState; p←; this←}
      findProofUpto{this→;this←}(Store c, Principal p, 
          java.lang.Object searchState)  
      where {c;p;searchState} <= {this→};
    
    public native ActsForProof{this; c; q; searchState; q←; this←}
      findProofDownto{this→;this←}(Store c, Principal q, 
          java.lang.Object searchState)
      where {c;q;searchState} <= {this→};
    
    public native void addDelegatesTo{this→;this←}(Principal{this→;this←} p) where caller (this); 
    public native void removeDelegatesTo{this→;this←}(Principal{this→;this←} p) where caller (this); 

    protected native boolean{this; p; this←} 
      superiorsContains{this→;this←}(Principal{this→} p) where authority (this);
}