package fabric.lang.security;

/**
 * This is an abstract implementation of the principal interface.
 * It provides convenience methods for delgating authority to superiors.
 */
public abstract class AbstractPrincipal extends DelegatingPrincipal {
        
    protected AbstractPrincipal(String{this} name) {
    }

    public native String{this} name();
    
    public native boolean{this;p;this!:} delegatesTo(principal p);

    public native void addDelegatesTo{this:;this!:}(principal{this:;this!:} p) where caller (this);    

    public native void removeDelegatesTo{this:;this!:}(principal{this:;this!:} p) where caller (this);

    protected native boolean{this;p;this!:} superiorsContains(Principal p) where authority (this);
    
    public native boolean{authPrf; closure; lb; *lb; executeNow; this; this→; this←}
        isAuthorized{this!:}(java.lang.Object authPrf, 
                Closure[this, lb] closure,
                label lb,
                boolean executeNow) where authority (this);
    
    
    public native ActsForProof[{c→}]{this;q;this!:;q!:;c} findProofDownto(Store c, Principal q, java.lang.Object searchState);
    
    public native ActsForProof[{c→}]{this;p;this!:;p!:;c} findProofUpto{this!:}(Store c, Principal p, java.lang.Object searchState) where authority (this);
    
    public native boolean equals(Object o);
    
    public native boolean equals(Principal p);
    
}
