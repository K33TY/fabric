/**
 * Copyright (C) 2010-2014 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

/**
 * This represents the abstract notion of a principal in Fabric. All principals
 * in Fabric must inherit from this class. Applications that wish to define
 * their own Principal classes must extend DelegatingPrincipal.
 */
public abstract class Principal {
    @{store$→}
    
    // XXX: should this be final? what are the implications of 
    //      overriding? What should the begin label be?
    public abstract String{this; this←} name();

    public abstract boolean{this; p; this←} delegatesTo{this→}(principal{this→} p);

    public abstract boolean{this; p; this←} equals{this→}(Principal{this→} p);

    /**
     * Checks whether the <code>authPrf<code> provide sufficient proof of this
     * principal's authority to execute the closure <code>closure</code>, and
     * if so, returns true. In addition, if <code>executeNow</code> is true,
     * the closure will be executed immediately.
     *   For example, <code>authPrf<code> may be a password (or a password
     * digest, or a certificate, etc.); this method will return true
     * if that password matches the principal's password, and the closure
     * is one that the principal expects to be asked to authorize (typically
     * this is decided by inspecting the class of the closure).
     */
    public abstract boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
    isAuthorized{this→;this←}(java.lang.Object authPrf,
               Closure[this, lb] closure,
               label lb,
               boolean executeNow)
      where authority (this),
          {authPrf;closure;lb;executeNow} <= lb,
          lb <= {this→};
     /**
      * Search for a proof that the principal p can act for this principal.
      * Return null if no such proof can be found.
      */
     public abstract ActsForProof{this; c; p; searchState; p←; this←}
	findProofUpto{this→;this←}(Store c, Principal p, java.lang.Object searchState)
	where {c;p;searchState} <= {this→};
     
     /**
      * Search for a proof that this principal can act for the principal q.
      * Return null if no such proof can be found.
      */    
     public abstract ActsForProof{this; c; q; searchState; q←; this←}
	findProofDownto{this→;this←}(Store c, Principal q, java.lang.Object searchState)
	where {c;q;searchState} <= {this→};

}
