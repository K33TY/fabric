package fabric.lang.arrays;

import fabric.worker.Store;
import fabric.lang.arrays.internal._booleanArray;
import fabric.lang.arrays.internal._ObjectArray;

/**
 * <p>
 * This class implements a resizable array using
 * fabric.lang.arrays.internal._booleanArray as a primitive. The smaller array
 * pieces are arranged as a tree so as to support efficient indexing operations.
 * </p>
 * <p>
 * This is an array for booleans, and is adapted from byteArray.
 * </p>
 * <p>
 * Optimizations:
 * <ol>
 * <li>Remove the call to getProxy in the generated Java file</li>
 * </ol>
 * </p>
 * XXX For simplicity the boolean arrays are also of CHUNK_SIZE size
 * 
 * @author kvikram
 */
public final class booleanArray {
  private static final boolean DEFAULT_VALUE = false;
  
  /**
   * The number of elements in each little array. Dependent on the MTU?
   * Analogous to a block in a file system. Also directly determines the fanout.
   * We always need it to be a power of 2.
   */
  private final int CHUNK_SIZE;
  private final int CHUNK_SIZE_LOG2;

  /**
   * The height of the tree of little arrays. Depends on the chunk size
   * (determining the branching factor) and the number of expected elements in
   * the bigger array
   */
  private int height;

  /**
   * The number of expected elements in this big array Can be modified even
   * after an instance has been created
   */
  private int length;

  /**
   * The root of the tree of little arrays. The runtime type of root is a Fabric
   * array of Fabric Objects. Each object in the array is either a further array
   * of objects or is an array element if this array is at the leaf level
   */
  private Object root;

  /**
   * Creates a new object array at the given Store with the given length.
   * 
   * @param store
   *                The store on which to allocate the array.
   * @param length
   *                The length of the array.
   */
  public booleanArray(Label updateLabel, ConfPolicy accessPolicy, int length) {
    // Default chunk size is 256.
    this(updateLabel, accessPolicy, length, 8);
  }

  public booleanArray(Label updateLabel, ConfPolicy accessPolicy, int length,
      int CHUNK_SIZE_LOG2) {
    this.CHUNK_SIZE_LOG2 = CHUNK_SIZE_LOG2;
    this.CHUNK_SIZE = (1 << CHUNK_SIZE_LOG2);
    this.length = length;

    this.$updateLabel = updateLabel;
    this.$accessPolicy = accessPolicy;

    // Compute required height (height starts at 1).
    this.height = getHeight(length);

    switch (height) {
    case 1:
      root = (_booleanArray) new _booleanArray(this.$updateLabel, this.$accessPolicy, CHUNK_SIZE).$initLabels();
      break;
    case 2:
      root = (_ObjectArray) new _ObjectArray(this.$updateLabel, this.$accessPolicy, _booleanArray.class, CHUNK_SIZE).$initLabels();
      break;
    default:
      root = (_ObjectArray) new _ObjectArray(this.$updateLabel, this.$accessPolicy, _ObjectArray.class, CHUNK_SIZE).$initLabels();
    }
  }
  
  public Object $initLabels() {
    //handled by constructor
    return this;
  }
  
  public int getLength() {
    return length;
  }

  /**
   * Ceiling(log_{CHUNK_SIZE}(length)).  (Except returns 1 if length <= 1.)
   * This basically returns the height of the tree for a given array length.
   */
  private int getHeight(int length) {
    if (length <= 1) return 1;
    
    int result = 0;
    
    // Start with tmp == 1 and shift left until tmp >= length.
    int tmp = 1;
    while (tmp < length) {
      tmp <<= this.CHUNK_SIZE_LOG2;
      result++;
    }
    return result;
  }

  private void setZeroLength() {
    this.length = 0;
    this.height = 1;
    root = (_booleanArray) new _booleanArray(this.$updateLabel, this.$accessPolicy, CHUNK_SIZE).$initLabels();
  }

  public void setLength(int newSize) {
    if (newSize < 0) throw new NegativeArraySizeException();
    if (newSize == 0) setZeroLength();
    
    int newHeight = getHeight(newSize);
    int oldHeight = this.height;
    int difference = newHeight - oldHeight;
    this.height = newHeight;
    this.length = newSize;

    // Set root and null out unnecessary stuff.
    if (difference > 0) {
      // Make sure the leaves are at the right level - push down the root.
      if (oldHeight == 1) {
        _ObjectArray newRoot = (_ObjectArray) new _ObjectArray(this.$updateLabel, this.$accessPolicy, _booleanArray.class, CHUNK_SIZE).$initLabels();
        newRoot.set(0, root);
        root = newRoot;
        difference--;
      }
      for (int count = 0; count < difference; count++) {
        _ObjectArray newRoot = (_ObjectArray) new _ObjectArray(this.$updateLabel, this.$accessPolicy, _ObjectArray.class, CHUNK_SIZE).$initLabels();
        newRoot.set(0, root);
        root = newRoot;
      }
    } else if (difference < 0) {
      // Truncate the last so many array slots.
      if (newHeight == 1) difference++;
      for (int count = 0; count < -difference; count++) {
        _ObjectArray rootArray = (_ObjectArray) ((_ObjectArray) root).get(0);
        root = rootArray;
      }
      if (newHeight == 1) {
        _booleanArray rootArray = (_booleanArray) ((_ObjectArray) root).get(0);
        root = rootArray;
      }

      if (newHeight != 1) {
        // Null out the part of the tree that shouldn't exist anymore.
        _ObjectArray curNode = (_ObjectArray) root;
        int curIndex = newSize - 1;
        int curHeight = newHeight;
        int counter = newHeight - 1;
        int firstDigit;
        while (curHeight > 1 && curNode != null) {
          firstDigit = (curIndex >> (counter * this.CHUNK_SIZE_LOG2));
          for (int count = firstDigit + 1; count < this.CHUNK_SIZE; count++) {
            curNode.set(count, null);
          }
          curNode = (_ObjectArray) curNode.get(firstDigit);
          curIndex = (curIndex & ((1 << counter * this.CHUNK_SIZE_LOG2) - 1));
          counter -= this.CHUNK_SIZE_LOG2;
          curHeight--;
        }
      }
    }
  }

  public boolean get(int i) {
    if (i >= length) throw new ArrayIndexOutOfBoundsException();
    Object node = root;
    int level = height;
    int c = this.CHUNK_SIZE_LOG2;
    int counter = (level - 1) * c;
    int firstDigit;
    while (level > 1) {
      firstDigit = (i >> counter);
      node = ((_ObjectArray) node).get(firstDigit);
      if (node == null) {
        return DEFAULT_VALUE;
      }
      i = (i & ((1 << counter) - 1));
      counter -= c;
      level--;
    }
    return ((_booleanArray) node).get(i);
  }

  public boolean set(int i, boolean data) {
    if (i >= length) throw new ArrayIndexOutOfBoundsException();
    Object node = root;
    int level = height;
    int c = this.CHUNK_SIZE_LOG2;
    int counter = (level - 1) * c;
    int firstDigit;
    Object nextObject;
    _ObjectArray oArray;
    while (level > 1) {
      firstDigit = (i >> counter);
      oArray = (_ObjectArray) node;
      nextObject = oArray.get(firstDigit);
      if (nextObject == null) {
        // Writing to a node that doesn't exist yet. Time to create it.
        switch (level) {
        case 3:
          nextObject = (_ObjectArray) new _ObjectArray(this.$updateLabel, this.$accessPolicy, _booleanArray.class, CHUNK_SIZE).$initLabels();
          break;
        case 2:
          nextObject = (_booleanArray) new _booleanArray(this.$updateLabel, this.$accessPolicy, CHUNK_SIZE).$initLabels();
          break;
        default:
          nextObject = (_ObjectArray) new _ObjectArray(this.$updateLabel, this.$accessPolicy, _ObjectArray.class, CHUNK_SIZE).$initLabels();
        }
        oArray.set(firstDigit, nextObject);
      }
      node = nextObject;
      i = (i & ((1 << counter) - 1));
      counter -= c;
      level--;
    }
    return ((_booleanArray) node).set(i, data);
  }
}
