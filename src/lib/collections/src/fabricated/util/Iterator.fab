/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabricated.util;

/**
 * An iterator interface for the Jif collection framework.
 */
public interface Iterator[label L] {
    boolean{L} hasNext{L}();
    
    Object{L} next{L}() throws (NoSuchElementException{L}, ConcurrentModificationException{L});

    /**
     * Remove from the list the element last returned by a call to next or
     * previous (optional operation). This method may only be called if neither
     * add nor remove have been called since the last call to next or previous.
     *
     * @throws IllegalStateException if neither next or previous have been
     *         called, or if add or remove has been called since the last call
     *         to next or previous
     * @throws UnsupportedOperationException if this ListIterator does not
     *         support the remove operation
     */
    void remove{L}() throws (IllegalStateException{L}, UnsupportedOperationException{L}, 
        ConcurrentModificationException{L});
}
