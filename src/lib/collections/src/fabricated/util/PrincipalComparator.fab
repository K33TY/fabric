package fabricated.util;

public class PrincipalComparator[label L] implements Comparator[L] {
  public boolean{L} equals{L}(Object{L} a, Object{L} b) throws (ClassCastException{L}, NullPointerException{L}) {
      if (L <= new label {a.store$→}) {
          final Principal as = (Principal)a;
          if ( L <= new label {b.store$→}) {
            if (new label {as←} <= L) {
              final Principal bs = (Principal)b;
              // for access + as must be able to see bs
              if (as.store$ actsfor as // should be unnecessary
                  && L <= new label {as→}) {
                  return as.equals(bs);
              } /*TODO: different ex type */ else throw new ClassCastException("Principal is not trusted to see label"); 
            } /*TODO: different exc type */ else throw new ClassCastException("Principal is not trusted to compute equality"); 
          } else throw new ClassCastException("Casting to Principal could cause an unsafe fetch");
      } else throw new ClassCastException("Casting to Principal could cause an unsafe fetch");
  }

  public int{L} compare{L}(Object{L} a, Object{L} b) throws (UnsupportedOperationException{L},ClassCastException{L}, NullPointerException{L}) {
      throw new UnsupportedOperationException();
  }

  public int{L} hashCode{L}(Object{L} a) throws (UnsupportedOperationException{L},ClassCastException{L}, NullPointerException{L}) {
    if (L <= new label {a.store$→}) {
        final Principal as = (Principal)a;
        if (new label {as←} <= L) {
          if (as.store$ actsfor as // should be unnecessary
              && L <= new label {as→}
              && new label {as→} <= L) {
              String name = as.name();
              return name.hashCode();
          } /*TODO: different ex type */ else throw new ClassCastException("Principal is not trusted to see label"); 
        } /*TODO: different ex type */ else throw new ClassCastException("Principal is not trusted to compute hashcode"); 
    } else throw new ClassCastException("Casting to Principal could cause an unsafe fetch");
  }
}
