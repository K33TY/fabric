package fabricated.util;
/**
 * A class which implements Map.Entry. It is shared by HashMap, TreeMap,
 * Hashtable, and Collections. It is not specified by the JDK, but makes
 * life much easier.
 *
 * @author Jon Zeppieri
 * @author Eric Blake (ebb9@email.byu.edu)
 */
public class BasicMapEntry[label L] implements MapEntry[L]
{
  /**
   * The key. Package visible for direct manipulation.
   */
  Object{L} key;

  /**
   * The value. Package visible for direct manipulation.
   */
  Object{L} value;

  /**
   * Basic constructor initializes the fields.
   * @param newKey the key
   * @param newValue the value
   */
  BasicMapEntry{L}(Object{L} key, Object{L} value)
  {
    this.key = key;
    this.value = value;
  }

  /**
   * Get the key corresponding to this entry.
   *
   * @return the key
   */
  public final Object{L} getKey()
  {
    return key;
  }

  /**
   * Get the value corresponding to this entry. If you already called
   * Iterator.remove(), the behavior undefined, but in this case it works.
   *
   * @return the value
   */
  public final Object{L} getValue()
  {
    return value;
  }

  /**
   * Replaces the value with the specified object. This writes through
   * to the map, unless you have already called Iterator.remove(). It
   * may be overridden to restrict a null value.
   *
   * @param newVal the new value to store
   * @return the old value
   * @throws NullPointerException if the map forbids null values.
   * @throws UnsupportedOperationException if the map doesn't support
   *          <code>put()</code>.
   * @throws ClassCastException if the value is of a type unsupported
   *         by the map.
   * @throws IllegalArgumentException if something else about this
   *         value prevents it being stored in the map.
   */
  public Object{L} setValue{L}(Object{L} newVal)
  {
    Object r = value;
    value = newVal;
    return r;
  }
} // class BasicMapEntry
