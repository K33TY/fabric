/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabricated.util;

// NOTE: This implementation has some nasty coding style in order to
// support LinkedHashMap, which extends this.

/**
 * This class provides a hashtable-backed implementation of the
 * Map interface.
 * <p>
 *
 * It uses a hash-bucket approach; that is, hash collisions are handled
 * by linking the new node off of the pre-existing node (or list of
 * nodes).  In this manner, techniques such as linear probing (which
 * can cause primary clustering) and rehashing (which does not fit very
 * well with Java's method of precomputing hash codes) are avoided.
 * <p>
 *
 * Under ideal circumstances (no collisions), HashMap offers O(1)
 * performance on most operations (<code>containsValue()</code> is,
 * of course, O(n)).  In the worst case (all keys map to the same
 * hash code -- very unlikely), most operations are O(n).
 * <p>
 *
 * HashMap is part of the JDK1.2 Collections API.  It differs from
 * Hashtable in that it accepts the null key and null values, and it
 * does not support "Enumeration views." Also, it is not synchronized;
 * if you plan to use it in multiple threads, consider using:<br>
 * <code>Map m = Collections.synchronizedMap(new HashMap(...));</code>
 * <p>
 *
 * The iterators are <i>fail-fast</i>, meaning that any structural
 * modification, except for <code>remove()</code> called on the iterator
 * itself, cause the iterator to throw a
 * <code>ConcurrentModificationException</code> rather than exhibit
 * non-deterministic behavior.
 *
 * @author Jon Zeppieri
 * @author Jochen Hoenicke
 * @author Bryce McKinlay
 * @author Eric Blake (ebb9@email.byu.edu)
 * @see Object#hashCode()
 * @see Collection
 * @see Map
 * @see TreeMap
 * @see LinkedHashMap
 * @see IdentityHashMap
 * @see Hashtable
 * @since 1.2
 * @status updated to 1.4
 */
public class HashMap[label L] extends AbstractMap[L]
  implements Map[L]
{
  /**
   * Default number of buckets. This is the value the JDK 1.3 uses. Some
   * early documentation specified this value as 101. That is incorrect.
   * Package visible for use by HashSet.
   */
  static final int{*<-} DEFAULT_CAPACITY = 11;

  /**
   * The default load factor; this is explicitly specified by the spec.
   * Package visible for use by HashSet.
   */
  static final float{*<-} DEFAULT_LOAD_FACTOR = 0.75f;

  /**
   * The rounded product of the capacity and the load factor; when the number
   * of elements exceeds the threshold, the HashMap calls
   * <code>rehash()</code>.
   * @serial the threshold for rehashing
   */
  private int{L} threshold;

  /**
   * Load factor of this HashMap:  used in computing the threshold.
   * Package visible for use by HashSet.
   * @serial the load factor
   */
  final float{L} loadFactor;

  /**
   * Array containing the actual key-value mappings.
   * Package visible for use by nested and subclasses.
   */
  HashEntry[L]{L}[]{L} buckets;

  /**
   * Counts the number of modifications this HashMap has undergone, used
   * by Iterators to know when to throw ConcurrentModificationExceptions.
   * Package visible for use by nested and subclasses.
   */
  int{L} modCount;

  /**
   * The size of this HashMap:  denotes the number of key-value pairs.
   * Package visible for use by nested and subclasses.
   */
  int{L} size;

  /**
   * The cache for {@link #entrySet()}.
   */
  private Set[L]{L} entries;

  /**
   * Construct a new HashMap with the default capacity (11) and the default
   * load factor (0.75).
   */
  public HashMap{L}(Comparator[L]{L} keyCompare, Comparator[L]{L} valCompare) 
      throws (UnsupportedOperationException{L}, ClassCastException{L}, 
          IllegalArgumentException{L}, NullPointerException{L})
  {
    this(keyCompare, valCompare,
        DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
  }

  /**
   * Construct a new HashMap from the given Map, with initial capacity
   * the greater of the size of <code>m</code> or the default of 11.
   * <p>
   *
   * Every element in Map m will be put into this new HashMap.
   *
   * @param m a Map whose key / value pairs will be put into the new HashMap.
   *        <b>NOTE: key / value pairs are not cloned in this constructor.</b>
   * @throws NullPointerException if m is null
   */
  public HashMap{L}(Comparator[L]{L} keyCompare, Comparator[L]{L} valCompare, Map[L]{L} m) 
      throws (UnsupportedOperationException{L}, ClassCastException{L}, 
          IllegalArgumentException{L}, NullPointerException{L})
  {
    this(keyCompare, valCompare,
        Math.max(m.size() * 2, DEFAULT_CAPACITY), DEFAULT_LOAD_FACTOR);
    putAll(m);
  }

  /**
   * Construct a new HashMap with a specific inital capacity and
   * default load factor of 0.75.
   *
   * @param initialCapacity the initial capacity of this HashMap (&gt;=0)
   * @throws IllegalArgumentException if (initialCapacity &lt; 0)
   */
  public HashMap{L}(Comparator[L]{L} keyCompare, Comparator[L]{L} valCompare, 
      int{L} initialCapacity) throws (IllegalArgumentException{L})
  {
    this(keyCompare, valCompare,
        initialCapacity, DEFAULT_LOAD_FACTOR);
  }

  /**
   * Construct a new HashMap with a specific inital capacity and load factor.
   *
   * @param initialCapacity the initial capacity (&gt;=0)
   * @param loadFactor the load factor (&gt; 0, not NaN)
   * @throws IllegalArgumentException if (initialCapacity &lt; 0) ||
   *                                     ! (loadFactor &gt; 0.0)
   */
  public HashMap{L}(Comparator[L]{L} keyCompare, Comparator[L]{L} valCompare, 
      int{L} initialCapacity, float{L} loadFactor) throws (IllegalArgumentException{L})
  {
    this.loadFactor = loadFactor;
    super(keyCompare, valCompare);       
    if (initialCapacity < 0)
      throw new IllegalArgumentException("Illegal Capacity: "
                                         + initialCapacity);
    if (! (loadFactor > 0)) // check for NaN too
      throw new IllegalArgumentException("Illegal Load: " + loadFactor);
    
    int _initialCapacity = initialCapacity;    
    if (_initialCapacity == 0)
      _initialCapacity = 1;
    
    buckets = new HashEntry[L][_initialCapacity];
    threshold = (int) (_initialCapacity * loadFactor);
  }

  /**
   * Returns the number of kay-value mappings currently in this Map.
   *
   * @return the size
   */
  public int{L} size{L}()
  {
    return size;
  }

  /**
   * Returns true if there are no key-value mappings currently in this Map.
   *
   * @return <code>size() == 0</code>
   */
  public boolean{L} isEmpty{L}()
  {
    return size == 0;
  }

  /**
   * Return the value in this HashMap associated with the supplied key,
   * or <code>null</code> if the key maps to nothing.  NOTE: Since the value
   * could also be null, you must use containsKey to see if this key
   * actually maps to something.
   *
   * @param key the key for which to fetch an associated value
   * @return what the key maps to, if present
   * @see #put(Object, Object)
   * @see #containsKey(Object)
   */
  public Object{L} get{L}(Object{L} key)
  {
    int idx = hash(key);
    HashEntry e = buckets[idx];
    while (e != null)
    {
      if (keyCompare.equals(key, e.key))
        return e.value;
      e = e.next;
    }
    return null;
  }

  /**
   * Returns true if the supplied object <code>equals()</code> a key
   * in this HashMap.
   *
   * @param key the key to search for in this HashMap
   * @return true if the key is in the table
   * @see #containsValue(Object)
   */
  public boolean{L} containsKey{L}(Object{L} key)
  {
    int idx = hash(key);
    HashEntry e = buckets[idx];
    while (e != null)
    {
      if (keyCompare.equals(key, e.key))
        return true;
      e = e.next;
    }
    return false;
  }

  /**
   * Puts the supplied value into the Map, mapped by the supplied key.
   * The value may be retrieved by any object which <code>equals()</code>
   * this key. NOTE: Since the prior value could also be null, you must
   * first use containsKey if you want to see if you are replacing the
   * key's mapping.
   *
   * @param key the key used to locate the value
   * @param value the value to be stored in the HashMap
   * @return the prior mapping of the key, or null if there was none
   * @see #get(Object)
   * @see Object#equals(Object)
   */
  public Object{L} put{L}(Object{L} key, Object{L} value) throws (UnsupportedOperationException{L}, ClassCastException{L}, 
      IllegalArgumentException{L}, NullPointerException{L})
  {
    int idx = hash(key);
    HashEntry e = buckets[idx];

    while (e != null)
      {
        if (keyCompare.equals(key, e.key))
          {
            e.access(); // Must call this for bookkeeping in LinkedHashMap.
            Object r = e.value;
            e.value = value;
            return r;
          }
        else
          e = e.next;
      }

    // At this point, we know we need to add a new entry.
    modCount++;
    if (++size > threshold)
      {
        rehash();
        // Need a new hash value to suit the bigger table.
        idx = hash(key);
      }

    // LinkedHashMap cannot override put(), hence this call.
    addEntry(key, value, idx, true);
    return null;
  }

  /**
   * Copies all elements of the given map into this hashtable.  If this table
   * already has a mapping for a key, the new mapping replaces the current
   * one.
   *
   * @param m the map to be hashed into this
   */
  public void putAll{L}(Map[L]{L} m) throws (UnsupportedOperationException{L}, ClassCastException{L}, 
      IllegalArgumentException{L}, NullPointerException{L})
  {
    final Store localStore = worker$.getLocalStore();
    if (L <= new label {*<-localStore} && new label {*->localStore} <= L) {
      Iterator itr = entrySet().iterator(localStore); 
      while (itr.hasNext())
      {
        MapEntry e = (MapEntry) itr.next();
        // Optimize in case the Entry is one of our own.
        // XXX: Is this really an optimization in Fabric?
        if (e instanceof BasicMapEntry[L])
        {
          BasicMapEntry entry = (BasicMapEntry) e;
          put(entry.key, entry.value);
        }
        else
          put(e.getKey(), e.getValue());
      }
    }
    else 
      throw new Error("Cannot create iterator on local store.");
  }
  
  /**
   * Removes from the HashMap and returns the value which is mapped by the
   * supplied key. If the key maps to nothing, then the HashMap remains
   * unchanged, and <code>null</code> is returned. NOTE: Since the value
   * could also be null, you must use containsKey to see if you are
   * actually removing a mapping.
   *
   * @param key the key used to locate the value to remove
   * @return whatever the key mapped to, if present
   */
  public Object{L} remove{L}(Object{L} key)
  {
    int idx = hash(key);
    HashEntry e = buckets[idx];
    HashEntry last = null;

    while (e != null)
      {
        if (keyCompare.equals(key, e.key))
          {
            modCount++;
            if (last == null)
              buckets[idx] = e.next;
            else
              last.next = e.next;
            size--;
            // Method call necessary for LinkedHashMap to work correctly.
            return e.cleanup();
          }
        last = e;
        e = e.next;
      }
    return null;
  }

  /**
   * Clears the Map so it has no keys. This is O(1).
   */
  public void clear{L}()
  {
    if (size != 0)
    {
      modCount++;
      for (int i = 0; i < buckets.length; i++) buckets[i] = null;
      size = 0;
    }
  }

  /**
   * Returns true if this HashMap contains a value <code>o</code>, such that
   * <code>o.equals(value)</code>.
   *
   * @param value the value to search for in this HashMap
   * @return true if at least one key maps to the value
   * @see #containsKey(Object)
   */
  public boolean{L} containsValue{L}(Object{L} value)
  {
    for (int i = buckets.length - 1; i >= 0; i--)
    {
      HashEntry e = buckets[i];
      while (e != null)
        {
          if (keyCompare.equals(value, e.value))
            return true;
          e = e.next;
        }
    }
    return false;
  }

  /**
   * Returns a "set view" of this HashMap's keys. The set is backed by the
   * HashMap, so changes in one show up in the other.  The set supports
   * element removal, but not element addition.
   *
   * @return a set view of the keys
   * @see #values()
   * @see #entrySet()
   */
  public Set[L]{L} keySet{L}()
  {
//    if (keys == null)
//      // Create an AbstractSet with custom implementations of those methods
//      // that can be overridden easily and efficiently.
//      keys = (AbstractSet) new AbstractSet()
//      {
//        public int size()
//        {
//          return size;
//        }
//
//        public Iterator iterator(fabric.worker.Store store)
//        {
//          // Cannot create the iterator directly, because of LinkedHashMap.
//          return HashMap.this.iterator(store, KEYS);
//        }
//
//        public void clear()
//        {
//          HashMap.this.clear();
//        }
//
//        public boolean contains(Object o)
//        {
//          return containsKey(o);
//        }
//
//        public boolean remove(Object o)
//        {
//          // Test against the size of the HashMap to determine if anything
//          // really got removed. This is necessary because the return value
//          // of HashMap.remove() is ambiguous in the null case.
//          int oldsize = size;
//          HashMap.this.remove(o);
//          return oldsize != size;
//        }
//
//        public Object $initLabels() {
//          // XXX What should this be?  Using completely permissive values for now.
//          // update label: {_ <-}
//          // access policy: {_ ->}
//          this.$updateLabel = LabelUtil.noComponents();
//          this.$accessPolicy = LabelUtil.bottomConf();
//
//          return this;
//        }
//      }.fabric$util$AbstractSet$();
//    return keys;
    return null;
  }

  /**
   * Returns a "collection view" (or "bag view") of this HashMap's values.
   * The collection is backed by the HashMap, so changes in one show up
   * in the other.  The collection supports element removal, but not element
   * addition.
   *
   * @return a bag view of the values
   * @see #keySet()
   * @see #entrySet()
   */
  public Collection[L]{L} values{L}()
  {
//    if (values == null)
//      // We don't bother overriding many of the optional methods, as doing so
//      // wouldn't provide any significant performance advantage.
//      values = (AbstractCollection) new AbstractCollection()
//      {
//        public int size()
//        {
//          return size;
//        }
//
//        public Iterator iterator(fabric.worker.Store store)
//        {
//          // Cannot create the iterator directly, because of LinkedHashMap.
//          return HashMap.this.iterator(store, VALUES);
//        }
//
//        public void clear()
//        {
//          HashMap.this.clear();
//        }
//
//        public Object $initLabels() {
//          // XXX What should this be?  Using completely permissive values for now.
//          // update label: {_ <-}
//          // access policy: {_ ->}
//          this.$updateLabel = LabelUtil.noComponents();
//          this.$accessPolicy = LabelUtil.bottomConf();
//
//          return this;
//        }
//      }.fabric$util$AbstractCollection$();
//    return values;
    return null;
  }

  /**
   * Returns a "set view" of this HashMap's entries. The set is backed by
   * the HashMap, so changes in one show up in the other.  The set supports
   * element removal, but not element addition.<p>
   *
   * Note that the iterators for all three views, from keySet(), entrySet(),
   * and values(), traverse the HashMap in the same sequence.
   *
   * @return a set view of the entries
   * @see #keySet()
   * @see #values()
   * @see Map.Entry
   */
  public Set[L]{L} entrySet{L}()
  {
    if (entries == null)
      // Create an AbstractSet with custom implementations of those methods
      // that can be overridden easily and efficiently.
      entries = new HashEntrySet(this);      
    return entries;
  }

  /**
   * Helper method for put, that creates and adds a new Entry.  This is
   * overridden in LinkedHashMap for bookkeeping purposes.
   *
   * @param key the key of the new Entry
   * @param value the value
   * @param idx the index in buckets where the new Entry belongs
   * @param callRemove whether to call the removeEldestEntry method
   * @see #put(Object, Object)
   */
  void addEntry{L}(Object{L} key, Object{L} value, int{L} idx, boolean{L} callRemove)
  {
    HashEntry e = (HashEntry) new HashEntry(key, value);
    e.next = buckets[idx];
    buckets[idx] = e;
  }

  /**
   * Helper method for entrySet(), which matches both key and value
   * simultaneously.
   *
   * @param o the entry to match
   * @return the matching entry, if found, or null
   * @see #entrySet()
   */
  // Package visible, for use in nested classes.
  final HashEntry[L]{L} getEntry{L}(Object{L} o)
  {
    if (! (o instanceof MapEntry[L]))
      return null;
    MapEntry me = (MapEntry) o;
    Object key = me.getKey();
    int idx = hash(key);
    HashEntry e = buckets[idx];
    while (e != null)
    {
      if (keyCompare.equals(e.key, key))
        return valCompare.equals(e.value, me.getValue()) ? e : null;
      e = e.next;
    }
    return null;
  }

  /**
   * Helper method that returns an index in the buckets array for `key'
   * based on its hashCode().  Package visible for use by subclasses.
   *
   * @param key the key
   * @return the bucket number
   */
  final int{L} hash{L}(Object{L} key)
  {
    return key == null ? 0 : Math.abs(keyCompare.hashCode(key) % buckets.length);
  }

  /**
   * Generates a parameterized iterator.  Must be overrideable, since
   * LinkedHashMap iterates in a different order.
   *
   * @param type {@link #KEYS}, {@link #VALUES}, or {@link #ENTRIES}
   * @return the appropriate iterator
   */
  Iterator[L]{L} iterator{L}(int{L} type)
  {
    return new HashIterator(this, type);
  }

  /**
   * Generates a parameterized iterator.  Must be overrideable, since
   * LinkedHashMap iterates in a different order.
   *
   * @param type {@link #KEYS}, {@link #VALUES}, or {@link #ENTRIES}
   * @return the appropriate iterator
   */
  Iterator[L]{L} iterator{L}(Store{L} store, int{L} type) where L <= {*<-store}, {*->store} <= L
  {
    return new HashIterator@store(this, type);
  }

  /**
   * Increases the size of the HashMap and rehashes all keys to new
   * array indices; this is called when the addition of a new value
   * would cause size() &gt; threshold. Note that the existing Entry
   * objects are reused in the new hash table.
   *
   * <p>This is not specified, but the new size is twice the current size
   * plus one; this number is not always prime, unfortunately.
   */
  private void rehash{L}()
  {
    HashEntry{L}[] oldBuckets = buckets;

    int newcapacity = (buckets.length * 2) + 1;
    threshold = (int) (newcapacity * loadFactor);
    buckets = new HashEntry[L][newcapacity];

    for (int i = oldBuckets.length - 1; i >= 0; i--)
      {
        HashEntry e = oldBuckets[i];
        while (e != null)
          {
            int idx = hash(e.key);
            HashEntry dest = buckets[idx];
            HashEntry next = e.next;
            e.next = buckets[idx];
            buckets[idx] = e;
            e = next;
          }
      }
  }
}
  
/**
 * Class to represent an entry in the hash table. Holds a single key-value
 * pair. Package visible for use by subclass.
 *
 * @author Eric Blake (ebb9@email.byu.edu)
 */
class HashEntry[label L] extends BasicMapEntry[L]
{
  /**
   * The next entry in the linked list. Package visible for use by subclass.
   */
  HashEntry[L]{L} next;

  /**
   * Simple constructor.
   * @param key the key
   * @param value the value
   */
  HashEntry{L}(Object{L} key, Object{L} value)
  {
    super(key, value);
  }

  /**
   * Called when this entry is accessed via {@link #put(Object, Object)}.
   * This version does nothing, but in LinkedHashMap, it must do some
   * bookkeeping for access-traversal mode.
   */
  void access{L}()
  {
  }

  /**
   * Called when this entry is removed from the map. This version simply
   * returns the value, but in LinkedHashMap, it must also do bookkeeping.
   *
   * @return the value of this key as it is removed
   */
  Object{L} cleanup{L}()
  {
    return value;
  }
}

class HashEntrySet[label L] extends AbstractSet[L] {
  
  final HashMap[L]{L} map;
  
  HashEntrySet{L}(HashMap[L]{L} map) throws (NullPointerException{L})
  {
    this.map = map;
    super(map.keyCompare);
  }
  
  public int{L} size{L}()
  {
    return map.size;
  }

  public Iterator[L]{L} iterator{L}()
  {
    return map.iterator(AbstractMap.ENTRIES);
  }

  public Iterator[L]{L} iterator{L}(Store{L} store) where L <= {*<-store}, {*->store} <= L
  {
    return map.iterator(store, AbstractMap.ENTRIES);
  }

  public void clear{L}() throws (UnsupportedOperationException{L})
  {
    map.clear();
  }

  public boolean{L} contains{L}(Object{L} o) throws (ClassCastException{L}, NullPointerException{L})
  {
    return map.getEntry(o) != null;
  }

  public boolean{L} remove{L}(Object{L} o) throws (UnsupportedOperationException{L}, 
      ClassCastException{L}, NullPointerException{L}) 
  {
    HashEntry e = map.getEntry(o);
    if (e != null)
      {
        map.remove(e.key);
        return true;
      }
    return false;
  }
}

/**
 * Iterate over HashMap's entries.
 * This implementation is parameterized to give a sequential view of
 * keys, values, or entries.
 *
 * @author Jon Zeppieri
 */
final class HashIterator[label L] implements Iterator[L]
{
  /**
   * The type of this Iterator: {@link #KEYS}, {@link #VALUES},
   * or {@link #ENTRIES}.
   */
  private final int{L} type;
  /**
   * The number of modifications to the backing HashMap that we know about.
   */
  private int{L} knownMod;
  /** The number of elements remaining to be returned by next(). */
  private int{L} count;
  /** Current index in the physical hash table. */
  private int{L} idx;
  /** The last Entry returned by a next() call. */
  private HashEntry[L]{L} last;
  /**
   * The next entry that should be returned by next(). It is set to something
   * if we're iterating through a bucket that contains multiple linked
   * entries. It is null if next() needs to find a new bucket.
   */
  private HashEntry[L]{L} next;
  
  private final HashMap[L]{L} map;
  /**
   * Construct a new HashIterator with the supplied type.
   * @param type {@link #KEYS}, {@link #VALUES}, or {@link #ENTRIES}
   */
  HashIterator{L}(HashMap[L]{L} map, int{L} type) throws (NullPointerException{L})
  {
    this.type = type;
    this.map = map;
    super();
    this.knownMod = map.modCount;
    this.count = map.size;
    this.idx = map.buckets.length;
  }

  /**
   * Returns true if the Iterator has more elements.
   * @return true if there are more elements
   */
  public boolean{L} hasNext{L}()
  {
    return count > 0;
  }

  /**
   * Returns the next element in the Iterator's sequential view.
   * @return the next element
   * @throws ConcurrentModificationException if the HashMap was modified
   * @throws NoSuchElementException if there is none
   */
  public Object{L} next{L}() throws (ConcurrentModificationException{L}, NoSuchElementException{L})
  {
    if (knownMod != map.modCount)
      throw new ConcurrentModificationException();
    if (count == 0)
      throw new NoSuchElementException();
    count--;
    HashEntry e = next;

    while (e == null)
      e = map.buckets[--idx];

    next = e.next;
    last = e;
    if (type == AbstractMap.VALUES)
      return e.value;
    if (type == AbstractMap.KEYS)
      return e.key;
    return e;
  }

  /**
   * Removes from the backing HashMap the last element which was fetched
   * with the <code>next()</code> method.
   * @throws ConcurrentModificationException if the HashMap was modified
   * @throws IllegalStateException if called when there is no last element
   */
  public void remove{L}() throws (ConcurrentModificationException{L}, IllegalStateException{L})
  {
    if (knownMod != map.modCount)
      throw new ConcurrentModificationException();
    if (last == null)
      throw new IllegalStateException();

    map.remove(last.key);
    last = null;
    knownMod++;
  }
}