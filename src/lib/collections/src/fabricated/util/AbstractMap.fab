/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabricated.util;

/**
 * An abstract implementation of Map to make it easier to create your own
 * implementations. In order to create an unmodifiable Map, subclass
 * AbstractMap and implement the <code>entrySet</code> (usually via an
 * AbstractSet).  To make it modifiable, also implement <code>put</code>,
 * and have <code>entrySet().iterator(Store)</code> support <code>remove</code>.
 * <p>
 *
 * It is recommended that classes which extend this support at least the
 * no-argument constructor, and a constructor which accepts another Map.
 * Further methods in this class may be overridden if you have a more
 * efficient implementation.
 *
 * @author Original author unknown
 * @author Bryce McKinlay
 * @author Eric Blake (ebb9@email.byu.edu)
 * @see Map
 * @see Collection
 * @see HashMap
 * @see LinkedHashMap
 * @see TreeMap
 * @see WeakHashMap
 * @see IdentityHashMap
 * @since 1.2
 * @status updated to 1.4
 */
public abstract class AbstractMap[label L] implements Map[L]
{
  /** An "enum" of iterator types. */
  // Package visible for use by subclasses.
  static final int{*<-} KEYS = 0,
                   VALUES = 1,
                   ENTRIES = 2;

  /**
   * The cache for {@link #keySet()}.
   */
  // Package visible for use by subclasses.
  Set[L]{L} keys;

  /**
   * The cache for {@link #values()}.
   */
  // Package visible for use by subclasses.
  Collection[L]{L} values;

  /**
   * 
   */
  final Comparator[L]{L} keyCompare;
  final Comparator[L]{L} valCompare;

  /**
   * The main constructor, for use by subclasses.
   */
  protected AbstractMap{L}(Comparator[L]{L} keyCompare, Comparator[L]{L} valCompare)
  {
    this.keyCompare = keyCompare;
    this.valCompare = valCompare;
    super();
  }

  /**
   * Returns a set view of the mappings in this Map.  Each element in the
   * set must be an implementation of Map.Entry.  The set is backed by
   * the map, so that changes in one show up in the other.  Modifications
   * made while an iterator is in progress cause undefined behavior.  If
   * the set supports removal, these methods must be valid:
   * <code>Iterator.remove</code>, <code>Set.remove</code>,
   * <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>.
   * Element addition is not supported via this set.
   *
   * @return the entry set
   * @see Map.Entry
   */
  public abstract Set[L]{L} entrySet{L}();

  /**
   * Remove all entries from this Map (optional operation). This default
   * implementation calls entrySet().clear(). NOTE: If the entry set does
   * not permit clearing, then this will fail, too. Subclasses often
   * override this for efficiency.  Your implementation of entrySet() should
   * not call <code>AbstractMap.clear</code> unless you want an infinite loop.
   *
   * @throws UnsupportedOperationException if <code>entrySet().clear()</code>
   *         does not support clearing.
   * @see Set#clear()
   */
  public void clear{L}()
  {
    entrySet().clear();
  }

  /**
   * Returns true if this contains a mapping for the given key. This
   * implementation does a linear search, O(n), over the
   * <code>entrySet()</code>, returning <code>true</code> if a match
   * is found, <code>false</code> if the iteration ends. Many subclasses
   * can implement this more efficiently.
   *
   * @param key the key to search for
   * @return true if the map contains the key
   * @throws NullPointerException if key is <code>null</code> but the map
   *         does not permit null keys
   * @see #containsValue(Object)
   */
  public boolean{L} containsKey{L}(Object{L} key)
  {
    final Store localStore = worker$.getLocalStore();
    if (L <= new label {*<-localStore} && new label {*->localStore} <= L) {
      Iterator entries = entrySet().iterator(localStore); 
      int pos = size();
      while (--pos >= 0) {
        MapEntry entry = (MapEntry) entries.next();
        if (keyCompare.equals(key, entry.getKey()))
          return true;
      }
      return false;
    }
    else
      throw new Error("Cannot create iterator on local store.");
  }

  /**
   * Returns true if this contains at least one mapping with the given value.
   * This implementation does a linear search, O(n), over the
   * <code>entrySet()</code>, returning <code>true</code> if a match
   * is found, <code>false</code> if the iteration ends. A match is
   * defined as a value, v, where <code>(value == null ? v == null :
   * value.equals(v))</code>.  Subclasses are unlikely to implement
   * this more efficiently.
   *
   * @param value the value to search for
   * @return true if the map contains the value
   * @see #containsKey(Object)
   */
  public boolean{L} containsValue{L}(Object{L} value) 
      throws (ClassCastException{L}, NullPointerException{L})
  {
    final Store localStore = worker$.getLocalStore();
    if (L <= new label {*<-localStore} && new label {*->localStore} <= L) {
      Iterator values = values().iterator(localStore); 
      int pos = size();
      while (--pos >= 0) {        
        if (valCompare.equals(value, values.next()))
          return true;
      }
      return false;
    }
    else
      throw new Error("Cannot create iterator on local store.");
  }

  /**
   * Returns the value mapped by the given key. Returns <code>null</code> if
   * there is no mapping.  However, in Maps that accept null values, you
   * must rely on <code>containsKey</code> to determine if a mapping exists.
   * This iteration takes linear time, searching entrySet().iterator(Store) of
   * the key.  Many implementations override this method.
   *
   * @param key the key to look up
   * @return the value associated with the key, or null if key not in map
   * @throws NullPointerException if this map does not accept null keys
   * @see #containsKey(Object)
   */
  public Object{L} get{L}(Object{L} key)        
      throws (ClassCastException{L}, NullPointerException{L})
  {
    final Store localStore = worker$.getLocalStore();
    if (L <= new label {*<-localStore} && new label {*->localStore} <= L) {
      Iterator entries = entrySet().iterator(localStore); 
      int pos = size();
      while (--pos >= 0) {
        MapEntry entry = (MapEntry) entries.next();
        if (keyCompare.equals(key, entry.getKey()))
          return entry.getValue();
      }
      return null;
    }
    else 
      throw new Error("Cannot create iterator on local store.");
  }

  /**
   * Returns true if the map contains no mappings. This is implemented by
   * <code>size() == 0</code>.
   *
   * @return true if the map is empty
   * @see #size()
   */
  public boolean{L} isEmpty{L}()
  {
    return size() == 0;
  }

  /**
   * Returns a set view of this map's keys. The set is backed by the map,
   * so changes in one show up in the other. Modifications while an iteration
   * is in progress produce undefined behavior. The set supports removal
   * if entrySet() does, but does not support element addition.
   * <p>
   *
   * This implementation creates an AbstractSet, where the iterator wraps
   * the entrySet iterator, size defers to the Map's size, and contains
   * defers to the Map's containsKey. The set is created on first use, and
   * returned on subsequent uses, although since no synchronization occurs,
   * there is a slight possibility of creating two sets.
   *
   * @return a Set view of the keys
   * @see Set#iterator(fabric.worker.Store)
   * @see #size()
   * @see #containsKey(Object)
   * @see #values()
   */
  public Set[L]{L} keySet{L}()  {
    throw new Error();
  }

  /**
   * Associates the given key to the given value (optional operation). If the
   * map already contains the key, its value is replaced. This implementation
   * simply throws an UnsupportedOperationException. Be aware that in a map
   * that permits <code>null</code> values, a null return does not always
   * imply that the mapping was created.
   *
   * @param key the key to map
   * @param value the value to be mapped
   * @return the previous value of the key, or null if there was no mapping
   * @throws UnsupportedOperationException if the operation is not supported
   * @throws ClassCastException if the key or value is of the wrong type
   * @throws IllegalArgumentException if something about this key or value
   *         prevents it from existing in this map
   * @throws NullPointerException if the map forbids null keys or values
   * @see #containsKey(Object)
   */
  public Object{L} put{L}(Object{L} key, Object{L} value) throws (UnsupportedOperationException{L}, 
      ClassCastException{L}, IllegalArgumentException{L}, NullPointerException{L})
  {
    throw new UnsupportedOperationException();
  }

  /**
   * Copies all entries of the given map to this one (optional operation). If
   * the map already contains a key, its value is replaced. This implementation
   * simply iterates over the map's entrySet(), calling <code>put</code>,
   * so it is not supported if puts are not.
   *
   * @param m the mapping to load into this map
   * @throws UnsupportedOperationException if the operation is not supported
   *         by this map.
   * @throws ClassCastException if a key or value is of the wrong type for
   *         adding to this map.
   * @throws IllegalArgumentException if something about a key or value
   *         prevents it from existing in this map.
   * @throws NullPointerException if the map forbids null keys or values.
   * @throws NullPointerException if <code>m</code> is null.
   * @see #put(Object, Object)
   */
  public void putAll{L}(Map[L]{L} m) throws (UnsupportedOperationException{L}, ClassCastException{L}, 
      IllegalArgumentException{L}, NullPointerException{L})
  {
    final Store localStore = worker$.getLocalStore();
    if (L <= new label {*<-localStore} && new label {*->localStore} <= L) {
      Iterator entries = entrySet().iterator(localStore); 
      int pos = m.size();
      while (--pos >= 0) {
          MapEntry entry = (MapEntry) entries.next();
          put(entry.getKey(), entry.getValue());
      }
    }  
  }

  /**
   * Removes the mapping for this key if present (optional operation). This
   * implementation iterates over the entrySet searching for a matching
   * key, at which point it calls the iterator's <code>remove</code> method.
   * It returns the result of <code>getValue()</code> on the entry, if found,
   * or null if no entry is found. Note that maps which permit null values
   * may also return null if the key was removed.  If the entrySet does not
   * support removal, this will also fail. This is O(n), so many
   * implementations override it for efficiency.
   *
   * @param key the key to remove
   * @return the value the key mapped to, or null if not present.
   *         Null may also be returned if null values are allowed
   *         in the map and the value of this mapping is null.
   * @throws UnsupportedOperationException if deletion is unsupported
   * @see Iterator#remove()
   */
  public Object{L} remove{L}(Object{L} key)
  {
    final Store localStore = worker$.getLocalStore();
    if (L <= new label {*<-localStore} && new label {*->localStore} <= L) {
      Iterator entries = entrySet().iterator(localStore); 
      int pos = size();
      while (--pos >= 0)
        {
          MapEntry entry = (MapEntry) entries.next();
          if (keyCompare.equals(key, entry.getKey()))
            {
              // Must get the value before we remove it from iterator.
              Object r = entry.getValue();
              entries.remove();
              return r;
            }
        }
      return null;
    }
    else 
      throw new Error("Cannot create iterator on local store.");
  }

  /**
   * Returns the number of key-value mappings in the map. If there are more
   * than Integer.MAX_VALUE mappings, return Integer.MAX_VALUE. This is
   * implemented as <code>entrySet().size()</code>.
   *
   * @return the number of mappings
   * @see Set#size()
   */
  public int{L} size{L}()
  {
    return entrySet().size();
  }

  /**
   * Returns a collection or bag view of this map's values. The collection
   * is backed by the map, so changes in one show up in the other.
   * Modifications while an iteration is in progress produce undefined
   * behavior. The collection supports removal if entrySet() does, but
   * does not support element addition.
   * <p>
   *
   * This implementation creates an AbstractCollection, where the iterator
   * wraps the entrySet iterator, size defers to the Map's size, and contains
   * defers to the Map's containsValue. The collection is created on first
   * use, and returned on subsequent uses, although since no synchronization
   * occurs, there is a slight possibility of creating two collections.
   *
   * @return a Collection view of the values
   * @see Collection#iterator(fabric.worker.Store)
   * @see #size()
   * @see #containsValue(Object)
   * @see #keySet()
   */
  public Collection[L]{L} values{L}()
  {
    throw new Error();
  }
}
