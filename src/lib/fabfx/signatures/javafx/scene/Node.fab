Compiled from "Node.java"
public abstract class javafx.scene.Node[label Term] implements javafx.event.EventTarget[Term] {
  //public final javafx.collections.ObservableMap<java.lang.Object, java.lang.Object>*/ getProperties();
  //public boolean hasProperties();
  public void setUserData{Term}(java.lang.Object{Term} d);
  public java.lang.Object{Term} getUserData();
  public final javafx.scene.Parent[Term]{Term} getParent();
  public final javafx.scene.Scene[Term]{Term} getScene();
  public final void setId{Term}(java.lang.String{Term} id);
  public final java.lang.String{Term} getId();
  public final javafx.collections.ObservableList[Term]{Term}/*<java.lang.String>*/ getStyleClass();
  public final void setStyle{Term}(java.lang.String{Term} s);
  public final java.lang.String{Term} getStyle();
  public final void setVisible{Term}(boolean{Term} b);
  public final boolean{Term} isVisible();
  //public final void setCursor(javafx.scene.Cursor c);
  //public final javafx.scene.Cursor getCursor();
  public final void setOpacity{Term}(double{Term} d);
  public final double{Term} getOpacity();
  p//ublic final void setBlendMode(javafx.scene.effect.BlendMode m);
  //public final javafx.scene.effect.BlendMode getBlendMode();
  public final void setClip{Term}(javafx.scene.Node{Term} n);
  public final javafx.scene.Node[Term]{Term} getClip();
  public final void setCache{Term}(boolean{Term} b);
  public final boolean{Term} isCache();
  //public final void setCacheHint(javafx.scene.CacheHint h);
  //public final javafx.scene.CacheHint getCacheHint();
  //public final void setEffect(javafx.scene.effect.Effect e);
  //public final javafx.scene.effect.Effect getEffect();
  //public final void setDepthTest(javafx.scene.DepthTest t);
  //public final javafx.scene.DepthTest getDepthTest();
  public final void setDisable{Term}(boolean{Term} b);
  public final boolean{Term} isDisable();
  public final void setPickOnBounds{Term}(boolean{Term} b);
  public final boolean{Term} isPickOnBounds();
  public final boolean{Term} isDisabled();
  public javafx.scene.Node[Term]{Term} lookup(java.lang.String{Term} s);
  public java.util.Set[Term]{Term}/*<javafx.scene.Node>*/ lookupAll(java.lang.String{Term} s);
  public void toBack{Term}();
  public void toFront{Term}();
  //public javafx.scene.image.WritableImage snapshot(javafx.scene.SnapshotParameters p, javafx.scene.image.WritableImage i);
  //public void snapshot(javafx.util.Callback/*<javafx.scene.SnapshotResult, java.lang.Void>*/ c, javafx.scene.SnapshotParameters p, javafx.scene.image.WritableImage w);
  public final void setOnDragEntered{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ getOnDragEntered();
  public final void setOnDragExited{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ getOnDragExited();
  public final void setOnDragOver{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ getOnDragOver();
  public final void setOnDragDropped{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ getOnDragDropped();
  public final void setOnDragDone{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.DragEvent>*/ getOnDragDone();
  //public javafx.scene.input.Dragboard startDragAndDrop(javafx.scene.input.TransferMode native[]);
  public void startFullDrag{Term}();
  public final void setManaged{Term}(boolean{Term} b);
  public final boolean{Term} isManaged();
  public final void setLayoutX{Term}(double{Term} d);
  public final double{Term} getLayoutX();
  public final void setLayoutY(double{Term} d);
  public final double{Term} getLayoutY();
  public void relocate{Term}(double{Term} d1, double{Term} d2);
  public boolean{Term} isResizable();
  //public javafx.geometry.Orientation getContentBias();
  public double{Term} minWidth(double{Term} d);
  public double{Term} minHeight(double{Term} d);
  public double{Term} prefWidth(double{Term} d);
  public double{Term} prefHeight(double{Term} d);
  public double{Term} maxWidth(double{Term} d);
  public double{Term} maxHeight(double{Term} d);
  public void resize{Term}(double{Term} d, double{Term} d);
  public final void autosize{Term}();
  public void resizeRelocate{Term}(double{Term} d1, double{Term} d2, double{Term} d3, double{Term} d4);
  public double{Term} getBaselineOffset();
  //public final javafx.geometry.Bounds getBoundsInParent();
  //public final javafx.geometry.Bounds getBoundsInLocal();
  //public final javafx.geometry.Bounds getLayoutBounds();
  public boolean contains(double{Term} d1, double{Term} d2);
  //public boolean contains(javafx.geometry.Point2D p);
  public boolean intersects(double{Term} d1, double{Term} d2, double{Term} d3, double{Term} d4);
  //public boolean intersects(javafx.geometry.Bounds b);
  //public javafx.geometry.Point2D sceneToLocal(double d1, double d2);
  //public javafx.geometry.Point2D sceneToLocal(javafx.geometry.Point2D p);
  //public javafx.geometry.Bounds sceneToLocal(javafx.geometry.Bounds b);
  //public javafx.geometry.Point2D localToScene(double d1, double d2);
  //public javafx.geometry.Point2D localToScene(javafx.geometry.Point2D p);
  //public javafx.geometry.Bounds localToScene(javafx.geometry.Bounds b);
  //public javafx.geometry.Point2D parentToLocal(double d1, double d2);
  //public javafx.geometry.Point2D parentToLocal(javafx.geometry.Point2D p);
  //public javafx.geometry.Bounds parentToLocal(javafx.geometry.Bounds b);
  //public javafx.geometry.Point2D localToParent(double d1, double d2);
  //public javafx.geometry.Point2D localToParent(javafx.geometry.Point2D p);
  //public javafx.geometry.Bounds localToParent(javafx.geometry.Bounds b);
  public final javafx.collections.ObservableList[Term]{Term}/*<javafx.scene.transform.Transform>*/ getTransforms();
  public final void setTranslateX{Term}(double{Term} d);
  public final double{Term} getTranslateX();
  public final void setTranslateY{Term}(double{Term} d);
  public final double{Term} getTranslateY();
  public final void setTranslateZ{Term}(double{Term} d);
  public final double{Term} getTranslateZ();
  public final void setScaleX{Term}(double{Term} d);
  public final double{Term} getScaleX();
  public final void setScaleY{Term}(double{Term} d);
  public final double{Term} getScaleY();
  public final void setScaleZ(double{Term} d);
  public final double{Term} getScaleZ();
  public final void setRotate(double{Term} d);
  public final double{Term} getRotate();
  //public final void setRotationAxis(javafx.geometry.Point3D p);
  //public final javafx.geometry.Point3D getRotationAxis();
  //public final javafx.scene.transform.Transform getLocalToParentTransform();
  //public final javafx.scene.transform.Transform getLocalToSceneTransform();
  public final void setMouseTransparent{Term}(boolean{Term} b);
  public final boolean{Term} isMouseTransparent();
  public final boolean{Term} isHover();
  public final boolean{Term} isPressed();
  public final void setOnContextMenuRequested{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ContextMenuEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ContextMenuEvent>*/ getOnContextMenuRequested();
  public final void setOnMouseClicked{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ getOnMouseClicked();
  public final void setOnMouseDragged{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ getOnMouseDragged();
  public final void setOnMouseEntered{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ getOnMouseEntered();
  public final void setOnMouseExited{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ getOnMouseExited();
  public final void setOnMouseMoved{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ getOnMouseMoved();
  public final void setOnMousePressed{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]/*<? super javafx.scene.input.MouseEvent>*/ getOnMousePressed();
  public final void setOnMouseReleased(javafx.event.EventHandler[Term]/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ getOnMouseReleased();
  public final void setOnDragDetected{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseEvent>*/ getOnDragDetected();
  public final void setOnMouseDragOver{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseDragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseDragEvent>*/ getOnMouseDragOver();
  public final void setOnMouseDragReleased{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseDragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseDragEvent>*/ getOnMouseDragReleased();
  public final void setOnMouseDragEntered{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseDragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseDragEvent>*/ getOnMouseDragEntered();
  public final void setOnMouseDragExited{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.MouseDragEvent>*/ eh);
  public final javafx.event.EventHandler[Term]/*<? super javafx.scene.input.MouseDragEvent>*/ getOnMouseDragExited();
  public final void setOnScrollStarted{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ScrollEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ScrollEvent>*/ getOnScrollStarted();
  public final void setOnScroll{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ScrollEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ScrollEvent>*/ getOnScroll();
  public final void setOnScrollFinished{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ScrollEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ScrollEvent>*/ getOnScrollFinished();
  public final void setOnRotationStarted{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.RotateEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.RotateEvent>*/ getOnRotationStarted();
  public final void setOnRotate{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.RotateEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.RotateEvent>*/ getOnRotate();
  public final void setOnRotationFinished{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.RotateEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.RotateEvent>*/ getOnRotationFinished();
  public final void setOnZoomStarted{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ZoomEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ZoomEvent>*/ getOnZoomStarted();
  public final void setOnZoom{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ZoomEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ZoomEvent>*/ getOnZoom();
  public final void setOnZoomFinished{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ZoomEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.ZoomEvent>*/ getOnZoomFinished();
  public final void setOnSwipeUp{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ getOnSwipeUp();
  public final void setOnSwipeDown{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ getOnSwipeDown();
  public final void setOnSwipeLeft{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ getOnSwipeLeft();
  public final void setOnSwipeRight{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.SwipeEvent>*/ getOnSwipeRight();
  public final void setOnTouchPressed{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ getOnTouchPressed();
  public final void setOnTouchMoved{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ getOnTouchMoved();
  public final void setOnTouchReleased{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ getOnTouchReleased();
  public final void setOnTouchStationary{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.TouchEvent>*/ getOnTouchStationary();
  public final void setOnKeyPressed{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.KeyEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.KeyEvent>*/ getOnKeyPressed();
  public final void setOnKeyReleased{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.KeyEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.KeyEvent>*/ getOnKeyReleased();
  public final void setOnKeyTyped{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.KeyEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.KeyEvent>*/ getOnKeyTyped();
  public final void setOnInputMethodTextChanged{Term}(javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.InputMethodEvent>*/ eh);
  public final javafx.event.EventHandler[Term]{Term}/*<? super javafx.scene.input.InputMethodEvent>*/ getOnInputMethodTextChanged();
  //public final void setInputMethodRequests(javafx.scene.input.InputMethodRequests r);
  //public final javafx.scene.input.InputMethodRequests getInputMethodRequests();
  public final boolean{Term} isFocused();
  public final void setFocusTraversable{Term}(boolean{Term} b);
  public final boolean{Term} isFocusTraversable();
  public void requestFocus{Term}();
  //public final void setEventDispatcher(javafx.event.EventDispatcher ed);
  //public final javafx.event.EventDispatcher getEventDispatcher();
  //public final /*<T extends javafx/event/Event>*/ void addEventHandler{Term}(javafx.event.EventType{Term}/*<T>*/ et, javafx.event.EventHandler[Term]{Term}/*<? super T>*/ eh);
  //public final /*<T extends javafx/event/Event>*/ void removeEventHandler{Term}(javafx.event.EventType{Term}/*<T>*/ et, javafx.event.EventHandler[Term]{Term}/*<? super T>*/ eh);
  //public final /*<T extends javafx/event/Event>*/ void addEventFilter{Term}(javafx.event.EventType{Term}/*<T>*/ et, javafx.event.EventHandler[Term]{Term}/*<? super T>*/ eh);
  //public final /*<T extends javafx/event/Event>*/ void removeEventFilter{Term}(javafx.event.EventType{Term}/*<T>*/ et, javafx.event.EventHandler[Term]{Term}/*<? super T>*/ eh);
  //public javafx.event.EventDispatchChain buildEventDispatchChain(javafx.event.EventDispatchChain e);
  public final void fireEvent{Term}(javafx.event.Event{Term} e);
}
