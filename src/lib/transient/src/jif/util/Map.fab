package jif.util;
/*
 * Jif Signature for the Map interface
 *
 */
nonfabric public interface Map[label K, label V] extends jif.lang.JifObject[{K;V}] {
    // Query Operations

    int{K} size();

    boolean{K} isEmpty();

    boolean{K;key} containsKey(jif.lang.JifObject[K] key);
    boolean{K;*lbl;lbl;key} containsKey(label lbl, jif.lang.JifObject[lbl] key);

    // the following is removed since it can be emulated using the containsKey method
    //boolean{K;value} containsValue(jif.lang.JifObject[V] value);

    jif.lang.JifObject[V]{K; key} get(jif.lang.JifObject[K] key);
    jif.lang.JifObject[V]{K; *lbl;lbl;key} get(label lbl, jif.lang.JifObject[lbl] key);

    // Modifying Operations
    jif.lang.JifObject[V]{K} put{K}(jif.lang.JifObject[K]{K} key, jif.lang.JifObject[V]{K} value);
    jif.lang.JifObject[V]{K} remove{K}(jif.lang.JifObject[K]{K} key);
    
    // convenience methods that automatically convert key Strings to jif.lang.JifStrings.
    // Note: when keys are returned, they will be returned as jif.lang.JifString[K]s
    boolean{K;key} containsKey{K}(String{K} key);
    jif.lang.JifObject[V]{K; key} get{K}(String{K} key);
    jif.lang.JifObject[V]{K; *lbl; lbl; key} get{*lbl}(label lbl, String{*lbl} key);
    jif.lang.JifObject[V]{K} put{K}(String{K} key, jif.lang.JifObject[V]{K} value);
    jif.lang.JifObject[V]{K} remove{K}(String{K} key);

    // the following is removed since it can be emulated with the put method
    //void putAll{K}(Map[K,V]{K} t);
    void clear{K}();

    // Views
    Set[K] keySet();

    // the following is removed since it can be emulated with the keySet and get methods
    //Collection[{K;V}] values();

    // Set of MapEntry[K,V]
    Set[K] entrySet(); 
}
