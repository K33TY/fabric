/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package jif.lang;

/**
 * This is a wrapper for ordinary Objects. It provides only pointer-equality on
 * the wrapped object, a constant hash value of 0, and a null to-String value. 
 */
public final class JifObjectWrapper[covariant label L] implements JifObject[L] {
  
  public final Object{L} obj;
  
  public JifObjectWrapper(Object{L} obj) {
    this.obj = obj;
  }
  
  public Object{L} getObject() {
    return obj;
  }
  
  public boolean{L; obj} equals(IDComparable[L] obj) {
    return equals(L, obj);
  }
  
  public boolean{L; *lbl; lbl; other} equals(label lbl, IDComparable[lbl] other) {
    if (!(other instanceof JifObjectWrapper[lbl])) return false;
    return this.obj == ((JifObjectWrapper[lbl]) other).obj;
  }
  
  public int{L} hashCode() {
    return 0;
  }
  
  public String{L} toString() {
    return null;
  }
}