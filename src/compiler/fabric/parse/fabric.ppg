// Assumes polyglot.jar is in classpath
include "jif/parse/jif.ppg"

package fabric.parse;

import fabric.ast.Atomic;
import fabric.ast.FabricNodeFactory;
import polyglot.parse.*;
import fabric.types.FabricTypeSystem;
import fabric.types.FabricFlags;

parser Grm extends jif.parse.Grm {:
    public final FabricTypeSystem ts;
    public final FabricNodeFactory nf;

    public Grm(Lexer l, FabricTypeSystem t, FabricNodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = t;
        nf = n;
    }
:};

terminal Token AT;
terminal Token ATOMIC;

non terminal Atomic atomic_statement;
non terminal Expr   location_expr_opt;

start with goal;


////////////////////////////////////////////////////////////////////////
// Atomic Sections                                                    //
////////////////////////////////////////////////////////////////////////

extend statement_without_trailing_substatement ::=
                    // Stmt
        atomic_statement:a {: RESULT = a; :};

atomic_statement ::=
                    // Atomic
        ATOMIC:n block:a {: RESULT = parser.nf.Atomic(parser.pos(n,a), a.statements()); :};

////////////////////////////////////////////////////////////////////////
// Locations for constructors                                         //
////////////////////////////////////////////////////////////////////////

location_expr_opt ::=
                    // Expr
            {: RESULT = null; :}
    |   AT name:a
            {: RESULT = a.toExpr(); :}
    ;

override class_instance_creation_expression ::=
                    // Expr
            NEW:x objtype_or_expr:a label_opt:lab location_expr_opt:loc LPAREN argument_list_opt:b RPAREN:y
                {:  TypeNode tn = a.toUnlabeledType();
                    if (l != null)
                        tn = parser.nf.LabeledTypeNode(parser.pos(a,l), tn, l);
                    RESULT = parser.nf.New(parser.pos(x,y), tn, loc, b); :}
    ;

override array_creation_expression ::=
        NEW:n objtype_or_expr:a dims:b location_expr_opt:loc array_initializer:c
            {: RESULT = parser.nf.NewArray(parser.pos(n,c), a.toType(),
                                       b.intValue(), loc, c); :}
    |   NEW:n primitive_type:a dim_exprs:b dims_opt:c location_expr_opt:loc
            {: RESULT = parser.nf.NewArray(parser.pos(n,b), a, b,
                                           c.intValue(), loc); :}
    |   NEW:n primitive_type:a dims:b location_expr_opt:loc array_initializer:c
            {: RESULT = parser.nf.NewArray(parser.pos(n,c), a,
                                           b.intValue(), loc, c); :}
    ;

extend modifier ::=
        ATOMIC:a
            {: RESULT = FabricFlags.ATOMIC; :}
    ;
