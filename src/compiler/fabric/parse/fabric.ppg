// Assumes jif.jar is in classpath
include "jif/parse/jif.ppg"

package fabric.parse;

import fabric.ast.*;
import jif.parse.*;
import fabric.types.FabricTypeSystem;
import fabric.types.FabricFlags;
import fabric.parse.Name;
import codebases.ast.CodebaseDecl;
import codebases.ast.CodebaseNode;
import codebases.types.NamespaceResolver;
import polyglot.types.Package;
import java.net.URI;

parser Grm extends jif.parse.Grm {:
    public final FabricTypeSystem ts;
    public final FabricNodeFactory nf;
	public final URI ns;

    public Grm(Lexer l, FabricTypeSystem t, FabricNodeFactory n, ErrorQueue q, URI ns) {
        super(l, t, n, q);
        ts = t;
        nf = n;
        this.ns = ns; 
    }

    public TypeNode fabricArray(Position pos, TypeNode n, int dims) throws Exception {
      if (dims <= 0) return n;

      if (n instanceof ArrayTypeNode && !(n instanceof FabricArrayTypeNode))
        return javaArray(n, dims);

      if (n instanceof CanonicalTypeNode) {
        Type t = ((CanonicalTypeNode) n).type();
        return nf.CanonicalTypeNode(pos(n), ts.fabricArrayOf(pos, t, dims));
      }

      return nf.FabricArrayTypeNode(pos(n), fabricArray(pos, n, dims - 1));
    }

    public TypeNode array(Position pos, TypeNode n, int dims) throws Exception {
      return fabricArray(pos, n, dims);
    }

    public TypeNode javaArray(TypeNode n, int dims) throws Exception {
      return super.array(n, dims);
    }
	
    /**
     * Converts an Amb a into an AST representing new a[][]...[]
     * @return either a NewFabricArray or an AmbNewFabricArray
     */
    public Expr toNewFabricArray(Position pos, Amb a, int dims, Expr loc)
                throws Exception {
      Expr            expr = a.toNewArray(pos, dims);
      FabricArrayInit init = null;

      if (expr instanceof NewArray) {
        NewArray newArray = (NewArray) expr;

        if (newArray.init() != null)
          init = nf.FabricArrayInit(newArray.init().position(),
                                    newArray.init().elements());

        return nf.NewFabricArray(newArray.position(),
                                 newArray.baseType(),
                                 loc,
                                 newArray.dims(),
                                 newArray.additionalDims(),
                                 init);
      }
      else if (expr instanceof AmbNewArray) {
        AmbNewArray ambNewArray = (AmbNewArray) expr;
        
        return nf.AmbNewFabricArray(ambNewArray.position(),
                                    ambNewArray.baseType(),
                                    loc,
                                    ambNewArray.expr(),
                                    (List<Expr>)ambNewArray.dims(),
                                    ambNewArray.additionalDims());
      }
      else {
        die(pos);
        return null;
      }
    }

	//Override methods in jif.ppg   
    public PackageNode exprToPackage(Expr e) throws Exception {
        throw new UnsupportedOperationException("Use exprToQualifier instead");
    }
    public QualifierNode exprToQualifier(Expr e) throws Exception {
    
        if (e instanceof Wrapper) {
            //amb can/should only be a name
        	if (((Wrapper) e).amb instanceof Name) {
        	   Name n = (Name)((Wrapper) e).amb;
               return n.toQualifier();
        	}
        	else die(pos(e));
        }

        if (e instanceof AmbExpr) {
            AmbExpr a = (AmbExpr) e;
            NamespaceResolver nr = ts.namespaceResolver(this.ns);
	        //try to resolve name as a codebase alias
            URI u = nr.resolveCodebaseName(a.name());
            if (u != null)
	            return nf.CodebaseNode(pos(e), this.ns, a.name(), u);
            else
                return nf.PackageNode(pos(e), ts.packageForName(this.ns, a.name()));
        }

        if (e instanceof Field) {
            Field f = (Field) e;
            QualifierNode pn = prefixToQualifier(f.target());
            if (pn instanceof CodebaseNode) {
            	//create a CodebaseNode if our prefix is a codebase
            	CodebaseNode cn = (CodebaseNode) pn;
            	Package pkg = ts.packageForName(cn.externalNamespace(), cn.package_(), f.name());
            	return nf.CodebaseNode(pos(e), this.ns, cn.alias(), cn.externalNamespace(), pkg);
            	
            }
            else if (pn instanceof PackageNode) {
            	//otherwise, we create a PackageNode
            	Package pkg = ((PackageNode)pn).package_();
            	return nf.PackageNode(pos(e), ts.packageForName(this.ns, pkg, f.name()));
            }
        }

        die(pos(e));
        return null;
    }
	
	public PackageNode prefixToPackage(Prefix p) throws Exception {
	    throw new UnsupportedOperationException("Use prefixToQualifier instead");
	}
	
    public QualifierNode prefixToQualifier(Prefix p) throws Exception {
        if (p instanceof Expr) {
            return exprToQualifier((Expr) p);
        }

        if (p instanceof AmbPrefix) {
            AmbPrefix a = (AmbPrefix) p;
            Prefix ap = a.prefix();
            Package pkg = null;         
            if (ap != null) {
                QualifierNode pn = prefixToQualifier(ap);
                if (pn instanceof CodebaseNode) {
                	//If prefix is a CodebaseNode, create a new CodebaseNode 
                	//	for the subpackage
                	CodebaseNode cn = (CodebaseNode) pn;
                	Package cbpkg = ts.packageForName(cn.externalNamespace(), cn.package_(), a.name());    	
                 	return nf.CodebaseNode(pos(p), this.ns, cn.alias(), cn.externalNamespace(), cbpkg);
                }
                else if (pn instanceof PackageNode) {
                	//otherwise get the package of the prefix
            	    pkg = ((PackageNode)pn).package_();
                }
            }
            else if (ap == null) {
            	//If there is no prefix, see if there is a codebase alias for this name
            	NamespaceResolver nr = ts.namespaceResolver(this.ns);
            	URI u = nr.resolveCodebaseName(a.name());
            	if (u != null)
            	    return nf.CodebaseNode(pos(p), this.ns, a.name(), u);
            }
            //pkg is null or is the package of the prefix node
            //the prefix is null and not a codebase alias, or not null and not a CodebaseNode
            return nf.PackageNode(pos(p), ts.packageForName(this.ns, pkg, a.name()));
        }

        die(pos(p));
        return null;
    }
        public TypeNode exprToUninstType(Expr e) throws Exception {
        if (e instanceof Wrapper) {
            return ((Wrapper) e).amb.toUnlabeledType();
        }

        if (e instanceof AmbExpr) {
            AmbExpr a = (AmbExpr) e;
            return nf.AmbTypeNode(pos(e), a.name());
        }

        if (e instanceof Field) {
            Field f = (Field) e;
            Receiver r = f.target();
            return nf.AmbTypeNode(pos(e), prefixToQualifier(r), f.name());
        }

        die(pos(e));
        return null;
    }
    public Expr receiverToExpr(AmbReceiver r) throws Exception {
	    Position pos = r.position();
	    String name = r.name();
	    
        if (r.prefix() == null) {
            if ("this".equals(name)) {
                return nf.This(pos);
            }
            Id id = nf.Id(pos, name);
            return nf.AmbExpr(pos, id);
        }

        Id id = nf.Id(pos, name);

        Expr target = null;
        if (r.prefix() instanceof AmbReceiver) {
            target = receiverToExpr((AmbReceiver) r.prefix());
        } else target = (Expr) r.prefix();

        return nf.Field(pos, target, id);
    }
    
:};

terminal Token AT;
terminal Token ATOMIC;
terminal Token ABORT;
terminal Token RETRY;
terminal Token WORKER;
terminal Token STORE;
terminal Token NONFABRIC;
terminal Token CODEBASE;

non terminal Atomic atomic_statement;
non terminal Expr   location_expr_opt, location_expr;
non terminal Stmt   abort_stmt, retry_stmt;
non terminal Worker local_worker;
non terminal RemoteWorkerGetter remote_worker;
non terminal FabricArrayInit fabric_array_initializer;
non terminal List codebase_declarations_opt, codebase_declarations;
non terminal CodebaseDecl codebase_declaration;
non terminal Store store_expr;

start with goal;

////////////////////////////////////////////////////////////////////////
// Disallow covariant labels                                          //
////////////////////////////////////////////////////////////////////////

drop { COVARIANT }
drop { parameter ::= COVARIANT LABEL IDENTIFIER; }

//////////////
// Names 	//
//////////////
// The parser sometimes creates unambiguous package objects, 
//	providing the namespace preserves this ability
override simple_name ::=
                    // Name
        IDENTIFIER:a
            {: RESULT = new Name(parser, parser.pos(a), parser.nf.Id(parser.pos(a), a.getIdentifier())); :}
    ;
    
override qualified_name ::=
                    // Name
        name:a DOT IDENTIFIER:b
            {: RESULT = new Name(parser, parser.pos(a, b), a, parser.nf.Id(parser.pos(b), b.getIdentifier())); :}
    ;
    
override identifier_opt ::=
                    // Name
            {: RESULT = null; :}
    |   IDENTIFIER:a
            {: RESULT = new Name(parser, parser.pos(a),
                parser.nf.Id(parser.pos(a), a.getIdentifier())); :}
    ;

////////////////////////////////////////////////////////////////////////
// Codebases                                                          //
////////////////////////////////////////////////////////////////////////

override compilation_unit ::=
                    // SourceFile
        package_declaration_opt:a
        codebase_declarations_opt:b
        import_declarations_opt:c
        type_declarations_opt:d
            {: RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), parser.lexer.file()),
					     a, b, c, d);
	    :}
    |   error
        type_declarations_opt:c
            {: RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), parser.lexer.file()),
					     null, Collections.EMPTY_LIST, Collections.EMPTY_LIST, c);
	    :}
        ;
codebase_declarations_opt ::=
                    // List of CodebaseDecl
        codebase_declarations:a
            {: RESULT = a; :}
    |
            {: RESULT = new LinkedList<CodebaseDecl>(); :}
    ;
codebase_declarations ::=
                    // List of CodebaseDecl
        codebase_declaration:a
            {: List l = new LinkedList<CodebaseDecl>();
               l.add(a);
               RESULT = l; :}
    |   codebase_declarations:a codebase_declaration:b
            {: RESULT = a;
               a.add(b); :}
    ;
codebase_declaration ::=
                    // CodebaseDecl
        CODEBASE simple_name:a SEMICOLON
            {: RESULT = parser.nf.CodebaseDecl(parser.pos(a), a.toIdentifier()); :}
    ;

drop { dynamic_label ::= accesspath_receiver DOT PROVIDER; }
extend dynamic_label ::=
        accesspath_receiver:a DOT PROVIDER:b
            {: TypeNode clazz;
               if (a instanceof Expr) {
                   clazz = parser.exprToUninstType((Expr) a);
               } else if (a instanceof AmbReceiver) {
                   AmbReceiver ar = (AmbReceiver) a;
                   Prefix prefix = ar.prefix();
                   QualifierNode pn = null;
                   if (prefix != null) pn = parser.prefixToQualifier(ar.prefix());
                   clazz = parser.nf.AmbTypeNode(parser.pos(a), pn, ar.name());
               } else {
                   clazz = null;
                   parser.die(parser.pos(a));
               }
               RESULT = parser.nf.AmbProviderLabelNode(parser.pos(a, b), clazz);
            :}
    ;


////////////////////////////////////////////////////////////////////////
// Atomic Sections                                                    //
////////////////////////////////////////////////////////////////////////

extend statement_without_trailing_substatement ::=
                    // Stmt
        atomic_statement:a {: RESULT = a; :}
    |   abort_stmt:a {: RESULT = a; :}
    |   retry_stmt:a {: RESULT = a; :}
    ;

atomic_statement ::=
                    // Atomic
        ATOMIC:n block:a
            {: RESULT = parser.nf.Atomic(parser.pos(n,a), a.statements()); :};

abort_stmt ::=
                    // AbortStmt
        ABORT:a SEMICOLON:b
            {: RESULT = parser.nf.AbortStmt(parser.pos(a, b)); :}
    ;
    
retry_stmt ::= 
                    // RetryStmt
        RETRY:a SEMICOLON:b
            {: RESULT = parser.nf.RetryStmt(parser.pos(a, b)); :}
    ;

extend modifier ::=
        ATOMIC:a
            {: RESULT = FabricFlags.ATOMIC; :}
    |   NONFABRIC:a
            {: RESULT = FabricFlags.NONFABRIC; :}
    ;

////////////////////////////////////////////////////////////////////////
// Local and remote workers                                           //
////////////////////////////////////////////////////////////////////////

local_worker ::= 
                    // Worker
        WORKER:a
            {: RESULT = parser.nf.Worker(parser.pos(a)); :}
    ;

remote_worker ::=
                    // RemoteWorkerGetter
        WORKER:a LPAREN expression:b RPAREN:c
            {: RESULT = parser.nf.RemoteWorkerGetter(parser.pos(a, c), b); :}
    ;
    
store_expr ::=
        STORE:a
              {: RESULT = parser.nf.Store(parser.pos(a), parser.nf.This(parser.pos(a))); :}        
        | primary_no_new_array:a DOT STORE:b
              {: RESULT = parser.nf.Store(parser.pos(a, b), a); :}
    ;

extend primary_no_new_array ::=
        local_worker:a
            {: RESULT = a; :}
    |   remote_worker:a
            {: RESULT = a; :}
    |   store_expr:a
    		{: RESULT = a; :}
	;
	
extend reftype_or_expr ::=
	     reftype_or_expr:a DOT STORE:b
              {: RESULT = new AmbStore(a, parser, parser.pos(a, b)); :}
	;
extend principal_base ::=
        local_worker:a
            {: RESULT = parser.nf.AmbPrincipalNode(parser.pos(a), a); :}
    |   remote_worker:a
            {: RESULT = parser.nf.AmbPrincipalNode(parser.pos(a), a); :}
    ;

extend accesspath_no_id ::= 
    	STORE:a
            {: RESULT = parser.nf.Store(parser.pos(a), parser.nf.This(parser.pos(a))); :}    
    |   accesspath_receiver:a DOT STORE:b
            {: 
              if (a instanceof Expr) {
                RESULT = parser.nf.Store(parser.pos(a, b), (Expr)a);               
              } else if (a instanceof AmbReceiver) {
                // sigh.. convert back to expr              
	            RESULT = parser.nf.Store(parser.pos(a, b), parser.receiverToExpr((AmbReceiver)a)); 
	          } else {
		        parser.die(parser.pos(a));
	          }
            :}
	;
	    
	    	    
////////////////////////////////////////////////////////////////////////
// Class definitions may include an explicit "access label"           //
////////////////////////////////////////////////////////////////////////	    
extend class_member_declaration ::=
		AT:a label:b
            {: List l = new LinkedList<ClassMember>();
	           l.add(parser.nf.AccessPolicy(parser.pos(a,b), b));
               RESULT = l; :}
	; 
	
extend interface_member_declaration ::=
		AT:a label:b
            {: List l = new LinkedList<ClassMember>();
	           l.add(parser.nf.AccessPolicy(parser.pos(a,b), b));
               RESULT = l; :}
	;   	  
////////////////////////////////////////////////////////////////////////
// Field Declarations now use an optional "access label"              //
////////////////////////////////////////////////////////////////////////

override field_declaration ::=
                    // List of ClassMember
        modifiers_opt:a type:b AT label:al variable_declarators:c SEMICOLON:e
            {: List l = new LinkedList<ClassMember>();
               for (Iterator i = c.iterator(); i.hasNext(); ) {
                   VarDeclarator d = (VarDeclarator) i.next();
                   l.add(parser.nf.FabricFieldDecl(parser.pos(b, e),
                                             a, parser.array(b, d.dims), al,
                                             d.name, d.init));
               }
               RESULT = l; :}
    |   modifiers_opt:a type:b variable_declarators:c SEMICOLON:e
            {: List l = new LinkedList<ClassMember>();
               for (Iterator i = c.iterator(); i.hasNext(); ) {
                   VarDeclarator d = (VarDeclarator) i.next();
                   l.add(parser.nf.FabricFieldDecl(parser.pos(b, e),
                                             a, parser.array(b, d.dims), null,
                                             d.name, d.init));
               }
               RESULT = l; :}
               
    ;

////////////////////////////////////////////////////////////////////////
// Array types                                                        //
////////////////////////////////////////////////////////////////////////

extend primitive_array_type ::=
                    // TypeNode
        labeled_primitive_type:a NATIVE LBRACK RBRACK:y
            {: RESULT = new Array(parser, parser.pos(a,y), a,
                                  /* isConst */ false, /* isNative */ true).toType(); :}
    |   labeled_primitive_type:a NATIVE CONST LBRACK RBRACK:y
            {: RESULT = new Array(parser, parser.pos(a,y), a, 
                                  /* isConst */ true,  /* isNative */ true).toType(); :}
    ;
    
extend reftype_or_expr ::=
					// Amb
        reftype_or_expr:a NATIVE LBRACK RBRACK:y
            {: RESULT = new Array(parser, parser.pos(a,y), a.toType(),
                                  /* isConst */ false, /* isNative */ true); :}
    |   reftype_or_expr:a NATIVE CONST LBRACK RBRACK:y
            {: RESULT = new Array(parser, parser.pos(a,y), a.toType(),
                                  /* isConst */ true, /* isNative */ true); :}
    ;


////////////////////////////////////////////////////////////////////////
// Locations for constructors                                         //
////////////////////////////////////////////////////////////////////////

location_expr_opt ::=
                    // Expr
            {: RESULT = null; :}
    |   AT name:a
            {: RESULT = a.toExpr(); :}
    |   AT STORE:a
            {: RESULT = parser.nf.Store(parser.pos(a), parser.nf.This(parser.pos(a))); :}        
    |   AT name:a DOT STORE:b
            {: RESULT = parser.nf.Store(parser.pos(a, b), a.toExpr()); :}
    ;

location_expr ::=
                    // Expr
        AT name:a
            {: RESULT = a.toExpr(); :}
    |   AT STORE:a
            {: RESULT = parser.nf.Store(parser.pos(a), parser.nf.This(parser.pos(a))); :}        
    |   AT name:a DOT STORE:b
            {: RESULT = parser.nf.Store(parser.pos(a, b), a.toExpr()); :}
    ;

override class_instance_creation_expression ::=
                    // Expr
            NEW:x objtype_or_expr:a LPAREN argument_list_opt:b RPAREN:y 
                {:  TypeNode tn = a.toUnlabeledType();
                    RESULT = parser.nf.New(parser.pos(x,y), tn, (Expr) null, b); :}
    |       NEW:x objtype_or_expr:a label:lab LPAREN argument_list_opt:b RPAREN:y 
                {:  TypeNode tn = a.toUnlabeledType();
                    if (lab != null)
                        tn = parser.nf.LabeledTypeNode(parser.pos(a,lab), tn, lab);
                    RESULT = parser.nf.New(parser.pos(x,y), tn, (Expr) null, b); :}
    |       NEW:x objtype_or_expr:a location_expr:loc LPAREN argument_list_opt:b RPAREN:y 
                {:  TypeNode tn = a.toUnlabeledType();
                    RESULT = parser.nf.New(parser.pos(x,y), tn, loc, b); :}
    |       NEW:x objtype_or_expr:a label:lab location_expr:loc LPAREN argument_list_opt:b RPAREN:y 
                {:  TypeNode tn = a.toUnlabeledType();
                    if (lab != null)
                        tn = parser.nf.LabeledTypeNode(parser.pos(a,lab), tn, lab);
                    RESULT = parser.nf.New(parser.pos(x,y), tn, loc, b); :}
    ;

override array_creation_expression ::=
                    // NewArray
    //  NEW objtype_or_expr dim_exprs dims_opt location_expr_opt
    //      is a primary, since it can return an AmbNewArray, which is not a NewArray
    //
        NEW:n objtype_or_expr:a dims:b location_expr_opt:loc fabric_array_initializer:c 
            {: RESULT = parser.nf.NewFabricArray(parser.pos(n,c), a.toType(), loc,
                                       b.intValue(), c); :}
    |   NEW:n primitive_type:a dim_exprs:b dims_opt:c location_expr_opt:loc
            {: RESULT = parser.nf.NewFabricArray(parser.pos(n,b), a, loc, b,
                                       c.intValue()); :}
    |   NEW:n primitive_type:a dims:b location_expr_opt:loc fabric_array_initializer:c
            {: RESULT = parser.nf.NewFabricArray(parser.pos(n,c), a, loc,
                                       b.intValue(), c); :}
    // native variants
    |   NEW:n objtype_or_expr:a NATIVE dim_exprs:b dims_opt:c
            {: RESULT = parser.nf.NewArray(parser.pos(n,c), a.toType(), b, c.intValue()); :}
    |   NEW:n objtype_or_expr:a NATIVE dims:b array_initializer:c 
            {: RESULT = parser.nf.NewArray(parser.pos(n,c), a.toType(),
                                       b.intValue(), c); :}
    |   NEW:n primitive_type:a NATIVE dim_exprs:b dims_opt:c
            {: RESULT = parser.nf.NewArray(parser.pos(n,b), a, b,
                                       c.intValue()); :}
    |   NEW:n primitive_type:a NATIVE dims:b array_initializer:c
            {: RESULT = parser.nf.NewArray(parser.pos(n,c), a,
                                       b.intValue(), c); :}
    ;

fabric_array_initializer ::=
                    // FabricArrayInit
        array_initializer:a
            {: RESULT = parser.nf.FabricArrayInit(a.position(), a.elements()); :}
    ;

drop {
    primary ::=
        NEW LABEL label
    |   NEW objtype_or_expr dims_opt
    |   NEW:n PRINCIPAL LPAREN principal_disjunctive:a RPAREN:z
    ;
}

extend primary ::=
        NEW:n LABEL label:a location_expr_opt:loc
            {: RESULT = parser.nf.NewLabel(parser.pos(n, loc), a, loc); :}
    |   NEW:n PRINCIPAL location_expr_opt:loc LPAREN principal_disjunctive:a RPAREN:z
            {: RESULT = parser.nf.PrincipalExpr(parser.pos(n, z), a, loc); :}

    |   NEW:n objtype_or_expr:a dims_opt:b
            {: RESULT = parser.toNewFabricArray(parser.pos(n,a), a, b, null); :}
    |   NEW:n objtype_or_expr:a location_expr:loc dims_opt:b
            {: RESULT = parser.toNewFabricArray(parser.pos(n,loc), a, b, loc); :}
    ;

////////////////////////////////////////////////////////////////////////
// Locations for remote calls                                         //
////////////////////////////////////////////////////////////////////////

drop {
    method_invocation ::=
            reftype_or_expr:a LPAREN argument_list_opt:b RPAREN:y
        |   primary_no_new_array:a DOT IDENTIFIER:b LPAREN argument_list_opt:c RPAREN:y
        ;
}

extend method_invocation ::=
                    // Call
        reftype_or_expr:a location_expr_opt:b LPAREN argument_list_opt:c RPAREN:d 
            {: if (! (a instanceof Name)) parser.die(parser.pos(a));
               Name n = (Name) a;
               RESULT = parser.nf.Call(parser.pos(a,d),
                                       n.prefix == null ? null
                                                        : n.prefix.toReceiver(),
                                       parser.nf.Id(parser.pos(n), n.name), b, c); :}
    |   primary_no_new_array:a DOT IDENTIFIER:b location_expr_opt:c LPAREN argument_list_opt:d RPAREN:e 
            {: RESULT = parser.nf.Call(parser.pos(b,e), a,
                                       parser.nf.Id(parser.pos(b), b.getIdentifier()), 
                                       c, d); :}
    ;
