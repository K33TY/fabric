package jif.lang;

import fabric.util.Map;
import fabric.util.HashMap;
import fabric.util.Iterator;
import java.lang.Object;


/**
 * This is an abstract implementation of the principal interface.
 * It provides convenience methods for delgating authority to superiors.
 * This class assumes that principals are equal if they are the same class
 * with the same name.
 */
public abstract class AbstractPrincipal extends DelegatingPrincipal {
    private String name;

    private Map superiors; // treat this like a set

    public AbstractPrincipal() {
      super();
      this.jif$init();
    }
    
    private void jif$init() {
      superiors = new HashMap();
    }
    
    protected AbstractPrincipal jif$lang$AbstractPrincipal$(final String name) {
        { this.name = name; }
        return this;
    }

    protected AbstractPrincipal(String name) {
        this();
        this.name = name;
    }

    public String name() {
        return name;
    }

    public boolean delegatesTo(Principal p) {
        return superiorsContains(p);
    }

    public void addDelegatesTo(Principal p) {
        if (this.superiors.put(p, this) == null) {
          // Need to figure out how to properly cache delegations. -MJL
          // PrincipalUtil.notifyNewDelegation(this, p);
        }
    }
    public void removeDelegatesTo(Principal p) {
        if (this.superiors.remove(p) != null) {
          // Need to figure out how to properly cache delegations. -MJL
          // PrincipalUtil.notifyRevokeDelegation(this, p);
        }
    }

    protected boolean superiorsContains(Principal p) {
        return this.superiors.containsKey(p);
    }

    public boolean isAuthorized(Object authPrf, 
            Closure closure,
            Label lb,
            boolean executeNow) {
        // The default is that this principal authorizes no closures.
        return false;
    }


    public ActsForProof findProofDownto(Core c, Principal q, Object searchState) {    
        // don't even try! We don't have any information
        // about who we can act for.
        return null;
    }

    public ActsForProof findProofUpto(Core c, Principal p, Object searchState) {
        Iterator i = this.superiors.keySet().iterator();
        while(i.hasNext()) {
            Principal s = (Principal) i.next();
            ActsForProof prf = PrincipalUtil.findActsForProof(c, p, s, searchState);            
            if (prf != null) {
                if (PrincipalUtil.actsFor(s, this)) {
                    return new TransitiveProof(prf, s, new DelegatesProof(s, this));
                }
            }
        }
        return null;        
    }

    public int hashCode() {
        return this.name == null ? 0 : this.name.hashCode();
    }
    
    public boolean equals(fabric.lang.Object o) {
        if (o instanceof Principal) {
            Principal p = (Principal)o;
            return (this.name == p.name() || (this.name != null && 
                    this.name.equals(p.name()))) &&
                    this.getClass() == p.getClass();        
        }
        return false;
    }

    public boolean equals(Principal p) {
        if (p == null) return false;
        return (this.name == p.name() || (this.name != null && 
                this.name.equals(p.name()))) &&
                this.getClass() == p.getClass();        
    }

}
