package jif.lang;

import jif.lang.ConfPolicy;
import fabric.client.Client;
import fabric.client.Core;
import fabric.client.LocalCore;
import fabric.common.ONumConstants;
import fabric.util.HashSet;
import fabric.util.Set;

/**
 * A Label is the runtime representation of a Jif label. A Label consists of a
 * set of components, each of which is a Policy. This code is mostly copied from
 * Jif.
 */
public final class PairLabel implements Label {
  private final ConfPolicy confPol;
  private final IntegPolicy integPol;
  private final SecretKeyObject keyObject;
  private Integer hashCode = null;

  public PairLabel(ConfPolicy confPol, IntegPolicy integPol) {
    this.confPol = confPol;
    this.integPol = integPol;
    
    final LocalCore localCore = Client.getClient().getLocalCore();
    if (confPol == null || integPol == null) {
      throw new NullPointerException@localCore();
    }

    // HACK: If we have bottom confidentiality, use the null key object.
    if (confPol == localCore.getBottomConfidPolicy()) {
      this.keyObject = null;
    } else {
      this.keyObject = new SecretKeyObject~this();
    }
  }

  public boolean relabelsTo(Label l, Set s) {
    if (l instanceof PairLabel) {
      PairLabel that = (PairLabel) l;
      if (this == that || this.equals(that)) return true;
      
      final Core localCore = Client.getClient().getLocalCore();
      Set temp = new HashSet@localCore();
      if (LabelUtil.relabelsTo(this.confPol, that.confPol, temp)
          && LabelUtil.relabelsTo(this.integPol, that.integPol, temp)) {
        s.addAll(temp);
        return true;
      }
    }
    return false;
  }

  public int hashCode() {
    if (hashCode == null) {
      hashCode = new Integer(confPol.hashCode() ^ integPol.hashCode());
    }
    return hashCode.intValue();
  }

  public boolean equals(Object o) {
    if (o instanceof PairLabel) {
      PairLabel that = (PairLabel) o;
      return this == that
          || (this.hashCode() == that.hashCode()
              && this.confPol.equals(that.confPol) && this.integPol
              .equals(that.integPol));
    }
    return false;
  }

  public final String toString() {
    String c = confPol.toString();
    String i = integPol.toString();
    if (c.length() > 0 && i.length() > 0) {
      return "{" + c + "; " + i + "}";

    }
    // at least one of them is length 0.
    return "{" + c + i + "}";
  }

  public final Label join(Core core, Label l) {
    return LabelUtil.join(core, this, l);
  }

  public final Label join(Label l) {
    return LabelUtil.join(this, l);
  }

  public Label meet(Core core, Label l) {
    return LabelUtil.meet(core, this, l);
  }

  public Label meet(Label l) {
    return LabelUtil.meet(this, l);
  }

  public ConfPolicy confPolicy() {
    return confPol;
  }

  public IntegPolicy integPolicy() {
    return integPol;
  }
  
  public SecretKeyObject keyObject() {
    return keyObject;
  }
}
