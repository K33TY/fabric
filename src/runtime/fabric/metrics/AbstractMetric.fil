package fabric.metrics;

import fabric.util.ArrayList;
import fabric.util.List;
import fabric.util.Set;

import fabric.metrics.contracts.Bound;
import fabric.metrics.contracts.Contract;
import fabric.metrics.contracts.MetricContract;
import fabric.metrics.contracts.enforcement.DirectPolicy;
import fabric.metrics.contracts.enforcement.EnforcementPolicy;
import fabric.metrics.util.AbstractSubject;
import fabric.metrics.util.Observer;

import fabric.worker.Store;

/**
 * Abstract class with base implementation of some {@link Metric} methods.
 */
public abstract class AbstractMetric extends AbstractSubject implements Metric {

  /**
   * @param store
   *            the Store that holds this {@link Metric}
   */
  protected AbstractMetric fabric$metrics$AbstractMetric$() {
    contracts = new ArrayList/*<>*/().fabric$util$ArrayList$();
    fabric$metrics$util$AbstractSubject$();
    return this;
  }

  private final List/*<MetricContract>*/ contracts;

  /*@Override*/
  public EnforcementPolicy policy(Bound bound) {
    return new DirectPolicy().fabric$metrics$contracts$enforcement$DirectPolicy$(this, bound);
  }

  /**
   * @param bound
   *        the {@link Bound} that the contract will enforce on this
   *        {@link Metric}
   * @return a {@link MetricContract} asserting this metric satisfies the
   *       given {@link Bound}.
   */
  protected MetricContract createContract(Bound bound) {
    return new MetricContract().fabric$metrics$contracts$MetricContract$(this, bound);
  }

  /**
   * @param time
   *        the time we're searching for {@link MetricContract}s for this
   *        {@link Metric}
   * @return a {@link Set} of {@link MetricContract}s that are currently
   *       enforced for this {@link Metric}
   */
  protected List/*<MetricContract>*/ getContracts(long time) {
    for (int i = 0; i < contracts.size(); i++) {
      MetricContract c = (MetricContract) contracts.get(i);
      if (c.stale(time)) {
        removeObserver(c);
        // Contract's removed, shift the index to account (ugh)
        i--;
      }
    }
    return contracts;
  }

  /*@Override*/
  public MetricContract getContract(Bound bound) {
    MetricContract mc = null;
    for (int i = 0; i < contracts.size(); i++) {
      MetricContract c = (MetricContract) contracts.get(i);
      if (c.stale()) {
          removeObserver(c);
          // Contract's removed, shift the index to account (ugh)
          i--;
      } else if (mc == null && c.isActivated()
          && c.enforces(this, bound)) {
        mc = c;
      }
    }
    if (mc == null)
      mc = createContract(bound);
    return mc;
  }

  /*@Override*/
  public MetricContract getContract(double rate, double base, long time) {
    return getContract(new Bound().fabric$metrics$contracts$Bound$(rate, base, time));
  }

  /*@Override*/
  public MetricContract getContract(double rate, double base) {
    return getContract(new Bound().fabric$metrics$contracts$Bound$(rate, base, System.currentTimeMillis()));
  }

  /*@Override*/
  public void addContract(MetricContract contract) {
    if (!contract.getMetric().equals(this))
      throw new IllegalArgumentException(
          "Adding a contract for a different metric!");
    if (!contracts.contains(contract))
      contracts.add(contract);
  }

  /*@Override*/
  public DerivedMetric times(double scalar) {
    final Store s = $getStore();
    return findDerivedMetric(s,
        new ScaledMetric@s().fabric$metrics$ScaledMetric$(scalar, this));
  }

  /*@Override*/
  public DerivedMetric plus(Metric other) {
    // Ugh dumb hack
    if (other instanceof SumMetric)
      return other.plus(this);
    final Store s = $getStore();
    return findDerivedMetric(s,
        new SumMetric@s().fabric$metrics$SumMetric$(new Metric[] { this, other }));
  }

  /*@Override*/
  public Metric min(Metric other) {
    // Ugh dumb hack
    if (this.equals(other))
      return this;
    if (other instanceof MinMetric)
      return other.min(this);
    final Store s = $getStore();
    if (this.compareTo(other) > 0)
        return findDerivedMetric(s, new MinMetric@s().fabric$metrics$MinMetric$(new Metric[] { other, this }));
    return findDerivedMetric(s, new MinMetric@s().fabric$metrics$MinMetric$(new Metric[] { this, other }));
  }

  /*@Override*/
  public Metric max(Metric other) {
    // TODO: This is not the best approach to this.
    return (this.times(-1).min(other.times(-1))).times(-1);
  }

  /*@Override*/
  public int compareTo(java.lang.Object that) {
    if (!(that instanceof Metric))
      return 0;
    Metric other = (Metric) that;
    int thisHash = hashCode();
    int thatHash = other.hashCode();
    if (thisHash == thatHash) {
      if (other.equals(this)) {
        return 0;
      } else {
        return toString().compareTo(other.toString());
      }
    }
    return thisHash - thatHash;
  }

  /**
   * Utility for removing a contract if it's no longer observing and is now
   * stale.
   *
   * @param contract
   *            a {@link MetricContract} to stop storing with this
   *            {@link Metric} (if it is now invalid).
   * @throws IllegalArgumentException
   *             if contract isn't defined on this {@link Metric}
   */
  // TODO/XXX: I'm concerned this will cause problems if we are removing
  // when switching between policies?
  private void clearContract(MetricContract contract) {
      if (!contract.getMetric().equals(this))
          throw new IllegalArgumentException(
                  "clearing a contract for a different metric!");
      if (contract.stale())
          contracts.remove(contract);
  }

  /**
   * {@inheritDoc}
   *
   * If the {@link Observer} is a {@link MetricContract} and is now
   * {@link Contract#stale()}, this clears it out from the Metric's stored
   * contract set.
   */
  /*@Override*/
  public void removeObserver(Observer obs) {
      super.removeObserver(obs);
      if (obs instanceof MetricContract) {
          MetricContract mc = (MetricContract) obs;
          clearContract(mc);
      }
  }

  /*
   * TODO: For the static "interning" we should try to avoid creating the
   * metric before looking it up, if possible?
   */

  /**
   * @param s
   *            the {@link Store} we're looking for the given {@link Metric}
   *            on
   * @param m
   *        the transformed metric we're looking up
   * @return the existing equivalent {@link DerivedMetric} tracked by this
   *       {@link Store}, if one exists. Otherwise, starts tracking
   *       <code>m</code> and returns it.
   */
  public static DerivedMetric findDerivedMetric(final Store s,
      DerivedMetric m) {
    DerivedMetric orig = (DerivedMetric) s.derivedMap().get(m);
    if (orig == null) {
      s.derivedMap().put(m, m);
      return m;
    } else {
      m.cleanup();
      return orig;
    }
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes a scaled value
   * of another {@link Metric}.
   *
   * @param s
   *            the {@link Store} the returned {@link DerivedMetric} will be
   *            stored at
   * @param a
   *        the scaling factor
   * @param term
   *        the {@link Metric}
   * @return the locally tracked {@link DerivedMetric} for the scaled value of
   *       the given {@link Metric}.
   */
  public static Metric scaleAtStore(final Store s, double a, Metric term) {
    if (term.$getStore().equals(s))
      return findDerivedMetric(s, term.times(a));
    return findDerivedMetric(s, new ScaledMetric@s().fabric$metrics$ScaledMetric$(a, term));
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes the sum of
   * other {@link Metric}s.
   *
   * @param s
   *            the {@link Store} the returned {@link DerivedMetric} will be
   *            stored at
   * @param terms
   *            the {@link Metric}s to sum
   * @return the locally tracked {@link DerivedMetric} for the sum of the
   *       terms.
   */
  public static Metric addAtStore(final Store s, Metric[] terms) {
    if (terms.length == 0)
      throw new IllegalArgumentException("Must have at least 1 term!");
    if (terms.length == 1)
      return scaleAtStore(s, 1.0, terms[0]);
    return findDerivedMetric(s, new SumMetric@s().fabric$metrics$SumMetric$(terms));
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes the minimum of
   * other {@link Metric}s.
   *
   * @param s
   *            the {@link Store} the returned {@link Metric} will be stored
   *            at
   * @param terms
   *        the {@link Metric}s to take the min of
   * @return the locally tracked {@link Metric} for the minimum of the terms.
   */
  public static Metric minAtStore(final Store s, Metric[] terms) {
    if (terms.length == 0)
      throw new IllegalArgumentException("Must have at least 1 term!");
    if (terms.length == 1)
      return scaleAtStore(s, 1.0, terms[0]);
    return findDerivedMetric(s, new MinMetric@s().fabric$metrics$MinMetric$(terms));
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes the maximum of
   * other {@link Metric}s.
   *
   * @param s
   *            the {@link Store} the returned {@link Metric} will be stored
   *            at
   * @param terms
   *        the {@link Metric}s to take the max of
   * @return the locally tracked {@link Metric} for the maximum of the terms.
   */
  public static Metric maxAtStore(final Store s, Metric[] terms) {
    if (terms.length == 0)
      throw new IllegalArgumentException("Must have at least 1 term!");
    if (terms.length == 1)
      return scaleAtStore(s, 1.0, terms[0]);
    for (int i = 0; i < terms.length; i++) {
      terms[i] = terms[i].times(-1);
    }
    return findDerivedMetric(s, minAtStore(s, terms).times(-1));
  }
}
