package fabric.metrics;

import fabric.util.Arrays;
import fabric.util.Collections;
import fabric.util.Set;
import fabric.util.TreeSet;
import fabric.util.HashSet;
import fabric.util.Iterator;

import fabric.metrics.contracts.Bound;
import fabric.metrics.contracts.MetricContract;
import fabric.metrics.contracts.enforcement.EnforcementPolicy;
import fabric.metrics.contracts.enforcement.WitnessPolicy;
import fabric.metrics.util.Observer;

import fabric.worker.Store;
import fabric.worker.Worker;
import fabric.worker.transaction.TransactionManager;
import java.util.logging.Level;

/**
 * General base class for {@link Metric}s built by computing over other
 * {@link Metrics}. Each {@link DerivedMetric} implementation is responsible for
 * defining how to
 * <ul>
 * <li>construct the {@link #value()}, {@link #velocity()}, and {@link #noise()}
 * from its terms</li>
 * <li>provide a {@link EnforcementPolicy} to enforce a
 * {@link DerivedMetricContract} on it given the {@link Bound}, typically using
 * a {@link WitnessPolicy} using {@link MetricContract}s on the terms it is
 * derived from.</li>
 * </ul>
 */
public abstract class DerivedMetric extends AbstractMetric implements Observer {
  /** Last computed value of the {@link DerivedMetric} */
  protected double lastValue;
  /** Last estimated velocity of the {@link DerivedMetric} */
  protected double lastVelocity;
  /** Last estimated noise of the {@link DerivedMetric} */
  protected double lastNoise;

  /**
   * The {@link Metric} terms that this {@link DerivedMetric} is computed
   * from.
   */
  protected Metric[] terms;

  private final Set/*<SampledMetric>*/ leafMetrics;
  private final boolean singleStore;

  /**
   * @param s
   *        the {@link Store} this {@link DerivedMetric} will be stored on
   * @param terms
   *        the {@link Metric}s that this {@link DerivedMetric} is
   *        computed from
   */
  public DerivedMetric fabric$metrics$DerivedMetric$(Metric[] terms) {
    if (new TreeSet/*<>*/().fabric$util$TreeSet$(Arrays.asList(terms)).size() != terms.length)
      throw new IllegalArgumentException(
              "DerivedMetric terms must not contain duplicates: "
                      + Arrays.deepToString(terms));
    this.leafMetrics = new HashSet/*<>*/().fabric$util$HashSet$();
    boolean single = true;
    for (int i = 0; i < terms.length; i++) {
      if (!terms[i].isSingleStore()
            || !terms[i].$getStore().equals($getStore())) {
        single = false;
        break;
      }
    }
    this.singleStore = single;
    fabric$metrics$AbstractMetric$();
    this.terms = new Metric[terms.length];
    Arrays.arraycopy(terms, 0, this.terms, 0, terms.length);
    return this;
  }

  /**
   * Method to be called at the end of a constructor for any subclass of
   * {@link DerivedMetric}. Ensures that the {@link getLeafSubjects()} result
   * is precomputed after the representation has been normalized.
   */
  public void initialize() {
    for (int i = 0; i < terms.length; i++) {
      if (terms[i] instanceof SampledMetric) {
        leafMetrics.add(/*(SampledMetric)*/ terms[i]);
      } else if (terms[i] instanceof DerivedMetric) {
        leafMetrics.addAll(((DerivedMetric) terms[i]).getLeafSubjects());
      } else {
        throw new IllegalStateException(
            "This shouldn't happen, all metrics should either be a SampledMetric or a DerivedMetric!");
      }
    }

    // The below should not be necessary. Either it will be computed on
    // demand because there is no observer of this metric or it will be
    // precomputed when an observer is added later.
    // lastValue = computeValue();
    // lastVelocity = computeVelocity();
    // lastNoise = computeNoise();
  }

  /*@Override*/
  public boolean handleUpdates() {
    fabric.common.Logging.METRICS_LOGGER.log(Level.FINE, "CHECKING FOR UPDATE ON DERIVED METRIC");
    double newValue = computeValue();
    if (newValue != lastValue) {
      fabric.common.Logging.METRICS_LOGGER.log(Level.FINE, "UPDATE ON DERIVED METRIC");
      lastValue = newValue;
      lastVelocity = computeVelocity();
      lastNoise = computeNoise();
      return true;
    }
    return false;
  }

  /*@Override*/
  public double value() {
    if (isObserved()) {
      // Make sure any related updates are accounted for
      fabric.worker.transaction.TransactionManager.getInstance().resolveObservations();
    } else {
      // Not getting updated proactively, so compute it
      lastValue = computeValue();
    }
    return lastValue;
  }

  /** @return a freshly computed value for this {@link DerivedMetric}. */
  public abstract double computeValue();

  /*@Override*/
  public double velocity() {
    if (isObserved()) {
      // Make sure any related updates are accounted for
      fabric.worker.transaction.TransactionManager.getInstance().resolveObservations();
    } else {
      // Not getting updated proactively, so compute it
      lastVelocity = computeVelocity();
    }
    return lastVelocity;
  }

  /** @return a freshly estimated velocity for this {@link DerivedMetric}. */
  public abstract double computeVelocity();

  /*@Override*/
  public double noise() {
    if (isObserved()) {
      // Make sure any related updates are accounted for
      fabric.worker.transaction.TransactionManager.getInstance().resolveObservations();
    } else {
      // Not getting updated proactively, so compute it
      lastNoise = computeNoise();
    }
    return lastNoise;
  }

  /** @return a freshly estimated noise for this {@link DerivedMetric}. */
  public abstract double computeNoise();

  /*@Override*/
  public boolean isSingleStore() {
    return singleStore;
  }

  /**
   * {@inheritDoc}
   *
   * If this is the first observer, then this metric is being monitored for
   * changes and so it stops computing on demand and instead caches the last
   * updated value (computed on checks). This metric then becomes an observer
   * of its terms.
   */
  /*@Override*/
  public void addObserver(Observer obs) {
    if (!isObserved()) {
      // Start tracking terms if this is now used by a contract directly.
      for (int i = 0; i < terms.length; i++) {
        terms[i].addObserver(this);
      }
      lastValue = computeValue();
      lastVelocity = computeVelocity();
      lastNoise = computeNoise();
    }
    super.addObserver(obs);
  }

  /**
   * {@inheritDoc}
   *
   * If there are no observers after removing the given one, this metric stops
   * acting as an observer of its terms (and goes back to computing on demand
   * rather than caching the last updated value).
   */
  /*@Override*/
  public void removeObserver(Observer obs) {
    super.removeObserver(obs);
    if (!isObserved()) {
      // Don't observe subterms unless it's being tracked directly.
      for (int i = 0; i < terms.length; i++) {
        terms[i].removeObserver(this);
      }
    }
  }

  /**
   * Method to be called when a {@link DerivedMetric} is no longer stored.
   *
   * TODO: not clear this does anything useful anymore.
   */
  public void cleanup() {
    /*
     * NOT CONVINCED THIS IS NEEDED
    Iterator iter = getContracts(System.currentTimeMillis()).iterator();
    while (iter.hasNext()) {
      ((MetricContract) iter.next()).deactivate();
    }
    */
  }

  /**
   * @return the terms this {@link DerivedMetric} is defined over
   */
  public Metric[] terms() {
    Metric[] copy = new Metric[terms.length];
    Arrays.arraycopy(terms, 0, copy, 0, terms.length);
    return copy;
  }

  /**
   * @param i
   *        an index into the terms array
   * @return the ith term this {@link DerivedMetric} is defined over
   */
  public Metric term(int i) {
    return terms[i];
  }

  /**
   * @param s
   *        a {@link Store} that will hold the copy of this
   *        {@link DerivedMetric}
   * @return a copy of this {@link DerivedMetric} that is stored on s
   */
  public abstract DerivedMetric copyOn(Store s);

  /*@Override*/
  public Set/*<SampledMetric>*/ getLeafSubjects() {
    return Collections.unmodifiableSet(Worker.getWorker().getLocalStore(), leafMetrics);
  }
}
