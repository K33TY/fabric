package fabric.metrics.util;

import fabric.util.Set;

/**
 * Represents an observable object having a set of {@link Observer}s. After an
 * observable object changes, an application can call
 * {@link #getObserversCopy()} to get the current set of {@link Observer}s.
 * {@link Observer}s are then notified of a change via a call to
 * {@link Observer#handleUpdates()}.
 */
public interface Subject {

  /**
   * Adds an observer to the set of observers for this object. Nothing is done
   * if the given observer {@link #equals(Object) equals} an existing
   * observer.
   *
   * @param o
   *        {@link Observer} to add
   */
  public void addObserver(Observer o);

  /**
   * Removes an observer from the set of observers of this object.
   *
   * @param o
   *        {@link Observer} to remove
   */
  public void removeObserver(Observer o);

  /**
   * @param o
   *        an observer that might observe this subject.
   * @return true iff o observes this subject.
   */
  public boolean observedBy(Observer o);

  /**
   * @return true iff there are any observers of this subject, currently.
   */
  public boolean isObserved();

  /**
   * @return the set of the current observers of this subject.
   */
  public Set/*<Observer>*/ getObservers();
}
