package fabric.metrics.util;

/**
 * Utility class for tracking the sample mean and sample standard deviation
 * of a value that is updated periodically.
 *
 * This was originally based on a post on John D. Cook's blog here:
 * https://www.johndcook.com/blog/standard_deviation/
 *
 * That post assumed a stable distribution. This has since been modified to
 * use EWMA.
 */
public class RunningStats {

  /**
   * The sensitivity parameter for computing exponentially weighted moving
   * averages.
   */
  public static final double ALPHA = 0.01;

  private double mean = 0.0;
  private double var = 0.0;
  private double meanPrev = 0.0;
  private double varPrev = 0.0;
  private /*final*/ double startValue;

  /**
   * @param startValue
   *        initial guess for the mean of the value we're keeping
   *        statistics on.
   */
  public RunningStats fabric$metrics$util$RunningStats$(double startValue) {
    this.startValue = startValue;
    fabric$lang$Object$();
    meanPrev = startValue;
    mean = startValue;
    return this;
  }

  /**
   * Reset estimation to just the startValue.
   */
  public void reset() {
    meanPrev = startValue;
    mean = startValue;
  }

  /**
   * @return the current estimated mean.
   */
  public double getMean() {
    return mean;
  }

  /**
   * @return the current estimated variance.
   */
  public double getVar() {
    return var;
  }

  /**
   * Update with a new observation.
   *
   * @param val
   *        the newly observed value.
   */
  public void update(double val) {
    mean = meanPrev + ALPHA * (val - meanPrev);
    var = (1.0 - ALPHA) * varPrev
        + ALPHA * (val - meanPrev) * (val - mean);

    meanPrev = mean;
    varPrev = var;
  }

  /** @return the ALPHA learning parameter for these statistics. */
  public double getAlpha() {
    return ALPHA;
  }
}
