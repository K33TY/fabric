package fabric.lang;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Loads Java classes from Fabric.
 * 
 * @author Lucas Waye <lrw48@cornell.edu>
 */
public class FabricClassLoader extends ClassLoader {
  Codebase              codebase;
  Map/*FClass, Class*/  classes;
  
  public Class loadClass(String name, boolean resolve) 
  	throws ClassNotFoundException {
    Class javaCls = codebase.toJavaClass(name);
	if (javaCls == null) {
	  throw new ClassNotFoundException(name);
	}
	if (resolve)
	  resolveClass(javaCls);
	return javaCls;
  }
  
  Class getJavaClass(FClass cls) {
    Class result = (Class)classes.get(cls);
    if (result == null) {
      result = defineClass(cls.getName(), toByteArray(cls.getBytecode()), 0, 
    		  cls.bytecode.length);
      classes.put(cls, result);
    }
    return result;
  }
  
  private FabricClassLoader(Codebase cb) {
    this.codebase = cb;
    this.classes  = new HashMap/*FClass, Class*/();
  }
  
  /* this object may be part of the local store */
  private static Map/*Codebase, FabricClassLoader*/ classloaders;
  
  public static FabricClassLoader getClassLoader(Codebase codebase) {
	if (classloaders == null)
		classloaders = new HashMap/*Codebase, FabricClassLoader*/();
   
	FabricClassLoader result = (FabricClassLoader)classloaders.get(codebase);
    if (result == null) {
      result = new FabricClassLoader(codebase);
      classloaders.put(codebase, result);
    }
    return result;
  }

  byte native[] toByteArray(byte[] arr) {
    byte native[] n = new byte native[arr.length];
    for (int i = 0 ; i < n.length; i++)
      n[i] = arr[i];
    return n;
  }
}
