package fabric.lang;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.security.GeneralSecurityException;

import fabric.lang.Codebase;
import fabric.Main;

import fabric.common.SysUtil;

/**
 * Loads Java classes from Fabric.
 * 
 * @author Lucas Waye <lrw48@cornell.edu>
 */
public class FabricClassLoader extends ClassLoader {
	Map/* String, Class */classes;
	Map/* String, byte native[] */classBytecodeMap;
	ClassLoader parent;
	
	public Class findClass(String name) 
  	throws ClassNotFoundException {
		try{
			Class cls = parent.loadClass(name);
			return cls;
		} catch (ClassNotFoundException e) {}
		
  	if (!classBytecodeMap.containsKey(name)) {
  	    //XXX: hack -- figure out what really needs to be done here
  	    int impl = name.lastIndexOf("$_Impl");
  	    String fabname = name.substring(0, impl);
  	  FClass fcls = SysUtil.toProxy(fabname);
  	  try {
  	    Main.compile(fcls, classBytecodeMap);
  	  } catch (GeneralSecurityException e) {
  		  throw new ClassNotFoundException(name, e);
  	  }
    }
    
    Class javaCls = getJavaClass(name);
  	if (javaCls == null) {
  	  throw new ClassNotFoundException(name);
  	}
	
    return javaCls;
  }

	Class getJavaClass(String cls) {
    Class result = (Class)classes.get(cls);
    if (result == null) {
      if (classBytecodeMap.containsKey(cls)) {
        byte native[] bytecode = (byte native[]) classBytecodeMap.get(cls);
        
        result = defineClass(cls, bytecode, 0, bytecode.length);
        classes.put(cls, result);
      }
    }
    return result;
  }

	public FabricClassLoader(ClassLoader parent) {
		super(parent);
		this.parent = parent;
		this.classes = new HashMap/* String, Class */();
		this.classBytecodeMap = new HashMap/* String, byte native[] */();
	}

	public InputStream getResourceAsStream(String name) {
	  /* TODO: support non-class resources also */
	  name = name.substring(0,name.length()-".class".length());

	  if (!classBytecodeMap.containsKey(name)) {
	  	FClass fcls = SysUtil.toProxy(name);
	  	  try 
	  	  {
	    	  Main.compile(fcls, classBytecodeMap);
	  	  } catch (GeneralSecurityException e) {
	  		  return null;
	  	  }
      }
    
    if (classBytecodeMap.containsKey(name)) {
  	  byte native[] bytecode = (byte native[]) classBytecodeMap.get(name);
	  	return new ByteArrayInputStream(bytecode);
    } else { 
    	return null;
    }
  }
}
