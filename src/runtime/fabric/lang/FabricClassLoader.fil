package fabric.lang;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import fabric.lang.Codebase;

/**
 * Loads Java classes from Fabric.
 * 
 * @author Lucas Waye <lrw48@cornell.edu>
 */
public class FabricClassLoader extends ClassLoader {
  Codebase               codebase;
  Map/*String, Class*/   classes;
  Map/*String, byte native[]*/  classBytecodeMap;
  
  public Class findClass(String name) 
  	throws ClassNotFoundException {
  	if (!classBytecodeMap.containsKey(name)) {
      codebase.compile(name, classBytecodeMap);
    }
    
    Class javaCls = getJavaClass(name);
  	if (javaCls == null) {
  	  throw new ClassNotFoundException(name);
  	}
	
    return javaCls;
  }
  
  public Class loadClass(String name, boolean resolve) 
    throws ClassNotFoundException {
	  return super.loadClass(name, resolve);
  }
  
  Class getJavaClass(String cls) {
    Class result = (Class)classes.get(cls);
    if (result == null) {
      if (classBytecodeMap.containsKey(cls)) {
        //TODO: filc bug -- can't cast to byte native[], parse error:
        //byte native[] bytecode = (byte native[]) classBytecodeMap.get(cls);
        
        byte native[] bytecode = new byte native[0];
        result = defineClass(cls, bytecode, 0, bytecode.length);
        classes.put(cls, result);
      }
    }
    return result;
  }
  
  
  private FabricClassLoader(Codebase cb, ClassLoader parent) {
    super(parent);
    this.codebase = cb;
    this.classes  = new HashMap/*String, Class*/();
    this.classBytecodeMap  = new HashMap/*String, byte native[]*/();
  }
  
  public static FabricClassLoader getClassLoader(Codebase codebase) {
    FabricClassLoader result = new FabricClassLoader(codebase, 
      FabricClassLoader.class.getClassLoader());
    
    return result;
  }
  
  public InputStream getResourceAsStream(String name) {
	  /* TODO: support non-class resources also */
	  name = name.substring(0,name.length()-".class".length());
	  if (!classBytecodeMap.containsKey(name)) {
      codebase.compile(name, classBytecodeMap);
    }
    
    if (classBytecodeMap.containsKey(name)) {
  	  //TODO: filc bug -- can't cast to byte native[], parse error:
      //byte native[] bytecode = (byte native[]) classBytecodeMap.get(cls);
	  	byte native[] bytecode = new byte native[0];
	  	return new ByteArrayInputStream(bytecode);
    } else { 
    	return null;
    }
  }
  
  public Codebase getCodebase() {
	  return codebase;
  }
}
