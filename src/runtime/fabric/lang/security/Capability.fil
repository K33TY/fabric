package fabric.lang.security;

import fabric.worker.Worker;
import fabric.worker.Store;

/**
 * This code is mostly copied from Jif.
 */
public final class Capability {
  private final Principal jif$jif_lang_Capability_P;
  private final Label jif$jif_lang_Capability_L;
  private final Label jif$jif_lang_Capability_A;
  private final Closure closure;
  public static final Store localStore = Worker.getWorker().getLocalStore();

  public Closure getClosure() {
    return closure;
  }

  public java.lang.Object invoke() {
    if (closure == null) return null;
    return closure.invoke();
  }

  Capability(final Principal jif$P, final Label jif$L, final Label jif$A, final Closure closure) {
    this.jif$jif_lang_Capability_P = jif$P;
    this.jif$jif_lang_Capability_L = jif$L;
    this.jif$jif_lang_Capability_A = jif$A;
    this.closure = closure;
  }

  public static boolean jif$Instanceof(final Principal jif$P,
      final Label jif$L, final Label jif$A, final Object o) {
    if (o instanceof Capability) {
      Capability c = (Capability) o;
      boolean ok = true;
      ok = ok && PrincipalUtil.equivalentTo(c.jif$jif_lang_Capability_P, jif$P);
      ok = ok && LabelUtil.equivalentTo(c.jif$jif_lang_Capability_L, jif$L);
      ok = ok && LabelUtil.equivalentTo(c.jif$jif_lang_Capability_A, jif$A);
      return ok;
    }
    return false;
  }

  public static Capability jif$cast$jif_lang_Capability(final Principal jif$P,
      final Label jif$L, final Label jif$A, final Object o) {
    if (o == null) return null;
    if (jif$Instanceof(jif$P, jif$L, jif$A, o)) return (Capability) o;
    throw new ClassCastException@localStore();
  }
}
