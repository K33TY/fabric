/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

import fabric.worker.Worker;
import fabric.worker.Store;
import fabric.util.*;

/**
 * Abstract class representing the join of policies. All the policies should be
 * of the same kind, either all IntegPolicies or all ConfPolicies. This code is
 * mostly copied from Jif.
 */
public abstract class JoinPolicy extends AbstractPolicy implements Policy {
  private Set components; // Set of Policies

 JoinPolicy fabric$lang$security$JoinPolicy$(Set policies) {
	fabric$lang$security$AbstractPolicy$();
    // Copy the contents into a linked hash set so we can sign these policies.
    components = Collections.unmodifiableSet($getStore(),
	(LinkedHashSet) new LinkedHashSet().fabric$util$LinkedHashSet$(policies));
	return this;
  }

  public Set joinComponents() {
    return components;
  }

  public boolean relabelsTo(Policy pol, java.util.Set s) {
    if (this == pol || this.equals(pol)) return true;

    java.util.Set temp = new java.util.HashSet();
    // this == c1 join ... join cn
    // this <= pol if for all Ci, Ci <= pol
    boolean sat = true;
    for (Iterator i = components.iterator(); i.hasNext();) {
      Policy Ci = (Policy) i.next();
      if (!LabelUtil.relabelsTo(Ci, pol, temp)) {
        sat = false;
        break;
      }
    }
    if (sat) {
      s.addAll(temp);
      return true;
    }

    temp.clear();

    // failed so far, try taking advantage of structure on the RHS
    if (pol instanceof MeetPolicy) {
      // this <= d1 meet ... meet dn if for all di
      // we have this <= di
      MeetPolicy mp = (MeetPolicy) pol;
      sat = true;
      for (Iterator i = mp.meetComponents().iterator(); i.hasNext();) {
        Policy Di = (Policy) i.next();
        if (!LabelUtil.relabelsTo(this, Di, temp)) {
          sat = false;
          break;
        }
      }
      if (sat) {
        s.addAll(temp);
        return true;
      }
    }
    if (pol instanceof JoinPolicy) {
      // this <= d1 join ... join dn if there is some di
      // such that this <= di
      JoinPolicy jp = (JoinPolicy) pol;
      for (Iterator i = jp.joinComponents().iterator(); i.hasNext();) {
        temp.clear();
        Policy Di = (Policy) i.next();
        if (LabelUtil.relabelsTo(this, Di, temp)) {
          s.addAll(temp);
          return true;
        }
      }
    }
    return false;
  }

  public boolean equals(Object o) {
    if (o instanceof JoinPolicy) {
      JoinPolicy that = (JoinPolicy) o;
      return this == that
          || this.joinComponents().equals(that.joinComponents());
    }
    return false;
  }

  public final int hashCode() {
    return components.hashCode();
  }

  public final String toString() {
    String str = "";
    for (Iterator iter = components.iterator(); iter.hasNext();) {
      str += ((Policy) iter.next()).toString();
      if (iter.hasNext()) str += "; ";
    }
    return str;
  }
}
