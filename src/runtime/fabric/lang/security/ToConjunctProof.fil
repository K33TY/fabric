package fabric.lang.security;

import fabric.util.Iterator;
import fabric.util.Map;
import java.util.Set;

/**
 * This code is mostly copied from Jif.
 */
public final class ToConjunctProof extends ActsForProof {
  private final Map conjunctProofs;

  ToConjunctProof fabric$lang$security$ToConjunctProof$(Principal actor, ConjunctivePrincipal granter,
      Map conjunctProofs) {
    this.conjunctProofs = conjunctProofs;
    fabric$lang$security$ActsForProof$(actor, granter);
    return this;
  }

  Map getConjunctProofs() {
    return conjunctProofs;
  }

  public void gatherDelegationDependencies(Set s) {
    ConjunctivePrincipal cp = (ConjunctivePrincipal) getGranter();
    for (Iterator iter = cp.conjuncts.iterator(); iter.hasNext();) {
      Principal conjunct = (Principal) iter.next();
      ActsForProof pr = (ActsForProof) this.getConjunctProofs().get(conjunct);
      pr.gatherDelegationDependencies(s);
    }
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
