package fabric.lang.security;

import fabric.lang.security.Principal;
import fabric.util.Iterator;
import fabric.util.Map;
import fabric.lang.JifObject;
import fabric.lang.JifWrappedObject;
import fabric.util.JifUtil;

/**
 * This code is mostly copied from Jif.
 */
public final class FromDisjunctProof extends ActsForProof {
	private final Map disjunctProofs; // map from disjuncts to proofs to Granter

	FromDisjunctProof(DisjunctivePrincipal actor, Principal granter,
			Map disjunctProofs) {
		super(actor, granter);
		this.disjunctProofs = disjunctProofs;
	}

	Map getDisjunctProofs() {
		return disjunctProofs;
	}

	public void gatherDelegationDependencies(java.util.Set s) {
		DisjunctivePrincipal dp = (DisjunctivePrincipal) getActor();
		for (Iterator iter = dp.disjuncts.iterator(); iter.hasNext();) {
			Principal disjunct = (Principal) JifUtil.unwrap(iter.next());
			JifObject _disjunct = (new JifWrappedObject(disjunct.get$label()))
					.fabric$lang$JifWrappedObject$(disjunct);
			ActsForProof pr = (ActsForProof) this.getDisjunctProofs().get(
					_disjunct);
			pr.gatherDelegationDependencies(s);
		}
	}
}
