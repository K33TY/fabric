/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

import fabric.util.Iterator;
import fabric.util.Map;
import java.util.Set;

/**
 * This code is mostly copied from Jif.
 */
public final class FromDisjunctProof extends ActsForProof {
  private final Map disjunctProofs; // map from disjuncts to proofs to Granter

  FromDisjunctProof(DisjunctivePrincipal actor, Principal granter,
      Map disjunctProofs) {
    super(actor, granter);
    this.disjunctProofs = disjunctProofs;
  }

  Map getDisjunctProofs() {
    return disjunctProofs;
  }

  public void gatherDelegationDependencies(Set s) {
    DisjunctivePrincipal dp = (DisjunctivePrincipal) getActor();
    for (Iterator iter = dp.disjuncts.iterator(); iter.hasNext();) {
      Principal disjunct = (Principal) iter.next();
      ActsForProof pr = (ActsForProof) this.getDisjunctProofs().get(disjunct);
      pr.gatherDelegationDependencies(s);
    }
  }
}
