/**
 * Copyright (C) 2010-2014 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

import fabric.util.LinkedHashSet;
import fabric.util.Set;

/**
 * This code is mostly copied from Jif.
 */
public class PrincipalSet {
  private Set set;

  public PrincipalSet fabric$lang$security$PrincipalSet$() {
    fabric$lang$Object$();
    set = (LinkedHashSet) new LinkedHashSet().fabric$util$LinkedHashSet$();
    return this;
  }

  public PrincipalSet add(Principal p) {
    PrincipalSet ps = (PrincipalSet) new PrincipalSet().fabric$lang$security$PrincipalSet$();
    ps.set.addAll(set);
    ps.set.add(p);
    return ps;
  }

  Set getSet() {
    return set;
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
