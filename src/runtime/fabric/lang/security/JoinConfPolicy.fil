/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

import fabric.util.*;

/**
 * Represents the join of confidentiality policies. This code is mostly copied
 * from Jif.
 */
public final class JoinConfPolicy extends JoinPolicy implements ConfPolicy {
  JoinConfPolicy fabric$lang$security$JoinConfPolicy$(Set policies) {
    fabric$lang$security$JoinPolicy$(policies);
	return this;
  }

  public ConfPolicy join(Store store, ConfPolicy p, java.util.Set s) {
    return LabelUtil.join(store, this, p, s);
  }

  public ConfPolicy meet(Store store, ConfPolicy p, java.util.Set s) {
    return LabelUtil.meet(store, this, p, s);
  }

  public ConfPolicy join(Store store, ConfPolicy p) {
    return LabelUtil.join(store, this, p);
  }

  public ConfPolicy meet(Store store, ConfPolicy p) {
    return LabelUtil.meetPol(store, this, p);
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
