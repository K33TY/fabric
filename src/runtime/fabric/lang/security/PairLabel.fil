/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

import fabric.worker.Worker;
import fabric.worker.Store;
import fabric.worker.LocalStore;
import fabric.common.ONumConstants;
import java.util.HashSet;
import java.util.Set;

/**
 * A Label is the runtime representation of a Jif label. A Label consists of a
 * set of components, each of which is a Policy. This code is mostly copied from
 * Jif.
 */
public final class PairLabel implements Label {
  private /*final*/ ConfPolicy confPol;
  private /*final*/ IntegPolicy integPol;
  private /*final*/ SecretKeyObject keyObject;

  public PairLabel fabric$lang$security$PairLabel$(ConfPolicy confPol, IntegPolicy integPol) {
	fabric$lang$Object$();
    this.confPol = confPol;
    this.integPol = integPol;
    
    final LocalStore localStore = Worker.getWorker().getLocalStore();
    if (confPol == null || integPol == null) {
      throw new NullPointerException@localStore();
    }

    // HACK: If we have bottom confidentiality, use the null key object.
    if (confPol == localStore.getBottomConfidPolicy()) {
      this.keyObject = null;
    } else {
      this.keyObject = (SecretKeyObject) new SecretKeyObject().fabric$lang$security$SecretKeyObject$();
    }
	return this;
  }

  public boolean relabelsTo(Label l, Set s) {
    if (l instanceof PairLabel) {
      PairLabel that = (PairLabel) l;
      if (this == that || this.equals(that)) return true;
      
      final Store localStore = Worker.getWorker().getLocalStore();
      Set temp = new HashSet();
      if (LabelUtil.relabelsTo(this.confPol, that.confPol, temp)
          && LabelUtil.relabelsTo(this.integPol, that.integPol, temp)) {
        s.addAll(temp);
        return true;
      }
    }
    return false;
  }

  public int hashCode() {
    return confPol.hashCode() ^ integPol.hashCode();
  }

  public boolean equals(Object o) {
    if (o instanceof PairLabel) {
      PairLabel that = (PairLabel) o;
      return this == that
          || (this.hashCode() == that.hashCode()
              && this.confPol.equals(that.confPol) && this.integPol
              .equals(that.integPol));
    }
    return false;
  }

  public final String toString() {
    String c = confPol.toString();
    String i = integPol.toString();
    if (c.length() > 0 && i.length() > 0) {
      return "{" + c + "; " + i + "}";

    }
    // at least one of them is length 0.
    return "{" + c + i + "}";
  }

  public final Label join(Store store, Label l) {
    return LabelUtil.join(store, this, l);
  }

  public Label meet(Store store, Label l) {
    return LabelUtil.meet(store, this, l);
  }

  public ConfPolicy confPolicy() {
    return confPol;
  }

  public IntegPolicy integPolicy() {
    return integPol;
  }
  
  public SecretKeyObject keyObject() {
    return keyObject;
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
