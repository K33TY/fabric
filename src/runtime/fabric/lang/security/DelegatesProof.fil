/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

import java.util.Set;

/**
 * This code is mostly copied from Jif.
 */
public final class DelegatesProof extends ActsForProof {
  public DelegatesProof fabric$lang$security$DelegatesProof$(Principal actor, Principal granter) {
    fabric$lang$security$ActsForProof$(actor, granter);
	return this;
  }

  public void gatherDelegationDependencies(Set s) {
    // don't count delegations from "p" to "p and ..." or delegations from
    // con/dis-junctive principals

    if (getGranter() instanceof DisjunctivePrincipal
        || getGranter() instanceof ConjunctivePrincipal) {
      return;
    }

    if (getActor() instanceof ConjunctivePrincipal
        && ((ConjunctivePrincipal) getActor()).conjuncts.contains(getGranter())) {
      return;
    }

    s.add(new SecurityCache.DelegationPair(getActor(), getGranter()));
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
