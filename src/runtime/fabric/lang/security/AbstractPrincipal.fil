/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.security;

import fabric.util.Map;
import fabric.util.HashMap;
import fabric.util.Iterator;
import java.lang.Object;


/**
 * This is an abstract implementation of the principal interface.
 * It provides convenience methods for delgating authority to superiors.
 */
public abstract class AbstractPrincipal extends DelegatingPrincipal {
    private String name;

    private Map superiors; // treat this like a set

    public AbstractPrincipal fabric$lang$security$AbstractPrincipal$() {
      this.jif$init();
      fabric$lang$security$DelegatingPrincipal$();
	  return this;
    }
    
    private void jif$init() {
      superiors = (HashMap) new HashMap().fabric$util$HashMap$();
      
    // XXX HACK Make read-only operations on principals really read-only. This
    // creates the set view of the map's keys so that future calls to keySet()
    // will not modify the hashmap object.
    superiors.keySet();
    }
    

    protected AbstractPrincipal fabric$lang$security$AbstractPrincipal$(String name) {
      this.jif$init();
        fabric$lang$security$AbstractPrincipal$();
        this.name = name;
		return this;
    }

    public String name() {
        return name;
    }

    public boolean delegatesTo(Principal p) {
        return superiorsContains(p);
    }

    public void addDelegatesTo(Principal p) {
        if (this.superiors.put(p, this) == null) {
            PrincipalUtil.notifyNewDelegation(this, p);
        }
    }
    public void removeDelegatesTo(Principal p) {
        if (this.superiors.remove(p) != null) {
            PrincipalUtil.notifyRevokeDelegation(this, p);
        }
    }

    protected boolean superiorsContains(Principal p) {
        return this.superiors.containsKey(p);
    }

    public boolean isAuthorized(Object authPrf, 
            Closure closure,
            Label lb,
            boolean executeNow) {
        // The default is that this principal authorizes no closures.
        return false;
    }


    public ActsForProof findProofDownto(Store store, Principal q, Object searchState) {    
        // don't even try! We don't have any information
        // about who we can act for.
        return null;
    }

    public ActsForProof findProofUpto(Store store, Principal p, Object searchState) {
        LocalStore localStore = Worker.getWorker().getLocalStore();
        Iterator i = this.superiors.keySet().iterator();
        while(i.hasNext()) {
            Principal s = (Principal) i.next();
            ActsForProof prf = PrincipalUtil.findActsForProof(store, p, s, searchState);            
            if (prf != null) {
                if (PrincipalUtil.actsFor(s, this)) {
                    return (TransitiveProof) new TransitiveProof@localStore().fabric$lang$security$TransitiveProof$(prf, s, (DelegatesProof) new DelegatesProof@localStore().fabric$lang$security$DelegatesProof$(s, this));
                }
            }
        }
        return null;        
    }
    
    public boolean equals(fabric.lang.Object o) {
        return (o instanceof Principal) && equals((Principal) o);
    }

    public boolean equals(Principal p) {
        // Default to pointer equality (i.e., oid equality).
        return this == p;        
    }

}
