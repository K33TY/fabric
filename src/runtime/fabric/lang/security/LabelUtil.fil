package fabric.lang.security;

import java.util.HashSet;

import fabric.common.exceptions.InternalError;
import fabric.common.util.Pair;
import fabric.common.util.Triple;
import fabric.worker.Worker;
import fabric.worker.Store;
import fabric.worker.transaction.TransactionManager;
import fabric.lang.security.PrincipalUtil;
import fabric.lang.security.SecurityCache;
import fabric.util.*;

/**
 * A Label is the runtime representation of a Jif label. A Label consists of a
 * set of components, each of which is a fabric.lang.security.Policy. This code
 * is mostly copied from Jif.
 */
public final class LabelUtil {
  private LabelUtil fabric$lang$security$LabelUtil$() {
    fabric$lang$Object$();
    return this;
  }
  
  public static final LocalStore localStore = Worker.getWorker().getLocalStore();

  public static Label noComponents() {
    return localStore.getEmptyLabel();
  }
  
  public static Label noComponents(Store store) {
      return noComponents();
    }  

  public static ConfPolicy bottomConf() {
    return localStore.getBottomConfidPolicy();
  }
  
  public static IntegPolicy bottomInteg() {
      return localStore.getBottomIntegPolicy();
  }
  
  public static ConfPolicy topConf() {
    return localStore.getTopConfidPolicy();
  }

  public static IntegPolicy topInteg() {
    return localStore.getTopIntegPolicy();
  }

  public static ConfPolicy readerPolicy(Store store, Principal owner,
      Principal reader) {
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Triple triple = new Triple(owner, reader, store);
      ConfPolicy result = cache.getReaderPolicy(triple);
      if (result != null) return result;
      
      result = (ReaderPolicy) new ReaderPolicy@store().fabric$lang$security$ReaderPolicy$(owner, reader);
      cache.putReaderPolicy(triple, result);
      return result;
  }

  public static ConfPolicy readerPolicy(Store store, Principal owner,
      Collection/* <Principal> */readers) {
      return readerPolicy(store, owner,
          PrincipalUtil.disjunction(store, readers));
  }

  /**
   * See the Jif signature for the explanation of lbl.
   */
  public static ConfPolicy readerPolicy(Store store, Label lbl,
      Principal owner, Principal[] readers) {
      if (readers == null)
        return readerPolicy(store, owner, Collections.EMPTY_SET);
      return readerPolicy(store, owner, Arrays.asList(readers));
  }

  public static ConfPolicy readerPolicy(Store store, Principal owner,
      PrincipalSet writers) {
      return readerPolicy(store, owner, writers.getSet());
  }

  public static Label readerPolicyLabel(Principal owner, Principal reader) {
      return toLabel(localStore, readerPolicy(localStore, owner, reader));
  }
  
  public static Label readerPolicyLabel(Store store, Principal owner,
      Principal reader) {
      return toLabel(store, readerPolicy(store, owner, reader));
  }

  public static Label readerPolicyLabel(Store store, Principal owner,
      Collection/* <Principal> */readers) {
      Label l =
          toLabel(store, readerPolicy(store, owner,
              PrincipalUtil.disjunction(store, readers)));
      return l;
  }

  /**
   * See the Jif signature for the explanation of lbl.
   */
  public static Label readerPolicyLabel(Store store, Label lbl,
      Principal owner, Principal[] readers) {
      if (readers == null)
        return readerPolicyLabel(store, owner, Collections.EMPTY_SET);
      return readerPolicyLabel(store, owner, Arrays.asList(readers));
  }

  public static Label readerPolicyLabel(Store store, Principal owner,
      PrincipalSet readers) {
      return readerPolicyLabel(store, owner, PrincipalUtil.disjunction(store,
          readers.getSet()));
  }

  public static IntegPolicy writerPolicy(Store store, Principal owner, Principal writer) {
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Triple triple = new Triple(owner, writer, store);
      IntegPolicy result = cache.getWriterPolicy(triple);
      if (result != null) return result;
      
      result = (WriterPolicy) new WriterPolicy@store().fabric$lang$security$WriterPolicy$(owner, writer);
      cache.putWriterPolicy(triple, result);
      return result;
  }

  public static IntegPolicy writerPolicy(Store store, Principal owner,
      Collection/* <Principal> */writers) {
      return writerPolicy(store, owner, PrincipalUtil.disjunction(store, writers));
  }

  public static Label writerPolicyLabel(Store store, Principal owner, Principal writer) {
      return toLabel(store, writerPolicy(store, owner, writer));
  }

  public static Label writerPolicyLabel(Store store, Principal owner,
      Collection/* <Principal> */writers) {
      return toLabel(store, writerPolicy(store, owner,
          PrincipalUtil.disjunction(store, writers)));
  }

  /**
   * See the Jif signature for the explanation of lbl.
   */
  public static Label writerPolicyLabel(Store store, Label lbl, Principal owner,
      Principal[] writers) {
      if (writers == null)
        return writerPolicyLabel(store, owner, Collections.EMPTY_SET);
      return writerPolicyLabel(store, owner, Arrays.asList(writers));
  }

  /**
   * See the Jif signature for the explanation of lbl.
   */
  public static IntegPolicy writerPolicy(Store store, Label lbl, Principal owner,
      Principal[] writers) {
      if (writers == null)
        return writerPolicy(store, owner, Collections.EMPTY_SET);
      return writerPolicy(store, owner, Arrays.asList(writers));
  }

  public static IntegPolicy writerPolicy(Store store, Principal owner,
      PrincipalSet writers) {
      return writerPolicy(store, owner, writers.getSet());
  }

  public static Label toLabel(Store store, ConfPolicy cPolicy, IntegPolicy iPolicy) {
      if (cPolicy == null || iPolicy == null)
        throw new NullPointerException@localStore();
      
      Triple triple = new Triple(cPolicy, iPolicy, store);
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Label result = cache.getLabel(triple);
      if (result != null) return result;
      
      result = (Label) new PairLabel@store().fabric$lang$security$PairLabel$(cPolicy, iPolicy);
      cache.putLabel(triple, result);
      return result;
  }

  public static Label toLabel(Store store, ConfPolicy policy) {
      return toLabel(store, policy, topInteg());
  }

  public static Label toLabel(Store store, IntegPolicy policy) {
      return toLabel(store, bottomConf(), policy);
  }
  
  // lift takes a policy and creates a pair label with the other
  // component being bottom
  public static Label liftToLabel(Store store, ConfPolicy policy) {
      return toLabel(store, policy, bottomInteg());
  }
  
  public static Label liftToLabel(Store store, IntegPolicy policy) {
      return toLabel(store, bottomConf(), policy);
  }
  
  public static Label join(Store store, Label l1, Label l2) {
    return join(store, l1, l2, true);
  }
  
  public static Label join(Store store, Label l1, Label l2, boolean simplify) {
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      if (l1 == null) return l2;
      if (l2 == null) return l1;

      if (l1 instanceof PairLabel && l2 instanceof PairLabel) {
        Triple triple = SecurityCache.canonicalize(l1, l2, store);
        Label result = cache.getLabelJoin(triple);

        if (result == null) {
          PairLabel pl1 = (PairLabel) l1;
          PairLabel pl2 = (PairLabel) l2;
          java.util.Set dependencies = new java.util.HashSet();
          result =
              (PairLabel) new PairLabel@store().fabric$lang$security$PairLabel$(
                  pl1.confPolicy().join(store, pl2.confPolicy(), dependencies, simplify),
                  pl1.integPolicy().join(store, pl2.integPolicy(), dependencies, simplify));
          cache.putLabelJoin(triple, result, dependencies);
        }
        return result;

      }
      // error! non pair labels!
      return null;
  }
  
  public static Label meet(Store store, Label l1, Label l2) {
    return meet(store, l1, l2, true);
  }
  
  public static Label meet(Store store, Label l1, Label l2, boolean simplify) {
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      if (l1 == null) return l2;
      if (l2 == null) return l1;

      if (l1 instanceof PairLabel && l2 instanceof PairLabel) {
        Triple triple = SecurityCache.canonicalize(l1, l2, store);
        Label result = cache.getLabelMeet(triple);

        if (result == null) {
          PairLabel pl1 = (PairLabel) l1;
          PairLabel pl2 = (PairLabel) l2;
          java.util.Set dependencies = new java.util.HashSet();
          result =
              (PairLabel) new PairLabel@store().fabric$lang$security$PairLabel$(
                  pl1.confPolicy().meet(store, pl2.confPolicy(), dependencies, simplify),
                  pl1.integPolicy().meet(store, pl2.integPolicy(), dependencies, simplify));
          cache.putLabelMeet(triple, result, dependencies);
        }
        return result;
      }

      // error! non pair labels!
      return null;
  }

  public static ConfPolicy join(Store store, ConfPolicy p1, ConfPolicy p2) {
      return join(store, p1, p2, new java.util.HashSet(), true);
  }

  public static ConfPolicy join(Store store, ConfPolicy p1, ConfPolicy p2, boolean simplify) {
    return join(store, p1, p2, new java.util.HashSet(), true);
  }
    
  public static ConfPolicy join(Store store, ConfPolicy p1, ConfPolicy p2, java.util.Set/* <DelegationPair> */s) {
    return join(store, p1, p2, s, true);
  }

  protected static ConfPolicy join(Store store, ConfPolicy p1, ConfPolicy p2,
      java.util.Set/* <DelegationPair> */s, boolean simplify) {
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Triple triple = SecurityCache.canonicalize(p1, p2, store);
      Pair cacheEntry = cache.getPolicyJoin(triple);
      if (cacheEntry != null) {
        s.addAll((java.util.Set) cacheEntry.second);
        return (ConfPolicy) cacheEntry.first;
      }
      
      Set/* <Policy> */comps = (LinkedHashSet) new LinkedHashSet/* <Policy> */@store().fabric$util$LinkedHashSet$();
      if (p1 instanceof JoinConfPolicy) {
        comps.addAll(((JoinConfPolicy) p1).joinComponents());
      } else {
        comps.add(p1);
      }
      if (p2 instanceof JoinConfPolicy) {
        comps.addAll(((JoinConfPolicy) p2).joinComponents());
      } else {
        comps.add(p2);
      }
      java.util.Set/*<DelegationPair>*/ deps = new java.util.HashSet();
      if (simplify)
        comps = simplifyJoin(store, comps, deps);

      ConfPolicy result;
      if (comps.size() == 1) {
        result = (ConfPolicy) comps.iterator().next();
      } else {
        result = new JoinConfPolicy@store().fabric$lang$security$JoinConfPolicy$(comps);
      }
      
      cache.putPolicyJoin(triple, result, deps);
      s.addAll(deps);
      return result;     
  }

  public static IntegPolicy join(Store store, IntegPolicy p1, IntegPolicy p2) {
      return join(store, p1, p2, new java.util.HashSet/* <DelegationPair> */(), true);
  }
  
  public static IntegPolicy join(Store store, IntegPolicy p1, IntegPolicy p2, boolean simplify) {
    return join(store, p1, p2, new java.util.HashSet/* <DelegationPair> */(), simplify);
  }

  static IntegPolicy join(Store store, IntegPolicy p1, IntegPolicy p2, java.util.Set/* <DelegationPair> */s) {
    return join(store, p1, p2, s, true);
  }
 
  static IntegPolicy join(Store store, IntegPolicy p1, IntegPolicy p2, java.util.Set/* <DelegationPair> */s, boolean simplify) {
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Triple triple = SecurityCache.canonicalize(p1, p2, store);
      Pair cacheEntry = cache.getPolicyJoin(triple);
      if (cacheEntry != null) {
        s.addAll((java.util.Set) cacheEntry.second);
        return (IntegPolicy) cacheEntry.first;
      }

      Set/* <Policy> */comps = (LinkedHashSet) new LinkedHashSet/* <Policy> */@store().fabric$util$LinkedHashSet$();
      if (p1 instanceof JoinIntegPolicy) {
        comps.addAll(((JoinIntegPolicy) p1).joinComponents());
      } else {
        comps.add(p1);
      }
      if (p2 instanceof JoinIntegPolicy) {
        comps.addAll(((JoinIntegPolicy) p2).joinComponents());
      } else {
        comps.add(p2);
      }
      java.util.Set/*<DelegationPair>*/ deps = new java.util.HashSet();
      
      if (simplify)
        comps = simplifyJoin(store, comps, deps);

      IntegPolicy result;
      if (comps.size() == 1) {
        result = (IntegPolicy) comps.iterator().next();
      } else {
        result = (JoinIntegPolicy) new JoinIntegPolicy@store().fabric$lang$security$JoinIntegPolicy$(comps);
      }
      
      cache.putPolicyJoin(triple, result, deps);
      s.addAll(deps);
      return result;
  }
  
  public static ConfPolicy meet(Store store, ConfPolicy p1, ConfPolicy p2) {
    return meet(store, p1, p2,  new java.util.HashSet/* <DelegationPair> */(), true);
  }
  
  public static ConfPolicy meet(Store store, ConfPolicy p1, ConfPolicy p2, boolean simplify) {
    return meet(store, p1, p2,  new java.util.HashSet/* <DelegationPair> */(), simplify);
  }
  
  public static ConfPolicy meet(Store store, ConfPolicy p1, ConfPolicy p2, java.util.Set/* <DelegationPair> */s) {
    return meet(store, p1, p2, s, true);
  }

  protected static ConfPolicy meet(Store store, ConfPolicy p1, ConfPolicy p2,
      java.util.Set/* <DelegationPair> */s, boolean simplify) {
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Triple triple = SecurityCache.canonicalize(p1, p2, store);
      Pair cacheEntry = cache.getPolicyMeet(triple);
      if (cacheEntry != null) {
        s.addAll((java.util.Set) cacheEntry.second);
        return (ConfPolicy) cacheEntry.first;
      }
      
      Set/* <Policy> */comps = (LinkedHashSet) new LinkedHashSet/* <Policy> */@store().fabric$util$LinkedHashSet$();
      if (p1 instanceof MeetConfPolicy) {
        comps.addAll(((MeetConfPolicy) p1).meetComponents());
      } else {
        comps.add(p1);
      }
      if (p2 instanceof MeetConfPolicy) {
        comps.addAll(((MeetConfPolicy) p2).meetComponents());
      } else {
        comps.add(p2);
      }
      java.util.Set/*<DelegationPair>*/ deps = new java.util.HashSet();
      if (simplify)
        comps = simplifyMeet(store, comps, deps);

      ConfPolicy result;
      if (comps.size() == 1) {
        result = (ConfPolicy) comps.iterator().next();
      } else {
        result = (MeetConfPolicy) new MeetConfPolicy@store().fabric$lang$security$MeetConfPolicy$(comps);
      }
      
      cache.putPolicyMeet(triple, result, deps);
      s.addAll(deps);
      return result;
  }

  public static IntegPolicy meet(Store store, IntegPolicy p1, IntegPolicy p2) {
    return meet(store, p1, p2, new java.util.HashSet/* <DelegationPair> */());
  }
  
  public static IntegPolicy meet(Store store, IntegPolicy p1, IntegPolicy p2, boolean simplify) {
    return meet(store, p1, p2, new java.util.HashSet/* <DelegationPair> */(), simplify);
  }

  static IntegPolicy meet(Store store, IntegPolicy p1, IntegPolicy p2, java.util.Set/* <DelegationPair> */s) {
    return meet(store, p1, p2, s, true);
  }
  
  static IntegPolicy meet(Store store, IntegPolicy p1, IntegPolicy p2, java.util.Set/* <DelegationPair> */s, boolean simplify) {
//    try {
//      enterTiming();
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Triple triple = SecurityCache.canonicalize(p1, p2, store);
      Pair cacheEntry = cache.getPolicyMeet(triple);
      if (cacheEntry != null) {
        s.addAll((java.util.Set) cacheEntry.second);
        return (IntegPolicy) cacheEntry.first;
      }

      Set/* <Policy> */comps = (LinkedHashSet) new LinkedHashSet/* <Policy> */@store().fabric$util$LinkedHashSet$();
      if (p1 instanceof MeetIntegPolicy) {
        comps.addAll(((MeetIntegPolicy) p1).meetComponents());
      } else {
        comps.add(p1);
      }
      if (p2 instanceof MeetIntegPolicy) {
        comps.addAll(((MeetIntegPolicy) p2).meetComponents());
      } else {
        comps.add(p2);
      }
      java.util.Set/*<DelegationPair>*/ deps = new java.util.HashSet();
     
      if (simplify)
        comps = simplifyMeet(store, comps, deps);

      IntegPolicy result;
      if (comps.size() == 1) {
        result = (IntegPolicy) comps.iterator().next();
      } else {
        result = (MeetIntegPolicy) new MeetIntegPolicy@store().fabric$lang$security$MeetIntegPolicy$(comps);
      }
      
      cache.putPolicyMeet(triple, result, deps);
      s.addAll(deps);
      return result;
  }

  public static boolean equivalentTo(Label l1, Label l2) {
      if (l1 == l2 || (l1 != null && l1.equals(l2))) return true;
      return relabelsTo(l1, l2) && relabelsTo(l2, l1);
  }

  public static boolean isReadableBy(Label lbl, Principal p) {
      Label L = toLabel(localStore, PrincipalUtil.readableByPrinPolicy(localStore, p));
      return relabelsTo(lbl, L);
  }
  
  public static boolean isWritableBy(Label lbl, Principal p) {
      Label L = toLabel(localStore, PrincipalUtil.writableByPrinPolicy(localStore, p));
      return relabelsTo(L, lbl);
  }

  /**
   * @return true iff from <= to in the information-flow ordering.
   */
  public static boolean relabelsTo(Label from, Label to) {
      if (from == null || to == null) return false;
      if (from == to || from.equals(to)) return true;
      
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Pair pair = new Pair(from, to);
      if (cache.containsTrueLabelRelabel(pair)) return true;
      if (cache.containsFalseLabelRelabel(pair)) return false;
      
      java.util.Set dependencies = new java.util.HashSet();
      boolean result = from != null && from.relabelsTo(to, dependencies);
      if (!result) {
        cache.addFalseLabelRelabel(pair);
      } else {
        cache.addTrueLabelRelabel(pair, dependencies);
      }
      return result;
  }
  
  public static boolean acts_for(Label actor, Principal granter) {
          return actsFor(actor, granter);
  }

  public static boolean actsFor(Label actor, Principal granter) {
      Label L = toLabel(localStore, topConf(), writerPolicy(localStore, granter, granter));
      return relabelsTo(actor, L);
  }

  public static boolean relabelsTo(Policy from, Policy to) {
      return relabelsTo(from, to, new java.util.HashSet/* <DelegationPair> */());
  }

  public static boolean relabelsTo(Policy from, Policy to, java.util.Set/* <DelegationPair> */s) {
      if (from == null || to == null) return false;
      if (from == to || from.equals(to)) return true;
      
      SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
      Pair pair = new Pair(from, to);
      if (cache.containsTruePolicyRelabel(pair)) {
        s.addAll(cache.getTruePolicyRelabels(pair));
        return true;
      }
      if (cache.containsFalsePolicyRelabel(pair)) return false;
      java.util.Set/* <DelegationPair> */dependencies =
          new java.util.HashSet/* <DelegationPair> */();
      boolean result = from.relabelsTo(to, dependencies);
      if (!result) {
        cache.addFalsePolicyRelabel(pair);
      } else {
        cache.putTruePolicyRelabels(pair, dependencies);
        s.addAll(dependencies);
      }
      return result;
  }

  public static String stringValue(Label lb) {
//    try {
//      enterTiming();
      if (lb == null) return "<null>";
      return lb.toString();
//    } finally {
//      exitTiming();
//    }
  }

  public static String toString(Label lb) {
//    try {
//      enterTiming();
      return stringValue(lb);
//    } finally {
//      exitTiming();
//    }
  }

  public static int hashCode(Label lb) {
//    try {
//      enterTiming();
      if (lb == null) return 0;
      return lb.hashCode();
//    } finally {
//      exitTiming();
//    }
  }

  private static Set/* <Policy> */simplifyJoin(Store store, Set/* <Policy> */policies,
      java.util.Set/* <DelegationPair> */dependencies) {
    Set/* <Policy> */needed = (LinkedHashSet) new LinkedHashSet/* <Policy> */@store().fabric$util$LinkedHashSet$();
    for (Iterator/* <Policy> */i = policies.iterator(); i.hasNext();) {
      Policy ci = (Policy) i.next();

      boolean subsumed = (ci == null); // null components are always subsumed.
      for (Iterator/* <Policy> */j = needed.iterator(); !subsumed
          && j.hasNext();) {
        Policy cj = (Policy) j.next();
        if (relabelsTo(ci, cj, dependencies)) {
          subsumed = true;
          break;
        }

        if (relabelsTo(cj, ci, dependencies)) {
          j.remove();
        }
      }

      if (!subsumed) needed.add(ci);
    }

    return needed;
  }

  private static Set/* <Policy> */simplifyMeet(Store store, Set/* <Policy> */policies,
      java.util.Set/* <DelegationPair> */dependencies) {
    Set/* <Policy> */needed = (LinkedHashSet) new LinkedHashSet/* <Policy> */@store().fabric$util$LinkedHashSet$();
    for (Iterator/* <Policy> */i = policies.iterator(); i.hasNext();) {
      Policy ci = (Policy) i.next();

      boolean subsumed = (ci == null); // null components are always subsumed.
      for (Iterator/* <Policy> */j = needed.iterator(); !subsumed
          && j.hasNext();) {
        Policy cj = (Policy) j.next();
        if (relabelsTo(cj, ci, dependencies)) {
          subsumed = true;
          break;
        }

        if (relabelsTo(ci, cj, dependencies)) {
          j.remove();
        }
      }

      if (!subsumed) needed.add(ci);
    }

    return needed;
  }

  static void notifyNewDelegation(Principal granter, Principal superior) {
    SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
    
    // XXX for the moment, just clear out the caches.
    cache.clearFalseLabelRelabels();
    cache.clearFalsePolicyRelabels();
  }

  /**
   * Throws an exception if o's store is not trusted to enforce accessLabel.
   * @param accessLabel
   * @param o
   */
  public static Object accessCheck(Label accessLabel, Object o) {
    Label storeLabel = readerPolicyLabel(PrincipalUtil.topPrincipal(), 
        /* TODO XXX HUGE HACK. WE SHOULD NOT CALL fetch(). REMOVE AFTER SURROGATES PROBLEM IS FIXED. */
        o.fetch().$getStore().getPrincipal());
    if (!relabelsTo(accessLabel, storeLabel))
      throw new InternalError("Illegal access to " + o.$getStore()
          + ": access label is " + accessLabel.toString());
    else 
      return o;
  }
  
  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
