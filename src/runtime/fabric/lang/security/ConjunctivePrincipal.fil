package fabric.lang.security;

import fabric.worker.Worker;
import fabric.worker.Store;
import fabric.util.*;

/**
 * A conjunction of two or more (non-null) principals. This code is mostly
 * copied from Jif.
 */
public final class ConjunctivePrincipal extends Principal {
  final Set conjuncts;
  private Integer hashCode;

  ConjunctivePrincipal fabric$lang$security$ConjunctivePrincipal$(Set conjuncts) {
    this.conjuncts = conjuncts;
    fabric$lang$security$Principal$();
    return this;
  }

  public String name() {
    StringBuffer sb = new StringBuffer();
    for (Iterator iter = conjuncts.iterator(); iter.hasNext();) {
      Principal p = (Principal) iter.next();
      sb.append(PrincipalUtil.toString(p));
      if (iter.hasNext()) sb.append("&");
    }
    return sb.toString();
  }

  public boolean delegatesTo(Principal p) {
    if (p instanceof ConjunctivePrincipal) {
      ConjunctivePrincipal cp = (ConjunctivePrincipal) p;
      return cp.conjuncts.containsAll(this.conjuncts);
    }
    for (Iterator iter = conjuncts.iterator(); iter.hasNext();) {
      Principal q = (Principal) iter.next();
      if (!PrincipalUtil.delegatesTo(q, p)) return false;
    }
    // every conjuct delegates to p.
    return true;
  }

  public int hashCode() {
    if (hashCode == null) {
      hashCode = new Integer(conjuncts.hashCode());
    }
    return hashCode.intValue();
  }

  public boolean equals(Principal p) {
    if (p instanceof ConjunctivePrincipal) {
      ConjunctivePrincipal that = (ConjunctivePrincipal) p;
      return this.hashCode() == that.hashCode()
          && this.conjuncts.equals(that.conjuncts)
          && that.conjuncts.equals(this.conjuncts);
    }
    return false;
  }

  public boolean isAuthorized(java.lang.Object authPrf, Closure closure, Label lb,
      boolean executeNow) {
    for (Iterator iter = conjuncts.iterator(); iter.hasNext();) {
      Principal p = (Principal) iter.next();
      if (!p.isAuthorized(authPrf, closure, lb, executeNow)) return false;
    }
    // all conjuncts authorize the closure.
    return true;
  }

  public ActsForProof findProofUpto(Store store, Principal p, java.lang.Object searchState) {
    Map proofs = (HashMap) new HashMap@store().fabric$util$HashMap$();
    for (Iterator iter = conjuncts.iterator(); iter.hasNext();) {
      Principal q = (Principal) iter.next();
      ActsForProof prf = PrincipalUtil.findActsForProof(store, p, q, searchState);
      if (prf == null) return null;
      proofs.put(q, prf);
    }

    // proofs contains a proof for every conjunct,
    // which is sufficent for a proof to the conjunctive principal
    return (ToConjunctProof) new ToConjunctProof@store().fabric$lang$security$ToConjunctProof$(p, this, proofs);

  }

  public ActsForProof findProofDownto(Store store, Principal q, java.lang.Object searchState) {
    for (Iterator iter = conjuncts.iterator(); iter.hasNext();) {
      Principal witness = (Principal) iter.next();
      ActsForProof prf =
          PrincipalUtil.findActsForProof(store, witness, q, searchState);
      if (prf != null) {
        // have found a proof from witness to q
        DelegatesProof step = (DelegatesProof) new DelegatesProof@store().fabric$lang$security$DelegatesProof$(this, witness);
        return (TransitiveProof) new TransitiveProof@store().fabric$lang$security$TransitiveProof$(step, witness, prf);
      }
    }
    return null;
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
