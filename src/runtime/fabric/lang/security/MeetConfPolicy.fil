package fabric.lang.security;

import fabric.util.*;

/**
 * Represents the meet of confidentiality policies. This code is mostly copied
 * from Jif.
 */
public final class MeetConfPolicy extends MeetPolicy implements ConfPolicy {
 MeetConfPolicy fabric$lang$security$MeetConfPolicy$(Set policies) {
    fabric$lang$security$MeetPolicy$(policies);
	return this;
  }

  public ConfPolicy join(Store store, ConfPolicy p, java.util.Set/*<DelegationPair>*/ s) {
     return join(store, p, s, true);
  }
  
  public ConfPolicy meet(Store store, ConfPolicy p, java.util.Set/*<DelegationPair>*/ s) {
     return meet(store, p, s, true);
  }
  
  public ConfPolicy join(Store store, ConfPolicy p) {
     return join(store, p, true);
  }
  
  public ConfPolicy meet(Store store, ConfPolicy p) {
     return meet(store, p, true);
  }
  
  public ConfPolicy join(Store store, ConfPolicy p, boolean simplify) {
     return LabelUtil.join(store, this, p, simplify);
  }
  
  public ConfPolicy meet(Store store, ConfPolicy p, boolean simplify) {
     return LabelUtil.meet(store, this, p, simplify);
  }
  
  public ConfPolicy join(Store store, ConfPolicy p, java.util.Set/*<DelegationPair>*/ s, boolean simplify) {
     return LabelUtil.join(store, this, p, s, simplify);
  }
  
  public ConfPolicy meet(Store store, ConfPolicy p, java.util.Set/*<DelegationPair>*/ s, boolean simplify) {
     return LabelUtil.meet(store, this, p, s, simplify);
  }


  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
