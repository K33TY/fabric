package fabric.lang;

import java.io.IOException;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import fabric.worker.Worker;
import fabric.worker.Store;
import fabric.util.Set;
import fabric.util.HashSet;

/**
 * A Fabric class; it has the bytecode and source of the fabric class and the 
 * codebase it is associated to.
 * 
 * @author Lucas Waye <lrw48@cornell.edu>
 */
public class FClass {
  byte[]   bytecode;
  Codebase codebase;
  String   name;
  String   source;
  Set/*String*/ dependencies;
  
  public FClass(String name, byte[] bytecode, String source) {
    this.name = new String(name);
    this.bytecode = bytecode;
    this.source = source;
    this.dependencies = new HashSet();
  }
  
  public String getName() {
    return name;
  }
  
  public String getSource() {
    return source;
  }  
  
  /**
   * Sets the codebase the class should be loaded in. Should only be set once.
   */
  public void setCodebase(Codebase c) {
    codebase = c;
  }

  public Codebase getCodebase() {
    return codebase;
  }
  
  public byte[] getBytecode() {
    atomic {
      byte[] copy = new byte[bytecode.length];
      for (int i = 0; i < copy.length; i++)
        copy[i] = bytecode[i];
      return copy;
    }
  }
  
  public Set/*String*/ dependencies() {
    return dependencies;
  }

  public void addDependency(String dep) {
    dependencies.add(dep);
  }
  
  public boolean dependsOn(String dep) {
    return dependencies.contains(dep);
  }
}
