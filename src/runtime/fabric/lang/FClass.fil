/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang;

import java.io.IOException;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import fabric.worker.Worker;
import fabric.worker.Store;

/**
 * A Fabric class; it has the bytecode of the java class and the codebase 
 * it is associated to.
 * 
 * @author Lucas Waye <lrw48@cornell.edu>
 */
public class FClass {
  byte[]   bytecode;
  Codebase codebase;
  String   name;
  
  public FClass(String name, byte[] bytecode) {
    this.name = new String(name);
    this.bytecode = bytecode;
  }
  
  public String getName() {
	  return name;
  }
  
  /**
   * Sets the codebase the class should be loaded in. Should only be set once.
   */
  public void setCodebase(Codebase c) {
	  codebase = c;
  }

  public Codebase getCodebase() {
	  return codebase;
  }
  
  public byte[] getBytecode() {
	  atomic {
		  byte[] copy = new byte[bytecode.length];
		  for (int i = 0; i < copy.length; i++)
			  copy[i] = bytecode[i];
		  return copy;
	  }
  }
}
