/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang;

import java.io.IOException;
import java.util.Properties;
import fabric.util.Collections;
import fabric.util.HashMap;
import fabric.util.Map;
import fabric.util.Iterator;

/**
 * A codebase is a Fabric object that provides a mapping from fully qualified 
 * class names to Fabric class objects. 
 * 
 * @author Lucas Waye <lrw48@cornell.edu>
 */
public class Codebase {	
	
  /** All of the classes in the codebase **/
  private Map/*String, FClass*/ classes;
  
  FClass resolveClassName(String name) {
    return (FClass)classes.get(name);
  }

  public Class toJavaClass(String name) {
	  	FClass c = resolveClassName(name);
	  	if (c == null)
	  		return null;
	  	
	  	if (c.getCodebase().equals(this))
	  		return c.getCodebase().getClassLoader().getJavaClass(c);
	  	else
	  		return c.getCodebase().toJavaClass(name);
  }
  
  FabricClassLoader getClassLoader() {
    return FabricClassLoader.getClassLoader(this);
  }
  
  public Codebase(Map/*String, FClass*/ classes) {
    this.classes = new HashMap(classes);
  }
  
  public Map/*String, FClass*/ getClasses() {
	atomic {
		return Collections.unmodifiableMap(classes);
	}
  }
  
  public FClass getClass(String s) {
	  return (FClass)classes.get(s);
  }
  
}
