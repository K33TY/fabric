package fabric.lang;

import java.io.IOException;
import java.util.Properties;
import fabric.util.Collections;
import fabric.util.HashMap;
import fabric.util.Map;
import fabric.util.Iterator;

/**
 * A codebase is a Fabric object that provides a mapping from fully qualified 
 * class names to Fabric FClass objects. 
 * 
 * @author Lucas Waye <lrw48@cornell.edu>
 */
public class Codebase {	
	
  /** All of the classes in the codebase **/
  private Map/*String, FClass*/ classes;
  
  FClass resolveClassName(String name) {
    //XXX sloppy name mangling
    name = name.replaceAll("$_Impl", "").replaceAll("$_Proxy", "");
    return (FClass)classes.get(name);
  }
  
  public Codebase() {
    classes = new HashMap();
  }	
	
  public Codebase(Map/*String, FClass*/ classes) {
    this.classes = new HashMap(classes);
  }
  
  /* Should only be called at compile time */
  public void insertClass(String name, FClass fcls) {
    classes.put(name, fcls);
  }

  public Map/*String, FClass*/ getClasses() {
    atomic {
      return Collections.unmodifiableMap(classes);
    }
  }
}
