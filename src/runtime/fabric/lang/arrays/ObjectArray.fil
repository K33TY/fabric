/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.lang.arrays;

import fabric.worker.Store;
import fabric.lang.arrays.internal._ObjectArray;

/**
 * <p>
 * This class implements a resizable array using
 * fabric.lang.arrays.internal._ObjectArray as a primitive. The smaller array
 * pieces are arranged as a tree so as to support efficient indexing operations.
 * This version of ResizableArray assumes elements are Object instances.
 * </p>
 * <p>
 * Possible optimizations:
 * <ol>
 * <li>Convert the length to a base 128 representation will make it easier to
 * take logs then.</li>
 * </ol>
 * </p>
 * <p>
 * Bugs:
 * <ol>
 * <li>If the array is indeed of _ObjectArray instance, then things could get
 * messed up. We're assuming for now that this case won't arise.</li>
 * </ol>
 * </p>
 * 
 * @author kvikram
 */

public final class ObjectArray {
  private static final Object DEFAULT_VALUE = null;
  
  /**
   * The number of elements in each little array. Dependent on the MTU?
   * Analogous to a block in a file system. Also directly determines the fanout.
   * We always need it to be a power of 2.
   */
  private final int CHUNK_SIZE;
  private final int CHUNK_SIZE_LOG2;

  /**
   * The height of the tree of little arrays. Depends on the chunk size
   * (determining the branching factor) and the number of expected elements in
   * the bigger array
   */
  private int height;

  /**
   * The number of expected elements in this big array Can be modified even
   * after an instance has been created
   */
  private int length;

  /**
   * The class representing the proxy type for the array elements.
   */
  private final Class proxyType;

  /**
   * The root of the tree of little arrays. The runtime type of root is a Fabric
   * array of Fabric Objects. Each object in the array is either a further array
   * of objects or is an array element if this array is at the leaf level
   */
  private _ObjectArray root;

  /**
   * Creates a new object array at the given Store with the given length.
   * 
   * @param store
   *                The store on which to allocate the array.
   * @param length
   *                The length of the array.
   */
  public ObjectArray(Class proxyType, int length) {
    // Default chunk size is 256.
    this(proxyType, length, 8);
  }

  public ObjectArray(Class proxyType, int length, int CHUNK_SIZE_LOG2) {
    this.CHUNK_SIZE_LOG2 = CHUNK_SIZE_LOG2;
    this.CHUNK_SIZE = (1 << CHUNK_SIZE_LOG2);
    this.proxyType = proxyType;
    this.length = length;

    // Compute required height (height starts at 1).
    this.height = getHeight(length);
    if (height == 1)
      root = new _ObjectArray(proxyType, CHUNK_SIZE);
    else root = new _ObjectArray(_ObjectArray.class, CHUNK_SIZE);
  }

  public int getLength() {
    return length;
  }
  
  /**
   * Ceiling(log_{CHUNK_SIZE}(length)).  (Except returns 1 if length <= 1.)
   * This basically returns the height of the tree for a given array length.
   */
  private int getHeight(int length) {
    if (length <= 1) return 1;
    
    int result = 0;
    
    // Start with tmp == 1 and shift left until tmp >= length.
    int tmp = 1;
    while (tmp < length) {
      tmp <<= this.CHUNK_SIZE_LOG2;
      result++;
    }
    return result;
  }
  
  private void setZeroLength() {
    this.length = 0;
    this.height = 1;
    root = new _ObjectArray(proxyType, CHUNK_SIZE);
  }

  public void setLength(int newSize) {
    if (newSize < 0) throw new NegativeArraySizeException();
    if (newSize == 0) setZeroLength();
    
    int newHeight = getHeight(newSize);
    int difference = newHeight - this.height;
    this.height = newHeight;
    this.length = newSize;

    // Set root and null out unnecessary stuff.
    if (difference > 0) {
      // Make sure the leaves are at the right level - push down the root.
      for (int count = 0; count < difference; count++) {
        _ObjectArray newRoot = new _ObjectArray(_ObjectArray.class, CHUNK_SIZE);
        newRoot.set(0, root);
        root = newRoot;
      }
    } else if (difference < 0) {
      // Truncate the last so many array slots.
      for (int count = 0; count < -difference; count++) {
        _ObjectArray rootArray = (_ObjectArray) root.get(0);
        root = rootArray;
      }

      // Null out the part of the tree that shouldn't exist anymore.
      _ObjectArray curNode = root;
      int curIndex = newSize - 1;
      int curHeight = newHeight;
      int counter = newHeight - 1;
      int firstDigit;
      while (curHeight >= 1 && curNode != null) {
        firstDigit = (curIndex >> (counter * this.CHUNK_SIZE_LOG2));
        for (int count = firstDigit + 1; count < this.CHUNK_SIZE; count++) {
          curNode.set(count, null);
        }
        curNode = (_ObjectArray) curNode.get(firstDigit);
        curIndex = (curIndex & ((1 << counter * this.CHUNK_SIZE_LOG2) - 1));
        counter -= this.CHUNK_SIZE_LOG2;
        curHeight--;
      }
    }
  }

  public Object get(int i) {
    if (i >= length) throw new ArrayIndexOutOfBoundsException();
    _ObjectArray node = root;
    int level = height;
    int c = this.CHUNK_SIZE_LOG2;
    int counter = (level - 1) * c;
    int firstDigit;
    while (level > 1) {
      firstDigit = (i >> counter);
      node = (_ObjectArray) node.get(firstDigit);
      if (node == null) {
        return DEFAULT_VALUE;
      }
      i = (i & ((1 << counter) - 1));
      counter -= c;
      level--;
    }
    return node.get(i);
  }

  public Object set(int i, Object data) {
    if (i >= length) throw new ArrayIndexOutOfBoundsException();
    _ObjectArray node = root;
    int level = height;
    int c = this.CHUNK_SIZE_LOG2;
    int counter = (level - 1) * c;
    int firstDigit;
    Object nextObject;
    while (level > 1) {
      firstDigit = (i >> counter);
      nextObject = node.get(firstDigit);
      if (nextObject == null) {
        // Writing to a node that doesn't exist yet. Time to create it.
        if (level == 2)
          nextObject = new _ObjectArray(proxyType, CHUNK_SIZE);
        else nextObject = new _ObjectArray(_ObjectArray.class, CHUNK_SIZE);
        node.set(firstDigit, nextObject);
      }
      node = (_ObjectArray) nextObject;
      i = (i & ((1 << counter) - 1));
      counter -= c;
      level--;
    }
    return node.set(i, data);
  }
}
