package fabric.util;

import java.io.Serializable;

/**
 * Represents Events fired by Objects.
 *
 * @author Eric Blake (ebb9@email.byu.edu)
 * @see EventListener
 * @since 1.1
 * @status updated to 1.4
 */
public class EventObject implements Serializable
{
  /**
   * Compatible with JDK 1.1+.
   */
  private static final long serialVersionUID = 5516075349620653480L;

  /**
   * The source object; in other words, the object which this event takes
   * place on.
   */
  protected transient Object source;

  /**
   * Constructs an EventObject with the specified source.
   *
   * @param source the source of the event
   * @throws IllegalArgumentException if source is null (This is not
   *         specified, but matches the behavior of the JDK)
   */
  public EventObject(Object source)
  {
    // This check for null is stupid, if you ask me, since source is
    // protected and non-final, so a subclass can set it to null later on.
    if (source == null)
      throw new IllegalArgumentException();
    this.source = source;
  }

  /**
   * Returns the source of the event.
   *
   * @return the event source
   */
  public Object getSource()
  {
    return source;
  }

  /**
   * Converts the event to a String. The format is not specified, but by
   * observation, the JDK uses:
   * <code>getClass().getName() + "[source=" + source + "]";</code>.
   *
   * @return String representation of the Event
   */
  public String toString()
  {
    return getClass().getName() + "[source=" + source + "]";
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();
  }
} // class EventObject
