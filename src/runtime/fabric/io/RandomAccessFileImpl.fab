package fabric.io;

import fabric.lang.arrays.ResizableByteArray;
import fabric.client.Core;
import java.io.IOException;

public class RandomAccessFileImpl implements RandomAccessFile {
    FileImpl file;
    ResizableByteArray contents;
    FabFile fabFile;
    int currentPos;

    public RandomAccessFileImpl(Core remoteCore, String path) throws IOException {
        this.file = new FileImpl(remoteCore, path);

        if(!file.exists()) {
            if(!file.mkfile()) {
                throw new IOException("Cannot find or create file: " + path);
            }
        }
        fabFile = (FabFile)file.element;
        contents = fabFile.contents;
        currentPos = 0;
    }

    public void seek(long offset) {
        currentPos += (int)offset;
    }

    public void write(FileByteArray b, int off, int len) {
        atomic {
            if(contents.getLength() < currentPos + len) {
                contents.setLength(currentPos + len);
            }
            for(int i = 0; i < len; i++) {
                contents.set(currentPos + i, b.get(i+off));
            }
            fabFile.lastModifiedDate = System.currentTimeMillis();
        }
    }

    public void close() {
        currentPos = 0;

    }

}