/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * 
 
 This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
import fabric.util.Map;
import fabric.runtime.Runtime;
import fabricated.util.List;
import fabricated.util.Comparator;
import fabricated.util.IdComparator;

class SuperPingMain{

  public static void main{*provider}(principal{p<-} p, String[] args):{p<-;p->}
    throws Exception
  {
    // make the stores involved in our transaction
    final Store alicestore = FabricWorker.getWorker().getStore("alicenode");
    final Store bobstore   = FabricWorker.getWorker().getStore("bobnode");
    final principal alice = alicestore.getPrincipal();
    final principal bob = bobstore.getPrincipal();
    final label initialWritePast = new label{alice←};

    // The label on bloody everything to start with: alice thinks bob can read it, and alice can write it.
    final label incomingLabel = new label{alice→ bob; alice←}@alicestore;

    // construct the SuperPing object we'll be using for the initial call
    final SuperPing ping = new SuperPing[incomingLabel]@alicestore();

    // an initial message, just "Hello World" for now.
    final Message[incomingLabel]{incomingLabel} message = new Message[{incomingLabel}]@alicestore("Hello, World");

    // Now constructing the bloody store list, which apparently invovles a comparator. 
    final Comparator[incomingLabel]{incomingLabel} comparator = new IdComparator[incomingLabel]@alicestore();
    List[{incomingLabel}]{incomingLabel} storeList =  new ArrayListSubListable[incomingLabel](comparator, 2);
    storeList.set(0,alicestore);
    storeList.set(1,bobstore);

    // The actually interesting call. We start on alicestore. 
    atomic {
      //final Message[{p→}] result = 
      ping.ping@alicestore(message, storeList, initialWritePast);
      Runtime[p].getRuntime().out().println("done");//result.getMessage());
    }
  }
}
