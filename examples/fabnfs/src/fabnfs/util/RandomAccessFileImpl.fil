package fabnfs.util;

import fabric.worker.Store;
import java.io.IOException;

public class RandomAccessFileImpl implements RandomAccessFile {
    FileImpl file;
    byte[] contents;
    FileSystemObject fabFile;
    int currentPos;

    public RandomAccessFileImpl fabnfs$util$RandomAccessFileImpl(Store remoteStore, String path) throws IOException {
        fabric$lang$Object$();
        this.file = (FileImpl)new FileImpl().fabnfs$util$FileImpl(remoteStore, path);


        if (!file.exists()) {
//            System.err.println("File " + path + " does not exi]st. Creating it...");
            if (!file.mkfile()) {
                throw new IOException("Cannot find or create file: " + path);

            }
        }
        fabFile = file.element;
        if (fabFile instanceof FabFile) {
            contents = ((FabFile)fabFile).contents;
        } else {
            contents = null;
        }
        currentPos = 0;
        return this;
    }

    public void seek(long offset) {
        currentPos = currentPos + ((int) offset);
    }

    public void write(byte native[] b, int off, int len) {
        atomic {
            if (contents == null) return;
            if (contents.length < currentPos + len) {
                contents.length = currentPos + len;
            }
            for (int i = 0; i < len; i++) {
                contents[currentPos + i] = b[i+off];
            }
            fabFile.lastModifiedDate = System.currentTimeMillis();
        }
    }

    public void close() {
        currentPos = 0;

    }

}
