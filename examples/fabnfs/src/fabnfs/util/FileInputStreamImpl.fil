package fabnfs.util;

import fabric.worker.Store;
import java.io.IOException;
import fabnfs.util.File;

public class FileInputStreamImpl implements FileInputStream {
    FileImpl file;
    byte[] barray;

    int currentPos = 0;

    public FileInputStreamImpl fabnfs$util$FileInputStreamImpl(Store remoteStore, String fileName) throws IOException {
        fabric$lang$Object$();
        file = (FileImpl)new FileImpl().fabnfs$util$FileImpl(remoteStore, fileName);

        if (!file.exists()) {
            throw new IOException("File " + fileName + " does not exist");

        }
        if (!(file.element instanceof FabFile)) {
            throw new IOException("File " + fileName + " is a directory");

        }
        barray = ((FabFile)file.element).contents;
        return this;
    }

    public long skip(long n) {
        currentPos = currentPos + (int)n;
        return n;
    }

    public int read(byte native[] fbarray) {
        System.err.println("currentPos: " + currentPos);
        System.err.println("array length: " + barray.length);
        int i = 0;
        while (i < fbarray.length) {
          byte b = (byte)read();
          if (b == File.EOF)
            break;
          fbarray[i++] = b;
        }
        return i;
    }

    public int read() {
        if (currentPos >= barray.length)
          return File.EOF;
        return barray[currentPos++];
    }

    public void close() {
        // hopefully this will be garbage collected
        barray = null;
        file = null;
    }
}
