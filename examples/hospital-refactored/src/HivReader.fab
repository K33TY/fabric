class HivReader {

  /**
   * Reads the given patient list, saves the list of addresses for HIV-positive
   * patients into the given drop box, and returns a string representation of
   * the result.
   */
  public static String{*addressLabel; *hivLabel}
    readHiv{*listLabel}@{W2R(*listLabel)}(
      label{*addressLabel ; *hivLabel} listLabel,
      label{*addressLabel ; *hivLabel} addressLabel,
      label{*addressLabel ; *hivLabel} hivLabel,
      PatientList[listLabel, addressLabel, hivLabel]{*listLabel} patients,
      DropBox[{*addressLabel; *hivLabel}]{*listLabel} dropBox
  )@{*addressLabel; *hivLabel}
    where
      // Those able to modify HIV statuses and those able to modify addresses
      // must also be able to modify the patient list.
      // This follows from listLabel = {*addressLabel ⊓ *hivLabel}.
      {W2R(*listLabel)} ⊑ {W2R(*hivLabel)} ⊓ {W2R(*addressLabel)},

      // Those able to modify both addresses and HIV statuses are also able to
      // read address labels and HIV statuses.
      {*addressLabel ; *hivLabel} ⊑ {W2R({*addressLabel ; *hivLabel})},

    ////// Original constraints follow below /////

      // List label is the meet of address and hiv labels.
      listLabel ⊑ {*addressLabel ⊓ *hivLabel},
      {*addressLabel ⊓ *hivLabel} ⊑ listLabel,

      // Drop box's store can store the result.
      {*addressLabel ; *hivLabel} ⊑ {⊤→dropBox.store$},
      {⊤←dropBox.store$} ⊑ {*addressLabel ; *hivLabel}
  {
    if (dropBox == null) return "drop box came back null";

    if (patients == null) {
      dropBox.result = null;
      return "patients came back null";
    }

    String{*addressLabel; *hivLabel} resultStr = "";
    atomic {
      AddressList[{*addressLabel; *hivLabel}]{*addressLabel;*hivLabel} result =
          filterAndGetAddresses(dropBox.store$, listLabel, addressLabel,
              hivLabel, patients);
      dropBox.result = result;

      if (result != null) {
        resultStr = resultStr + "\n" + result.toString();
      } else {
        resultStr = resultStr + "\n" + "no HIV-positive patients found";
      }
    }

    return resultStr;
  }

  /**
   * Filters the given patient list for HIV-positive patients and obtains a
   * list of their addresses.
   */
  public static AddressList[{*addressLabel;*hivLabel}]{*addressLabel;*hivLabel}
    filterAndGetAddresses{*listLabel}@{W2R(*listLabel)}(
      Store{*addressLabel ; *hivLabel} store,
      label{*addressLabel ; *hivLabel} listLabel,
      label{*addressLabel ; *hivLabel} addressLabel,
      label{*addressLabel ; *hivLabel} hivLabel,
      PatientList[listLabel, addressLabel, hivLabel]{*listLabel} patients
  )@{W2R(*addressLabel)}
    where
      // Those able to modify the patient list are also able to
      // read the patient list.
      {*listLabel} ⊑ {W2R(*listLabel)},

      // Those able to modify HIV statuses and those able to modify addresses
      // must also be able to modify the patient list.
      // This follows from listLabel = {*addressLabel ⊓ *hivLabel}.
      {W2R(*listLabel)} ⊑ {W2R(*hivLabel)} ⊓ {W2R(*addressLabel)},

    ////// Original constraints follow below /////

      // List label is the meet of address and hiv labels.
      listLabel ⊑ {*addressLabel ⊓ *hivLabel},
      {*addressLabel ⊓ *hivLabel} ⊑ listLabel,

      // store can store the result.
      {*addressLabel ; *hivLabel} ⊑ {⊤→store},
      {⊤←store} ⊑ {*addressLabel ; *hivLabel}
  {
    if (patients == null) return null;

    Patient[addressLabel, hivLabel] cur = patients.patient;
    PatientList[listLabel, addressLabel, hivLabel] tail = patients.next;

    if (cur == null) {
      return
          filterAndGetAddresses(store, listLabel, addressLabel, hivLabel, tail);
    }

    boolean curHivStatus = cur.hivStatus;
    AddressList[{*addressLabel;*hivLabel}] result =
        filterAndGetAddresses(store, listLabel, addressLabel, hivLabel, tail);
    String curAddress = cur.address;

    if (curHivStatus) {
      result =
          new AddressList[{*addressLabel;*hivLabel}]@store(curAddress, result);
    }

    return result;
  }
}
