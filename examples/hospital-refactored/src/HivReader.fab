class HivReader {

//  /**
//   * Reads the given patient list, saves the list of addresses for HIV-positive
//   * patients into the given drop box, and returns a string representation of
//   * the result.
//   */
//  public static String{*hivLabel}
//    readHiv{*listLabel}@{*listLabel}(
//      // The principal that can read and modify addresses.
//      principal{*listLabel} addressP,
//      // The principal that can read and modify HIV statuses.
//      principal{*listLabel} hivP,
//      label{*listLabel} listLabel,
//      label{*listLabel} addressLabel,
//      label{*listLabel} hivLabel,
//      PatientList[listLabel, addressLabel, hivLabel]{*listLabel} patients,
//      DropBox[hivLabel]{*listLabel} dropBox
//    )@{*hivLabel}
//  where
//    // hivP is more trusted than addressP
//    hivP ≽ addressP,
//
//    // listLabel = {addressP→ ; hivP←}
//    listLabel ⊑ {addressP→ ; hivP←},
//    {addressP→;hivP←} ⊑ listLabel,
//
//    // ...and therefore, listLabel ⊑ W2R(listLabel)
//    listLabel ⊑ {W2R(*listLabel) ; ⊥←},
//
//    // hivLabel = {hivP→ ; hivP←}
//    hivLabel ⊑ {hivP→ ; hivP←},
//    {hivP→ ; hivP←} ⊑ hivLabel,
//
//    // ...and therefore, hivLabel ⊑ W2R(hivLabel)
//    hivLabel ⊑ {W2R(*hivLabel) ; ⊥←},
//
//    // addressLabel = {addressP→ ; addressP←}
//    addressLabel ⊑ {addressP→ ; addressP←},
//    {addressP→ ; addressP←} ⊑ addressLabel,
//
//    // ...and therefore, addressLabel ⊑ W2R(addressLabel)
//    addressLabel ⊑ {W2R(*addressLabel) ; ⊥←},
//
//    // Drop box's store can store the result.
//    hivLabel ⊑ {⊤→dropBox.store$},
//    {⊤←dropBox.store$} ⊑ hivLabel
//  {
//    if (dropBox == null) return "drop box came back null";
//
//    if (patients == null) {
//      dropBox.result = null;
//      return "patients came back null";
//    }
//
//    String{*addressLabel; *hivLabel} resultStr = "";
//    atomic {
//      AddressList[hivLabel]{*addressLabel;*hivLabel} result =
//          filterAndGetAddresses(addressP, hivP, dropBox.store$, listLabel,
//              addressLabel, hivLabel, patients);
//      dropBox.result = result;
//
//      if (result != null) {
//        resultStr = resultStr + "\n" + result.toString();
//      } else {
//        resultStr = resultStr + "\n" + "no HIV-positive patients found";
//      }
//    }
//
//    return resultStr;
//  }

  /**
   * Filters the given patient list for HIV-positive patients and obtains a
   * list of their addresses.
   */
  public static AddressList[hivLabel]{*hivLabel}
    filterAndGetAddresses{*listLabel}@{*listLabel}(
      // The principal that can read and modify addresses.
      principal{*listLabel} addressP,
      // The principal that can read and modify HIV statuses.
      principal{*listLabel} hivP,
      Store{*listLabel} store,
      label{*listLabel} listLabel,
      label{*listLabel} addressLabel,
      label{*listLabel} hivLabel,
      PatientList[listLabel, addressLabel, hivLabel]{*listLabel} patients
    )@{*hivLabel}
  where
    // hivP is more trusted than addressP
    hivP ≽ addressP,

    // listLabel = {addressP→ ; hivP←}
    listLabel ⊑ {addressP→ ; hivP←},
    {addressP→;hivP←} ⊑ listLabel,

    // ...and therefore, listLabel ⊑ W2R(listLabel)
    listLabel ⊑ {W2R(*listLabel) ; ⊥←},

    // hivLabel = {hivP→ ; hivP←}
    hivLabel ⊑ {hivP→ ; hivP←},
    {hivP→ ; hivP←} ⊑ hivLabel,

    // ...and therefore, hivLabel ⊑ W2R(hivLabel)
    hivLabel ⊑ {W2R(*hivLabel) ; ⊥←},

    // addressLabel = {addressP→ ; addressP←}
    addressLabel ⊑ {addressP→ ; addressP←},
    {addressP→ ; addressP←} ⊑ addressLabel,

    // ...and therefore, addressLabel ⊑ W2R(addressLabel)
    addressLabel ⊑ {W2R(*addressLabel) ; ⊥←},

    // Since
    //   listLabel = {addressP→ ; hivP←}
    //   addressLabel = {addressP→ ; addressP←}
    // therefore
    //   listLabel ⊑ W2R(addressLabel)
    listLabel ⊑ {W2R(addressLabel) ; ⊥←},

    // store can store the result.
    hivLabel ⊑ {⊤→store},
    {⊤←store} ⊑ hivLabel
  {
    if (patients == null) return null;

    Patient[addressLabel, hivLabel] cur = patients.patient;
    PatientList[listLabel, addressLabel, hivLabel] tail = patients.next;

    if (cur == null) {
      return
          filterAndGetAddresses(addressP, hivP, store, listLabel, addressLabel,
              hivLabel, tail);
    }

    String curAddress = cur.address;
    AddressList[hivLabel] result =
        filterAndGetAddresses(addressP, hivP, store, listLabel, addressLabel,
            hivLabel, tail);
    boolean curHivStatus = cur.hivStatus;

    if (curHivStatus) {
      result = new AddressList[hivLabel]@store(curAddress, result);
    }

    return result;
  }
}
