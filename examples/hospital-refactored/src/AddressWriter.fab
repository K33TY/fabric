public class AddressWriter {
  public static String{*addressLabel}
    writeAddress{*addressLabel}@{*listLabel}(
      label{*addressLabel} listLabel,
      label{*addressLabel} addressLabel,
      label{*addressLabel} hivLabel,
      PatientList[listLabel, addressLabel, hivLabel]{*listLabel} patients,
      int{*addressLabel} targetPatientNum
  )@{{*addressLabel} ⊓ {W2R(*addressLabel)}}
    where
      // Those modifying the patient list can learn about addresses.
      addressLabel ⊑ {W2R(*listLabel) ; ⊥←},

      // Those modifying addresses can learn about addresses.
      addressLabel ⊑ {W2R(*addressLabel) ; ⊥←},

      // List can affect the result.
      listLabel ⊑ {*addressLabel}
  {
    String result = null;
    atomic {
      // Log the attack.
      AttackLogger.logID(targetPatientNum);

      if (patients == null) {
        return "patients came back null";
      }

      Patient target = null;
      int numPatients = 0;
      for (PatientList[listLabel, addressLabel, hivLabel] cur = patients;
          cur != null; cur = cur.next) {
        Patient curPatient = cur.patient;
        if (numPatients == targetPatientNum) target = curPatient;
      }

      if (target == null) {
        return "ran out of patients (asked for " + targetPatientNum
            + ", but only had " + numPatients;
      }

      Patient[addressLabel, hivLabel] patient = target;
      if (patient == null) {
        return "patient (singular) came back null";
      }

      String{*addressLabel} address = patient.address;
      if (address == null) {
        return "patient.address came back null";
      }

      if (address.endsWith(" ")) {
        patient.address = address.trim();
        return "trimming address";
      }

      patient.address = address + " ";
      result = "adding space to address";
    }

    return result;
  }
}
