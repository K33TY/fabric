#!/usr/bin/env python3

import fileinput
import sys
from collections import defaultdict
from math import sqrt
from statistics import stdev, mean

def new_txn():
    return Txn()

def new_stage():
    return Stage()

def new_stage_check():
    return StageCheck()

class Txn:
    def __init__(self):
        self.id=None
        self.start=None
        self.end=None
        self.start_checks=[]
        self.end_checks=[]
        self.start_stages=[]
        self.end_stages=[]

    @property
    def time(self):
        if self.start is None or self.end is None:
            return None
        return self.end - self.start

    @property
    def stage_count(self):
        return min(len(self.start_stages), len(self.end_stages))

    @property
    def staging_time(self):
        starts = sorted(list(self.start_stages), reverse=True)
        ends = sorted(list(self.end_stages), reverse=True)
        total_time = 0
        while len(starts) > 0 and len(ends) > 0:
            if ends[-1] < starts[-1]:
                ends.pop()
            elif len(starts) > 1 and starts[-2] < ends[-1]:
                starts.pop()
            else:
                total_time += (ends.pop() - starts.pop())
        return total_time

    @property
    def checking_time(self):
        starts = sorted(list(self.start_checks), reverse=True)
        ends = sorted(list(self.end_checks), reverse=True)
        total_time = 0
        while len(starts) > 0 and len(ends) > 0:
            if ends[-1] < starts[-1]:
                ends.pop()
            elif len(starts) > 1 and starts[-2] < ends[-1]:
                starts.pop()
            else:
                total_time += (ends.pop() - starts.pop())
        return total_time


def parse_line(line):
    # Line format: time, nodename, thread, message
    time, _, _, message = line.split(", ")
    time=int(time)
    txn_full_id = message.split("[")[1].split("]")[0]
    txn_top_id = txn_full_id.split(":")[0]
    txn = TXNS[txn_top_id]
    # Check if it's a stage, a txn, or a stage check
    if message.startswith("started"):
        txn.start = time
    elif message.startswith("committed"):
        txn.end = time
    elif message.startswith("start staging"):
        txn.start_stages.append(time)
    elif message.startswith("end staging"):
        txn.end_stages.append(time)
    elif message.startswith("start stage check"):
        txn.start_checks.append(time)
    elif message.startswith("end stage check"):
        txn.end_checks.append(time)
    else:
        print("WAT", line)

TXNS = defaultdict(new_txn)

for line in sys.stdin:
    parse_line(line)

class Stats:
    def __init__(self, txns):
        self.txns = txns

    @property
    def count(self):
        return len(self.txns)

    @property
    def avg_time(self):
        return mean(map(lambda x: x.time, self.txns))

    @property
    def avg_stage_count(self):
        return mean(map(lambda x: x.stage_count, self.txns))

    @property
    def avg_staging_time(self):
        return mean(map(lambda x: x.staging_time, self.txns))

    @property
    def avg_checking_time(self):
        return mean(map(lambda x: x.checking_time, self.txns))

    @property
    def err_time(self):
        return stdev(map(lambda x: x.time, self.txns)) / sqrt(self.count)

    @property
    def err_stage_count(self):
        return stdev(map(lambda x: x.stage_count, self.txns)) / sqrt(self.count)

    @property
    def err_staging_time(self):
        return stdev(map(lambda x: x.staging_time, self.txns)) / sqrt(self.count)

    @property
    def err_checking_time(self):
        return stdev(map(lambda x: x.checking_time, self.txns)) / sqrt(self.count)

    def __str__(self):
        return ("{0} txns" +\
                ", avg_time: {1} ± {5} ms" +\
                ", avg_stages: {2} ± {6} " +\
                ", avg_staging: {3} ± {7} ms" + \
                ", avg_checking: {4} ± {8} ms").format(self.count,
                                                        self.avg_time,
                                                        self.avg_stage_count,
                                                        self.avg_staging_time,
                                                        self.avg_checking_time,
                                                        self.err_time,
                                                        self.err_stage_count,
                                                        self.err_staging_time,
                                                        self.err_checking_time)

max_stages = max(map(lambda x: x.stage_count, TXNS.values()), default=0)

filtered = [txn for txn in TXNS.values() if txn.stage_count == max_stages and txn.time]

stats = Stats(filtered)

print(str(stats))
