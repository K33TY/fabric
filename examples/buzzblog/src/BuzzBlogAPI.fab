import fabric.util.Map;

class BuzzBlogAPI[label postLabel, label commentLabel]
  where postLabel ⊑ {W2R(postLabel)},
        commentLabel ⊑ {W2R(commentLabel)}
{
  @{postLabel;commentLabel}

  private final Post[postLabel]{*postLabel}[]{this} posts;
  private final Post[commentLabel]{*commentLabel}[]{this} comments;

  public BuzzBlogAPI(
      Post[postLabel][]{this} posts,
      Post[commentLabel][]{this} comments
  ) {
    this.posts = posts;
    this.comments = comments;
    super();
  }

  // Returns the string view of the post with the given id
  public String{postLabel ; postId}
    viewPost{postLabel;⊥←}@{{*postLabel} ⊓ {W2R(postLabel)}}(
      int postId
    )@{{*postLabel} ⊓ {W2R(postLabel)}}
  where
    {postId} <= {postLabel; ⊥←}
  {
    final Post[postLabel] post = posts[postId];
    if (post != null) {
      return post.view();
    } else {
      return "post came back null";
    }
  }

  // Returns the string view of the comment with the given id
  public String{commentLabel ; postId}
    viewComment{commentLabel;⊥←}@{{*commentLabel} ⊓ {W2R(commentLabel)}}(
      int postId
    )@{{*commentLabel} meet {W2R(commentLabel)}}
  where
    {postId} <= {commentLabel; ⊥←}
  {
    final Post[commentLabel] comment = comments[postId];
    if (comment != null) {
      return comment.view();
    } else {
      return "comment came back null";
    }
  }

  // updates a post given some new content, returns a message about how well 
  //  that went.
  public String{postLabel} updatePost{postLabel}@{{*postLabel} ⊓ {W2R(postLabel)}}(
      int postId, 
      String{postLabel} newContent)@{{*postLabel} ⊓ {W2R(postLabel)}}
    where
      {postId} <= postLabel
  {
    final Post[postLabel] post = posts[postId];
    if (post != null) {
      String oldContent = post.view();
      String newView = post.update(newContent);
      return ("Post "+ postId +" updated from \""+ 
              oldContent + "\" to \"" + newView+"\"");
    } else {
      return "post came back null";
    }
  }

  // updates a comment given some new content, returns a message about how well 
  //  that went.
  public String{commentLabel}
    updateComment{commentLabel}@{{*commentLabel} ⊓ {W2R(commentLabel)}}(
      int postId, 
      String{commentLabel} newContent
    )@{{*commentLabel} ⊓ {W2R(commentLabel)}}
  where
    {postId} <= commentLabel
  {
    final Post[commentLabel] comment = comments[postId];
    if (comment != null) {
      String oldContent = comment.view();
      String newView = comment.update(newContent);
      return ("Comment "+ postId +" updated from \""+ 
              oldContent + "\" to \"" + newView+"\"");
    } else {
      return "comment came back null";
    }
  }

  // The correct way to create a new post
  // If there is a post with the given id, it returns that post.
  // Otherwise, it makes a new one with the given content.
  // returns a message that's hopefully helpful.
  public String{postLabel} viewOrCreatePost{store}@{{*postLabel} ⊓ {W2R(postLabel)}}(
      int postId, 
      Store store, 
      String{postLabel} newContent)@{{W2R(postLabel)} ⊓ {*postLabel}}
  where postLabel  <= {⊤ → store}, 
        {⊤ ← store} <= postLabel, 
        {postId} <= postLabel, 
        {store}  <= postLabel {
    final Post[postLabel] post = posts[postId];
    if (post != null) {
      return post.view();
    } else {
      try {
        final Post[postLabel] newPost = new Post[postLabel]@store(newContent);
        String view = newPost.view();
        posts[postId] = newPost;
        return "Created new post: "+view;
      } catch (Exception e) {
        return "something threw an exception while creating a new post " +
               e.toString();
      }
    }
  }

  // The correct way to create a new comment
  // If there is a comment with the given id, it returns that comment.
  // Otherwise, it makes a new one with the given content.
  // returns a message that's hopefully helpful.
  public String{commentLabel}
    viewOrCreateComment{store}@{{*commentLabel} ⊓ {W2R(commentLabel)}}(
      int postId, 
      Store store, 
      String{commentLabel} newContent
    )@{{W2R(commentLabel)} ⊓ {*commentLabel}}
  where commentLabel  <= {⊤ → store}, 
        {⊤ ← store} <= commentLabel, 
        {postId} <= commentLabel, 
        {store}  <= commentLabel {
    final Post[commentLabel] comment = comments[postId];
    if (comment != null) {
      return comment.view();
    } else {
      try {
        final Post[commentLabel] newComment =
            new Post[commentLabel]@store(newContent);
        String view = newComment.view();
        comments[postId] = newComment;
        return "Created new comment: "+view;
      } catch (Exception e) {
        return "something threw an exception while creating a new comment " +
               e.toString();
      }
    }
  }
}
