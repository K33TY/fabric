import fabric.runtime.Runtime;

class AlicePosts_fabric {

  public static void run{⊤←workerP}(
      label{⊤←workerP} postLabel,
      label{⊤←workerP} commentLabel,
      principal{⊤←workerP} workerP,
      principal{⊤←workerP} alice,
      principal{⊤←workerP} bob,
      principal{⊤←workerP} carol,
      BuzzBlogAPI[postLabel, commentLabel]{⊤←workerP} api
  ):{workerP->;workerP<-}
    where
      {*postLabel} equiv {alice&bob&carol ← alice ; ((alice,bob),carol)→}
  {
    atomic {
      // Get a reference to the store called "store".
      final Store store = FabricWorker.getWorker().getStore("alicenode");

      // Get a reference to the runtime.
      final Runtime[workerP] runtime = Runtime[workerP].getRuntime();

      final int{*postLabel} postId = 0;
      final String{*postLabel} secondPost = 
        "This is the updated post that Alice wrote.";

      String{alice->} printme = "";

      if (workerP equiv alice && alice equiv store && new label {⊤←store} <= postLabel) {
        // Alice should be able to write the post.
        if (new label{⊤←workerP} <= postLabel) { 
          // Alice should be able to read it too.
          if (postLabel <= new label{workerP→ } ) { 
            final String{*postLabel} firstView = api.viewPost(postId);
            printme = printme + "\n" + firstView;

            String{*postLabel} suffix = "";
            if (firstView.indexOf("fizz") >= 0) {
              suffix = "buzz";
            } else {
              if (firstView.indexOf("buzz") >= 0) {
                suffix = "fizz";
              }
            }

            printme = printme + "\n" + 
              api.updatePost(postId, secondPost + " - " + suffix);
          } else printme = printme + "\npostLabel ⊑ {workerP→ }  failed";
        } else printme = printme + "\n{⊤←workerP} ⊑ postLabel failed";
      } else printme = printme + "\nThe permission checking if block failed.";
//      if (workerP equiv alice)
//        runtime.out().println(printme);
    }
  }
}
