/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
import fabric.util.Map;
import fabric.runtime.Runtime;

class Hello {

  //
  // The main method.  The declaration has a few annotations:
  //
  // 1. public static void main{p<-;p->} (principal{p<-} p, String[] args):{p<-;p->} throws Exception {
  //                           ---------
  // This annotation is the begin label, which bounds the side effects of the
  // method.  This annotation prevents someone from outputting spurious
  // messages to the console (the p<- component) or leaking information by
  // calling this method in a secret context (the p-> component).
  //
  //
  // 2. public static void main{p<-;p->} (principal{p<-} p, String[] args):{p<-;p->} throws Exception {
  //                                      ----------------
  // This extra parameter to main represents the principal who is invoking the
  // method.  It has the label {p<-} because we require the principal object
  // itself to have high integrity.
  //
  //
  // 3. public static void main{p<-;p->} (principal{p<-} p, String[] args):{p<-;p->} throws Exception {
  //                                                                       ---------
  // This is the end label of the method.  It bounds the amount of information
  // that can be learned by the successful completion of this method.
  //
  //
  // 4. public static void main{p<-;p->} (principal{p<-} p, String[] args):{p<-;p->} throws Exception {
  //                                                                                 ----------------
  // In Fabric, all exceptions must be declared, because they represent a
  // possible information flow.  Here we are lazy and simply declare "throws Exception"
  //
  public static void main{*provider}(principal{p<-} p, String[] args):{p<-;p->}
    throws Exception
  {
    atomic {
      if (provider <= new label {p<-;p->} && Message.provider <= provider )
        run(p, args);
      else
        throw new Error("Provider has insufficient integrity.");
    }
  }

  public static void run{p<-;p->}(principal{p<-;p->} p, String[] args):{p<-;p->}
    throws Exception where provider <= {p<-;p->},  Message.provider <= provider
  { 

    // This is a fancy version of "hello, world", in that we create a
    // persistent object to store our message, and save it in the root map of
    // the store for later retrieval.

    atomic {

      // Get a reference to the store called "store".
      final Store store = worker$.getStore("store");

      // Get a reference to the runtime.
      // This is how Fabric programs access the console.
      final Runtime[p] runtime = Runtime[p].getRuntime();

      // We're storing p's message on "store", so we must ensure p trusts store.
      if (runtime.store$ actsfor p) {
        if (store actsfor p) {

          // Create an object at 'store' holding our important message
          Message[p] h =
            new Message[p]@store("Hello World!  Fabric is coming for you...");

          // Store a reference to our object in the store's root map.
          Map root = store.getRoot();
          root.put("hello", h);

          // Output the contents of the object.
          runtime.out().println(h.message);

        } else {
          runtime.out().println("store is not sufficiently trusted.");
        }
      }
    }
  }
}
// vim: ts=2 sw=2 et syntax=java
