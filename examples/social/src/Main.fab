import java.io.PrintStream;
import fabric.runtime.Runtime;

class Main {
    public static final void main{⊤ <- }  (principal{*provider} p, String args[])  
	throws SecurityException, IllegalArgumentException  
	       where caller(p), provider actsfor p, {*provider} equiv {*SocialNetwork.provider},
               {*provider} <= {p <- }
    {
	PrintStream[{}] out = null;
          try {
              Runtime[p] runtime = Runtime[p].getRuntime();
              out = runtime==null?null:runtime.stdout(new label {});
          }
          catch (SecurityException e) {
              // just let out be null.
          }

          PrintStream[{}] out1 = endorse(out, {*provider; p->; _<-_} to {{p→p; p<-*} ⊔ {⊤→⊤;⊤←⊤} ⊓ {*provider}});
          PrintStream[{}] out2 = declassify(out1, {});
	  
	  try {
	      out2.println("Main is running");
	  } catch (NullPointerException e) {
	  }
	  
	  final Store a = worker$.getStore("a_store"); 
	  final RemoteWorker a_worker = worker$.getWorker("a_worker");
	  final principal a_prin = a_worker.getPrincipal(); 


	  final Store b = worker$.getStore("b_store"); 
	  final RemoteWorker b_worker = worker$.getWorker("b_worker");
	  final principal b_prin = b_worker.getPrincipal(); 

	  final Store c = worker$.getStore("c_store"); 
	  final RemoteWorker c_worker = worker$.getWorker("c_worker");
	  final principal c_prin = c_worker.getPrincipal(); 

	  final Store x = worker$.getStore("x_store"); 
	  final RemoteWorker x_worker = worker$.getWorker("x_worker");
	  final principal x_prin = x_worker.getPrincipal(); 


	  if (x actsfor a && x actsfor b && x actsfor c && p equiv x && provider actsfor x) {
		  SocialNetwork[x, a, b, c] sn = new SocialNetwork[x, a , b, c](out2);
		  sn.go();
	  }
    }
}
