package rainforest;

import countribank.Account;

/**
 * Represents the Rainforest marketplace.
 */
public class Market[principal rainforestP] authority (rainforestP) {
  @{⊤→rainforestP}

  private final Vendor[rainforestP][]{rainforestP←} vendors;

  public Market{rainforestP←}(
      Vendor[rainforestP][]{rainforestP←} vendors
  ) {
    this.vendors = vendors;
    super();
  }

  /**
   * Returns a list of vendors in the marketplace.
   */
  public Vendor[rainforestP][]{rainforestP←} getVendors() {
    return vendors;
  }

  /**
   * Reserves some "product" on a customer's behalf.
   */
  public boolean{customerP→;rainforestP←}
      reserveStock{customerP→;rainforestP←}(
        principal{customerP→;customerP←} customerP,
        principal{customerP→;customerP←} vendorP,
        Product[rainforestP, vendorP]{customerP→;customerP←} product,
        int{customerP→;customerP←} numUnits
      ) where
        rainforestP ≽ vendorP,
        rainforestP ≽ customerP,
        authority(rainforestP) {
    // First, need to declassify the pc.
    boolean inStock = false;

    atomic {
      declassify ({customerP→;rainforestP←} to {vendorP→;rainforestP←}) {
        // Also need to downgrade the number of units and the product.
        int numUnits_d =
          endorse (
            declassify (
              numUnits,
              {customerP→;vendorP→;customerP←} to {vendorP→;customerP←}),
            {vendorP→;customerP←} to {vendorP→;vendorP←});
        Product[rainforestP, vendorP] product_d =
          endorse (
            declassify (
              product,
              {customerP→;vendorP→;customerP←} to {vendorP→;customerP←}),
            {vendorP→;customerP←} to {vendorP→;rainforestP←});

        // Actually decrement the vendor's stock.
        inStock = product_d.decrementInventory(numUnits_d);
      }
    }

    // Downgrade inStock.
    return
      endorse (
        declassify (
          inStock,
          {customerP→;vendorP→;vendorP←} to {customerP→;vendorP←}),
        {customerP→;vendorP←} to {customerP→;rainforestP←});
  }

  /**
   * Obtains the price of a product.
   */
  public Integer{customerP→;vendorP←}
      getPrice{customerP→;rainforestP←}(
        principal{customerP→;customerP←} customerP,
        principal{customerP→;customerP←} vendorP,
        Product[rainforestP, vendorP]{customerP→;customerP←} product
      ) where
        rainforestP ≽ vendorP,
        rainforestP ≽ customerP,
        authority(rainforestP) {
    Integer price = null;
    atomic {
      // Get the product's price. To do so, need to declassify the pc.
      declassify ({customerP→;rainforestP←}
          to {customerP→vendorP;rainforestP←}) {
        // Also need to declassify the product.
        Product[rainforestP, vendorP] product_d =
          declassify (
            product,
            {customerP→;vendorP→;customerP←}
              to {customerP→vendorP;customerP←});
        price = new Integer(product_d.getPrice());
      }
    }

    return
      endorse(price,
        {customerP→;customerP←;vendorP←} to {customerP→;vendorP←});
  }

  /**
   * Debits the price of a purchase from a customer's account.
   */
  public boolean{customerP→;rainforestP←} makePayment{customerP→;rainforestP←}(
        principal{customerP→;customerP←} customerP,
        principal{customerP→;customerP←} vendorP,
        Customer[rainforestP,customerP]{customerP→;customerP←} customer,
        int{customerP→;customerP←} numUnits,
        int{customerP→;vendorP←} unitPrice
      ) where
        rainforestP ≽ vendorP,
        rainforestP ≽ customerP,
        rainforestP ≽ customer.bankP,
        authority(rainforestP),
        endorse ({customerP→;rainforestP←}) {
    int purchaseAmount = numUnits * unitPrice;

    Account[customer.bankP, customerP] customerAccount = customer.getAccount();

    // Debit the customer's account. To do so, we need to declassify the pc.
    boolean sufficientFunds = false;
    atomic {
      declassify ({customerP→;rainforestP←}
          to {customerP→customer.bankP;rainforestP←}) {
        // Downgrade the purchaseAmount.
        int purchaseAmount_d =
          declassify (
            endorse (
              purchaseAmount,
                {customerP→;customerP←;vendorP→;vendorP←}
                  to {customerP→;vendorP→;rainforestP←}),
              {customerP→;vendorP→;customerP←}
                to {customerP→customer.bankP;customerP←});

        // Downgrade the customerAccount.
        Account[customer.bankP, customerP] customerAccount_d =
          declassify (
            customerAccount,
            {customerP→;customerP←} to {customerP→customer.bankP;customerP←});

        // Downgrade the customer's bank principal.
        final principal bankP =
          declassify (
            customer.bankP,
            {customerP→;customerP←} to {customerP→customer.bankP;customerP←});

        // Actually debit the customer's account.
        if (bankP ≽ customerP) {
          sufficientFunds = customerAccount_d.debit(purchaseAmount_d);
        }
      }
    }

    // Downgrade the result of debiting the customer's account.
    return
      endorse (
        sufficientFunds,
          {customerP→;customer.bankP←;customerP←}
            to {customerP→;rainforestP←});
  }

  /**
   * Cancels an order by restoring a vendor's stock.
   */
  public void
      cancelOrder{customerP→;rainforestP←}(
        principal{customerP→;customerP←} customerP,
        principal{customerP→;customerP←} vendorP,
        Product[rainforestP, vendorP]{customerP→;customerP←} product,
        int{customerP→;customerP←} numUnits
      ) where
        rainforestP ≽ vendorP,
        rainforestP ≽ customerP,
        authority(rainforestP) {
    // First, need to declassify the pc.
    atomic {
      declassify ({customerP→;rainforestP←} to {vendorP→;rainforestP←}) {
        // Also need to downgrade the number of units and the product.
        int numUnits_d =
          declassify (
            numUnits,
            {customerP→;vendorP→;customerP←} to {vendorP→;customerP←});
        endorse (
          numUnits_d,
          {vendorP→;customerP←} to {vendorP→;rainforestP←})
        if (numUnits_d > 0) {
          Product[rainforestP, vendorP] product_d =
            endorse (
              declassify (
                product,
                {customerP→;vendorP→;customerP←} to {vendorP→;customerP←}),
              {vendorP→;customerP←} to {vendorP→;rainforestP←});

          // Actually decrement the vendor's stock.
          product_d.restock(numUnits_d);
        }
      }
    }
  }

  /**
   * Credits a vendor for a successful purchase.
   */
  public boolean{customerP→;rainforestP←}
      creditVendor{customerP→;customerP←}(
        principal{customerP→;customerP←} customerP,
        principal{customerP→;customerP←} vendorP,
        Product[rainforestP, vendorP]{customerP→;customerP←} product,
        int{customerP→;rainforestP←} unitSellingPrice,
        int{customerP→;rainforestP←} numUnits
      ) where
        rainforestP ≽ vendorP,
        rainforestP ≽ customerP,
        authority(rainforestP),
        endorse ({customerP→;rainforestP←}) {
    atomic {
      int purchaseAmount = unitSellingPrice * numUnits;

      // Credit the vendor with the purchase amount.
      // First get the vendor. To do so, need to declassify the pc.
      Vendor vendor = null;
      declassify ({customerP→;rainforestP←} to {vendorP→;rainforestP←}) {
        // Downgrade the product.
        Product[rainforestP, vendorP] product_d =
          declassify (
            product,
            {customerP→;vendorP→;customerP←} to {vendorP→;customerP←});
        vendor = product_d.getVendor();
      }

      // Next, get the vendor's account.
      final Vendor[rainforestP] vendor_ = vendor;
      Account[vendor_.bankP, vendorP] vendorAccount = vendor_.getAccount();

      // Now, need to declassify the pc again.
      declassify ({customerP→;rainforestP←}
          to {vendorP→vendor_.bankP;rainforestP←}) {
        // Downgrade the purchase amount.
        int purchaseAmount_d =
          declassify (
            endorse (
              purchaseAmount,
                {customerP→;customerP←;vendorP→;vendorP←}
                  to {customerP→;vendorP→;rainforestP←}),
              {customerP→;vendorP→;vendorP←}
                to {vendorP→vendor_.bankP;vendorP←});

        // Downgrade the vendor account.
        Account[vendor_.bankP, vendorP] vendorAccount_d =
          declassify (
            endorse (
              vendorAccount,
              {vendorP→;customerP→;customerP←}
                to {vendorP→;customerP→;rainforestP←}),
            {vendorP→;customerP→;rainforestP←}
              to {vendorP→vendor_.bankP;customerP←});

        // Downgrade the vendor's bank principal.
        final principal bankP =
          declassify (
            endorse (
              vendor_.bankP,
              {vendorP→;customerP→;customerP←}
                to {vendorP→;customerP→;rainforestP←}),
            {vendorP→;customerP→;rainforestP←}
              to {vendorP→vendor_.bankP;customerP←});

        // Downgrade the vendor's principal.
        final principal vendorP_d =
          declassify (
            endorse (
              vendorP,
              {vendorP→vendor_.bankP;customerP→;customerP←}
                to {vendorP→vendor_.bankP;customerP→;rainforestP←}),
            {vendorP→vendor_.bankP;customerP→;rainforestP←}
              to {vendorP→vendor_.bankP;customerP←});

        if (bankP ≽ vendorP_d) {
          // Actually credit the vendor.
          vendorAccount_d.credit(purchaseAmount_d);
        }
      }
    }

    // Purchase successful.
    return true;
  }
}
