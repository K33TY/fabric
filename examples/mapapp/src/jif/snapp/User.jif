package snapp;

/**
 * A User object contains all of the data associated with a given user account
 * in the social network.  Users are principals, and delegate to the social
 * network as well as the user who created them.
 *
 * The V1 stands for version 1.  In Fabric, V1 and V2 will both be named User,
 * just in different codebases.
 */
public class UserV1 extends DelegatingPrincipal {

  public final List[UserV1] {this←;this→friendInfo}   friends;  /** The user's friends */
  public       Location     {this←;this→locationInfo} location; /** The user's location */

  public final principal           {this←} owner;        /* The principal that owns this user account */
  public final Snapp               {this←} network;      /* The social network that can act for this account. */
  public final FriendsPrincipal    {this←} friends;      /* The group containing the user's friends */

  public final DelegatingPrincipal {this←} friendInfo;   /* The group containing anyone who can learn the user's friends */
  public final DelegatingPrincipal {this←} locationInfo; /* The group containing anyone who can see the user's location */

  public UserV1(principal owner) {
    this.owner = owner;
    this.friendInfo   = new FriendPrincipal();
    this.locationInfo = new DelegatingPrincipal(p);
    this.friends      = new DelegatingPrincipal(p);

    this.location = null;
    this.friends  = new List();
    this.friends.add(this);
  }

  public void setLocation(Location loc) {
    this.location = loc;
  }

  public void addFriend(UserV1 friend) {
    this.friends.add(friend);
  }

  public void unFriend(UserV1 friend) {
    if (friend == this)
      throw new Exception("you have to be your own friend");
    this.friends.remove(friend);
  }

  private class FriendPrincipal implements Principal {
    public boolean delegatesTo(principal p) {
      // TODO: return
    }
  }
}

/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
