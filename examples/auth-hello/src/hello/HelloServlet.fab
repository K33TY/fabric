package hello;

import sif.servlet.*;
import auth.*;
import auth.html.*;
import fabric.util.Map;
import fabricated.util.List;
import fabricated.util.ListIterator;
import fabricated.util.NoSuchElementException;
import fabricated.util.ConcurrentModificationException;
import fabricated.util.Comparator;
import javax.servlet.ServletException;

public class HelloServlet extends HTMLAuthServlet[worker$] authority (worker$) {

	final Store{this}@{*->} localStore;
	final Store{this}@{*->} helloStore;

	public HelloServlet() throws ServletException {
		localStore = worker$.getLocalStore();
		helloStore = worker$.getStore(Config.helloStoreName);
		super();
	}

	public void initialize{worker$:; worker$!:}() throws ServletException {
		addStartAction(new LogoffAction[worker$](this));
		addStartAction(new FrontPage(this));
	}

    public String getPrivateHostID() throws ServletException {
		return "";
	}

	protected String defaultActionName(Request[worker$] req) {
		return Config.defaultActionName;
	} 

	protected AuthSessState{*lbl} createSessionState{*lbl}(label{*lbl} lbl,
			String{*lbl} id, SessionPrincipal{*lbl} session) {
		atomic {
			if (localStore != null && localStore equiv worker$ &&
					lbl <= new label {⊤→worker$} && new label {⊤←worker$} <= lbl) {
				return new AuthSessState@localStore(id, session);
			}
		}
		return null;
	}

	protected SessionPrincipal createSessionPrincipal(String{⊥→;⊤←} id) {
		SessionPrincipal toReturn = null;
		atomic {
			if (helloStore != null) {
				toReturn = new SessionPrincipal@helloStore(id);
			}
		}
		return toReturn;
	}


	public principal{p->; p<-} lookupUserID{p->; p<-} (String{p->; p<-} uid, principal{p->; p<-} p)
		throws ServletException
		where caller(p),
			  authority (worker$)
	{
		int pc_caller = 0;
		declassify ({pc_caller} meet {_->_}) {
			Map rootMap = helloStore.getRoot();
			if (rootMap == null) {
				throw new ServletException("Store not acceesible");
			}
			List[{worker$->;worker$<-}] allUsers = null;
			Object obj = rootMap.get(Config.usersMapKey);
			if (obj instanceof List[{worker$->; worker$<-}]) {
				allUsers = (List[{worker$->; worker$<-}])obj;
			}
			
			if (allUsers == null) {
				throw new ServletException("Cannot fetch the collection of users from store");
			}
			return findUserInList(allUsers, uid, p);
		}
	}

	private principal{p->;p<-} findUserInList{p->; p<-} (List[{worker$->; worker$<-}]{p->; p<-} allUsers, String{p->; p<-} uid, principal{p->; p<-} p)
		where caller(p, worker$),
			  endorse({p->; p<- meet worker$<-})
	{
		declassify({p<- meet worker$<-}) {
			List[{worker$->; worker$<-}] users = declassify(endorse(allUsers, {p->; p<- meet worker$<-}), {p<- meet worker$<-});
			String userID = declassify(endorse(uid, {p->; p<- meet worker$<-}), {p<- meet worker$<-});
			ListIterator iter = users.listIterator();
			User ret = null;
			while (iter.hasNext()) {
				try{
					final Object o = iter.next();
					if (new label {worker$->; worker$<-} <= new label {o.store$->}) {
						if (o instanceof User) {
							final User u = (User) o;
							if (new label {worker$->; worker$<-} <= new label {u.store$->}) {
								if (u.name().equals(userID)) {
									ret = u;
									break;
								}
							}
						}
					}
				}
				catch (NoSuchElementException impossible) {} 
				catch (ConcurrentModificationException impossible) {}
				catch (NullPointerException impossible) {}
			}
			User theUser = declassify(endorse(ret, {worker$->; p->; p<- meet worker$<-}), {p->; p<- meet worker$<-});
			return theUser;
		}
	}
}

