import fabric.util.LinkedList;
import fabric.util.List;

public class TestInvalidating {

  public TestInvalidating TestInvalidating$() {
    fabric$lang$Object$();
    return this;
  }

  private void printList(List a) {
    System.out.print("[");
    for (int i = 0; i < a.size(); i++) {
      System.out.print(" " + a.get(i) + " ");
    }
    System.out.print("]");
  }

  private List merge(int n, List a_orig, List b_orig) {
    Store s = Config.STORE;
    List merged = new LinkedList().fabric$util$LinkedList$();
    //System.out.print("a_orig: "); printList(a_orig);
    List a = new LinkedList().fabric$util$LinkedList$(a_orig);
    //System.out.print("a: "); printList(a);
    //System.out.print("b_orig: "); printList(b_orig);
    List b = new LinkedList().fabric$util$LinkedList$(b_orig);
    //System.out.print("b: "); printList(b);
    //System.out.println();
    for (int i = 0; i < n; i++) {
      if (a.isEmpty() && b.isEmpty()) {
        break;
      } else if (a.isEmpty()
          || (!b.isEmpty()
            && (((TwooterAccount) b.get(0)).numFollowers() > ((TwooterAccount)
                a.get(0)).numFollowers()))) {
        merged.add(b.get(0));
        b.remove(0);
      } else {
        merged.add(a.get(0));
        a.remove(0);
      }
    }
    return merged;
  }

  private memoized List topAccountsBetween(int n, int min, int max) {
    Store s = Config.STORE;
    List rtn = new LinkedList@s().fabric$util$LinkedList$(); 
    if (max - min == 1) {
      TwooterAccount foo = (TwooterAccount) s.getRoot().get(new Integer(min));
      //System.out.println("" + n + "=" + foo);
      rtn.add(foo);
    } else if (max > min) {
      rtn.addAll(merge(n, topAccountsBetween(n, min, min + ((max - min) >> 1)),
            topAccountsBetween(n, min + ((max - min) >> 1), max)));
    }
    //System.out.print("" + min + " <-" + n + "-> " + max + ": "); printList(rtn); System.out.println();
    return rtn;
  }

  public List topAccounts(int n) {
    return topAccountsBetween(n, 0, Config.NUM_USERS);
  }

  public memoized int foo(int n) {
    return 1;
  }

  public static void main(String[] args) {
    if (args.length == 0) System.exit(1); // TODO: Usage!
    TestInvalidating t = null;
    atomic {
      Store s = Config.STORE;
      t = new TestInvalidating@s().TestInvalidating$();
    }
    int n = Integer.parseInt(args[0]);
    atomic {
      ((TwooterAccount) Config.STORE.getRoot().get(new Integer(0))).setNumberFollowers(-5 * Config.NUM_USERS);
    }
    List top = null;
    //for (int i = 0; i < 10; i++) {
      //try { Thread.sleep(250); } catch (InterruptedException e) {}
      atomic {
        top = t.topAccounts(n);
      }
    //}
    atomic {
      ((TwooterAccount) Config.STORE.getRoot().get(new Integer(0))).addFollower();
    }
  }
}
