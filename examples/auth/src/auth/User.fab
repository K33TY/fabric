package auth;

import fabricated.util.Comparator;

public class User extends AbstractPrincipal {
	
	private final String{this}@{this.store$->} password; // XXX should be a secure hash of it 

	public User(String{this} name, String{this} password) {
		this.password = password;
		super(name);
	}

	// XXX Can we label this method any which way we want, since it won't
	// be invoked from Fabric code??
	// XXX Where will the declassification w.r.t. password happen?
    public boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
    isAuthorized{this→;this←}(java.lang.Object authPrf,
               Closure[this, lb] closure,
               label lb,
               boolean executeNow)
      where authority (this),
          {authPrf;closure;lb;executeNow} <= lb,
          lb <= {this→}
	{
		if (authPrf instanceof String) {
		  String proof = (String)authPrf;

		  if (this.password == proof || (this.password != null && this.password.equals(proof))) {
		  	// password supplied agrees with this password!
		  	return true;
		  }
        }
		return false;
	}
}
