/**
 * Copyright (C) 2010-2014 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package auth.rest;

import javax.servlet.ServletException;
import java.io.PrintWriter;
import java.io.IOException;

import sif.servlet.*;
import auth.*;

public class LogoffAction[principal servP] extends AbstractAction[servP] {
    public LogoffAction(Servlet[servP]{this} servlet) {
        super();
        initFields("logoff",servlet);
    }

    public final void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req) 
    throws (ServletException{*lbl;req.session←})
        where caller(req.session),
        lbl <= {req.session→} {
        if (req == null)    throw new ServletException("Error processing request");
        Servlet[servP] servlet = getServlet();
        final SessionState state_ = req.getSessionState(lbl);
        if (lbl <= new label{state_.store$→}) {          
          if (!(state_ instanceof AuthSessState)) 
              throw new ServletException("Error processing request");
          final AuthSessState state = (AuthSessState)state_;
          atomic {
              final label newLbl = new label {*lbl; req.session!:};
  
              if (req.session equiv state.sessionPrincipal) {
                  final principal{req.session←;*lbl} currentUser = state.currentUser();
                  if (currentUser != null && 
                          req.session actsfor currentUser && 
                          currentUser.store$ actsfor currentUser && 
                          lbl <= new label {currentUser→;currentUser←}) {
                      if (new label {currentUser→} <= new label {req.session.store$→})
                          ((DelegatingPrincipal)currentUser).removeDelegatesTo(req.session);
                      //TODO: else?
                  } //TODO: else?
                  // invalidate the session.
                  req.invalidateSession();
                  try {
                    PrintWriter w = req.getResponseWriter();
                    w.println("\"User logged off.\"");
                  } catch (IOException e) {
                    throw new Error("Problem getting writer");
                  }
              }
              else {
                  throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
              }
        }
      }
    }
}
