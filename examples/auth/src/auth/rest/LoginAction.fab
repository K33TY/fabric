package auth.rest;

import javax.servlet.ServletException;
import java.io.IOException;
import java.io.PrintWriter;
import sif.servlet.*;
import auth.*;

public class LoginAction[principal servP] extends AbstractAction[servP] {
  
  final String{this}@{servP→} userParam;
  final String{this}@{servP→} pwdParam;

  public LoginAction(Servlet[servP]{this} s) {      
    this(s, "user", "pass");
  }

  public LoginAction(Servlet[servP]{this} s, String{this} userParam, String{this} pwdParam) {      
    this(s, "login", userParam, pwdParam);
  }
  
  public LoginAction(Servlet[servP]{this} s, String{this} name, String{this} userParam, String{this} pwdParam) {      
    this.userParam = userParam;
    this.pwdParam = pwdParam;
    super();
    initFields(name, s);
  }
  
  public void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req)
    throws (ServletException{*lbl;req.session←})
    where caller(req.session),
    servP actsfor req.session,
    lbl <= {req.session→} 
  {
      Servlet[servP] servlet_ = getServlet();
      final SessionState state_ = req.getSessionState(lbl);      
      if (lbl <= new label {⊤→servlet_.store$} 
           && lbl <= new label {state_.store$→}) {        
          AuthServlet[servP] servlet = (AuthServlet[servP])servlet_;
          final AuthSessState state = (AuthSessState)state_;  
          atomic {
            final label newLbl = new label {*lbl; req.session←};            
            if (req.session equiv state.sessionPrincipal) {
              this.invokeImpl(newLbl, req, servlet, state);
              return;
            }
            else {
              throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
            }
          }
      }
      throw new Error("access policy failue.");
  }
  
  protected void invokeImpl{*lbl}(label{*lbl} lbl,
                              Request[servP]{*lbl} req,
                              AuthServlet[servP]{*lbl} servlet,
                              AuthSessState{*lbl} state) 
      throws (ServletException{*lbl;req.session←})
      where req.session equiv state.sessionPrincipal,
            lbl <= {req.session→},
            servP actsfor req.session,
            caller(req.session)
  {
    ServletException se = null;
    if (lbl <= new label {req.session→;req.session←}) { // prevent untrusted lookups
      try {
        String userID = req.getParam(lbl, userParam);
        String password = req.getParam(lbl, pwdParam);
            
        // validate data
        String uidErr = null;
        String passwordErr = null;

        final principal loginUser = servlet.lookupUserID(userID, req.session);
        
        if (userID == null || userID.length() == 0) {
          // invalid user ID
          uidErr = "Invalid user ID.";                
        }
        else if (password == null || password.length() == 0) {
          // invalid password
          passwordErr = "Please enter a password.";                
        }
        else if (loginUser == null) {
          // unknown user or incorrect password 
          passwordErr = "Unknown or incorrect username and password.";
        }
        else {
          passwordErr = runClosure(req, loginUser, (SessionPrincipal)req.session, password);
        }
        if (uidErr != null || passwordErr != null) {
          // there were errors, send the user back to the login page.
          // DOWNGRADE REASON: The PC depends here on confidential info (i.e., the password). 
          // We're prepared to declassify that the logon failed.
          declassify ({*lbl;req.session←}) { // declassify the fact that the uid/password was wrong.
            try {
              req.setResponseStatus(Request.HTTP_FORBIDDEN);
  
              PrintWriter w = req.getResponseWriter();
              if (uidErr != null) {
                String _uidErr = declassify(endorse(uidErr, {req.session→;req.session←}), {*lbl;req.session←});
                w.println("\"" + _uidErr + "\"");
              } else  {
                String _passwordErr = declassify(endorse(passwordErr, {req.session→;req.session←}), {*lbl;req.session←});
                w.println("\"" + _passwordErr + "\"");
              }
            } catch (IOException e) {
              throw new Error("Problem getting writer");
            }
          }
        }
        else {// FIXME: Fix this downgrade mess
          // successful login!
          // set the current user in the session state, and send the user
          // back to the return action. 
          // DOWNGRADE REASON: The current user is publically readable info. Here, we
          // depend on confidential information, i.e. the password. But we're happy to declassify
          // the fact that the user has logged on successfully.
          declassify({req.session→;req.session←} to {req.session←}) {                     
            final principal{req.session←} session = declassify(req.session, {req.session→;req.session←} to {req.session←});
            declassify({req.session→;req.session←} to {req.session←}) {                     
              final principal logU = declassify(endorse(loginUser, {session→;session←}), {session←});
              final AuthSessState state_ = 
                  declassify(state, {session→;session←} to {session←});
              if (state_.sessionPrincipal equiv session) 
                state_.currentUser(logU);
              req.setResponseStatus(Request.HTTP_OK);
              try {
                PrintWriter w = req.getResponseWriter();
                w.println("\"User " + userID + " logged in.\"");
              } catch (IOException e) {
                throw new Error("Problem getting writer");
              }
            }
          }
        }
      } catch (ServletException e) {
        se = e;
      }
      declassify({*lbl;req.session←}) {
        ServletException _se = declassify(se, {*lbl;req.session←});
        if (_se != null)
          throw _se;
        else return;
      }
    } //TODO lbl too restrictive
  }        
  
  private String{req.session→;req.session←} runClosure{req.session→;req.session←}(Request[servP]{req.session→;req.session←} req,
          principal{req.session→;req.session←} loginUser,
          SessionPrincipal{req.session→;req.session←} sp,
          String{req.session→;req.session←} password) 
   where caller(req.session) {
      // DOWNGRADE REASON: Has effects at level {loginUser:}, which we need to hide away, since
      // session does not yet act for loginUser.
      declassify ({req.session←}) { 
          final principal logUser = declassify(loginUser, {req.session←});
          FabricWorker worker = FabricWorker.getWorker();
          
          final Store{req.session←} localStore = worker.getLocalStore();
          SessionPrincipal spdeclass = declassify(sp, {req.session→;req.session←} to {req.session←});
          LoginClosure[logUser] lc = new LoginClosure[logUser]{req.session←}@localStore(spdeclass);
          Capability[logUser, {logUser→}] cap = 
              PrincipalUtil.authorize(logUser, 
                  declassify(password, {req.session←}),
                  lc,
                  new label {logUser→});
          if (cap == null) {                                                
            return "Unknown or incorrect username and password.";
          }
          // successful login!                        
          // loginUser delegates authority to the session principal 
          cap.invoke();
      }
      return null;
  }
}

