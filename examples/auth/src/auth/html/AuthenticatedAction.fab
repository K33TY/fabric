package auth.html;

import javax.servlet.ServletException;

import sif.servlet.*;
import sif.html.*;
import auth.*;

/**
 * Extend this class to create actions that are protected by login requirement
 */
abstract public class AuthenticatedAction[principal servP] extends AbstractAction[servP] {
    @{store$→}

    public AuthenticatedAction(Servlet[servP]{this} m) throws NullPointerException where {servP←} <= {this} {
        super(m);
    }

    public AuthenticatedAction(String{this} name, Servlet[servP]{this} m) throws NullPointerException where {servP←} <= {this} {
        super(name, m);
    }
    
    /**
     * Ensure that there is a logged in user.
     * 
     * @param req the Request
     * @return false if the user is not logged in, true otherwise.
     * @throws ServletException
     */
    protected boolean{*lbl} ensureLoggedIn{*lbl}
                                (label{*lbl} lbl,
                                 Request[servP]{*lbl} req,
                                 AuthenticatedAction[servP]{*lbl} successAction,
                                 HTMLAuthServlet[servP]{*lbl} servlet, 
                                 AuthSessState{*lbl} state)
    throws (ServletException{*lbl;req.session←})
    where caller(req.session),
    servP actsfor req.session,
    req.session equiv state.sessionPrincipal,
    lbl <= {req.session→}
    {
        if (req == null) return false;
        ServletException{*lbl;req.session←} ex = null;
        boolean{*lbl;req.session←} ret = true;
        if ( lbl <= new label {state.store$→}
              && store$ actsfor servP                  
              && lbl <= new label {store$→}) {
          final LoginAction[servP] la = new LoginAction[servP](servlet, successAction, req.session);

          if (state != null && state.currentUser() == null
                  && lbl <= new label {la.store$→}
                  && new label {req.session←} <= lbl
                  && state.sessionPrincipal equiv req.session) {
              // not logged in yet.
              try {
                  la.invoke(lbl, req);
                  ret = false;
              }
              catch (ServletException e) {
                  ex = e;
              }
          }
        } else throw new Error("impossible");
        if (ex != null) throw ex;
        return ret;
    }
    
    public final void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req) 
        throws (ServletException{*lbl;req.session←})
        where caller(req.session),
        servP actsfor req.session,
        lbl <= {req.session→} {
        if (req == null) throw new ServletException("Error processing request");
        Servlet[servP] servlet_ = req.servlet;
        atomic {
            final SessionState state_ = req.getSessionState(lbl);
            if ( lbl <= new label {state_.store$→} ) {
                if (servlet_ == null || state_ == null ||
                        !(servlet_ instanceof HTMLAuthServlet[servP]) ||
                        !(state_ instanceof AuthSessState))
                    throw new ServletException("Error processing request");
                final HTMLAuthServlet[servP] servlet = (HTMLAuthServlet[servP])servlet_;
                final AuthSessState state = (AuthSessState)state_;
                if (lbl <= new label {state.store$→} 
                    && lbl <= new label{store$→}) {                
                    if (state == null || servlet == null) return;

                    // Check if someone is logged in. If not, then the login page is created.
                    // Simply returning will display that login page
                    if (req.session equiv state.sessionPrincipal)
                    {
                      if (!ensureLoggedIn(lbl, req, this, servlet, state)) return;
                      final label newLbl = new label {*lbl; req.session!:};
                      callWrapper(newLbl, req, servlet, state);
                    }
                    else {
                        throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
                    }
                } else throw new Error("access error 1");
            } else throw new Error("access error 2");
        }
    }
    
    public void callWrapper{*lbl}(label{*lbl} lbl,
            Request[servP]{*lbl} req,
            AuthServlet[servP]{*lbl} servlet,
            AuthSessState{*lbl} state) 
                throws (ServletException{*lbl;req.session←})
                where caller(req.session),
                lbl <= {req.session→},
                {req.session←} <= lbl,
                req.session equiv state.sessionPrincipal,
                lbl <= {state.store$→} {
        if (state == null || req == null) return;
        final principal currentUser = state.currentUser();
        if (req.session actsfor currentUser) {
            this.invokeImpl(lbl, req, servlet, state, currentUser);
        }
    }
          
    public abstract void invokeImpl{*lbl}(label{*lbl} lbl,
                                      Request[servP]{*lbl} req,
                                      AuthServlet[servP]{*lbl} servlet,
                                      AuthSessState{*lbl} state,
                                      principal{*lbl} currentUser) 
      throws (ServletException{*lbl;req.session←})
          where caller(req.session),
          lbl <= {req.session→},
          req.session equiv state.sessionPrincipal,
          req.session actsfor currentUser;
}

