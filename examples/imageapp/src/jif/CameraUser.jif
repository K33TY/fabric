public class CameraUser [principal p, principal q] authority (p) {
    final Camera[p] {p<-} camera;
    final label {p<-} lb_camera;
    final ImageApp[p,q] {q <-} imageapp;

    public CameraUser (Camera[p] {p<-} camera, ImageApp[p,q ] {q<-} imageeapp) {
	this.camera = camera;
	this.imageapp = imageapp;
	if (camera == null ) {
	    this.lb_camera = new label {p <-; p ->}; 
	} else {
	    this.lb_camera =  camera.lb_camera;
	}
    }
    
    public void useCamera{p<-}() where authority (p) {
	try {
	    // take 10 images
	    for (int i = 0; i < 10; i++) {
		this.camera.takeNewImage() ;
	    }
	    // mark every second image as shared...
	    for (int i = 0; i < 5; i ++) {
		markShared (2*i);
	    }
	} catch (Exception ignored) {
	}
    }

    public void markShared(int i) where caller (p) {
	Camera[p] camera = this.camera; if (camera == null) return;
	Image[p]{lb_camera}[] imgs = camera.images; if (imgs == null) return;
	Image[p]{lb_camera} theImage = null;
	try {
	    theImage = imgs[i];
	} catch (Exception ignored) {
	}
	if (theImage == null) return;

	byte{lb_label}[] bmp = 

	// Boilerplate declassification... We need to grow up and automate this eventually.
    }
    
    public void useApp() {
	return;
    }
}