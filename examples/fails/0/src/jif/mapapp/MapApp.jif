package mapapp;

import java.io.PrintStream;

import jif.runtime.Runtime;

import mapserv.MapServer;
import mapserv.Image;
import snapp.UserV1;
import util.GroupIterator;

/**
 * This is the mapping application.  A MapApp is instantiated with a particular
 * mapping service, and then can be run by any User to generate private or
 * public output maps.
 */
public class MapApp extends AbstractPrincipal {
  private final MapServer {this←} service;

  public MapApp(String name, MapServer service, Principal owner) {
    this.service = service;
    super(name);
    this.addDelegatesTo(owner);
  }



  /**
   * prints a map of the user's friends, visible to the user
   */
  public void viewMap(UserV1 user) {
    Image result = createMap(new label {user→}, user);

    PrintStream[{user→}] out = Runtime[user].getRuntime().stdout(new label {user→});
    result.print(new label {user→}, out);
  }



  /**
   * prints a map of the user's friends, visible to the user's friends
   */
  public void postMap(final UserV1 user) {
    Image result = createMap(new label {user→user.friends}, user);

    PrintStream[{user→user.friends}] out = Runtime[user].getRuntime().stdout(new label {user→user.friends});
    result.print(new label {user→user.friends}, out);
  }



  /**
   * creates a map of the user's friends, visible at label l
   */
  public Image createMap(label l, final UserV1 user) {
    // check that the server is sufficiently trusted
    // TODO

    // compute bounding box
    float{*l} xmin = 0, ymin = 0;
    float{*l} xmax = 0, ymax = 0;

    GroupIterator i = user.friends.iterator();
    while (i.hasNext()) {
      Principal next = i.next();

      if (next instanceof UserV1) {
        final UserV1 friend = (UserV1) next;
        if (new label {friend←;friend→friend.locationInfo} <= l) {
          xmin = min(friend.location.x, xmin);
          xmax = max(friend.location.x, xmax);

          ymin = min(friend.location.y, ymin);
          ymax = max(friend.location.y, ymax);
        }
        else {
          // TODO: declassifiers
        }
      }
    }

    // get map
    Image map = this.service.getMap(xmin, ymin, xmax, ymax);

    // make a local copy (with label l)
    // TODO

    // annotate map
    i = user.friends.iterator();
    while (i.hasNext()) {
      Principal next = i.next();
      if (next instanceof UserV1) {
        final UserV1 friend = (UserV1) next;
        if (new label {friend←;friend→friend.locationInfo} <= l) {
          map.setAt(friend.location.x, friend.location.y, 'f');
        } else {
        }
      }
    }

    return map;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
