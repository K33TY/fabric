package auction;

import fabric.util.Map;
import fabric.runtime.Runtime;
public class InitA where {*provider} equiv {*airlineA.Server.provider},
						{*airlineA.Server.provider} equiv {*airlineA.Agent.provider}, 
						{*broker.Server.provider} equiv {*broker.Agent.provider},
						{*broker.Server.provider} <= {*airlineA.Server.provider}
{
  public static final void main{* <- }  (principal{*provider} p, String[] args):{p<-;p->}   throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
	  //already in transaction due to method constraints
      final Store store = worker$.getStore(Config.airlineAStoreName);
      if (store actsfor p 
			&& airlineA.Server.provider <= new label {store<-}) {
        Map root = store.getRoot();
        root.put(Config.airlineAServerName, new airlineA.Server[store]@store(13500, 100));
      }
	  else 
		throw new Error(Config.airlineAStoreName + " must act for worker principal.");
  }
}
