package auction;
import fabric.util.Map;
import fabric.runtime.Runtime;

public class InitUser where {*provider} equiv {*user.User.provider},
						{*user.User.provider} equiv {*user.UserAgent.provider}, 
						{*broker.User.provider} equiv {*broker.UserAgent.provider},
						{*broker.User.provider} <= {*user.User.provider}
{
  public static final void main{* <- } (principal{*provider} p, String[] args):{p<-;p->}   
	throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
	  //already in transaction due to method constraints
      final Store store = worker$.getStore(Config.userStoreName);
      if (p actsfor store && store actsfor p) { 
        Map root = store.getRoot();
      	root.put(Config.userServerName, new user.User[store]@store());
      }
	  else throw new Error("ASDF");
  }
}
