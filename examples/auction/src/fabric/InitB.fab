import fabric.util.Map;
import fabric.runtime.Runtime;
public class InitB where {*provider} equiv {*airlineB.Server.provider},
						{*airlineB.Server.provider} equiv {*airlineB.Agent.provider}, 
						{*broker.Server.provider} equiv {*broker.Agent.provider},
						{*broker.Server.provider} <= {*airlineB.Server.provider}
{
  public static final void main{* <- }  (principal{*provider} p, String[] args):{p<-;p->}   throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
	  //already in transaction due to method constraints
      final Store store = worker$.getStore("airlineBStore");
      if (p actsfor store && store actsfor p) { 
        Map root = store.getRoot();
        root.put("auctionServer", new airlineB.Server[store]@store(13500, 100));
      }
	  else throw new Error("ASDF");
  }
}
