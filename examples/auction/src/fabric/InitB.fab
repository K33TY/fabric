import fabric.util.Map;
import fabric.runtime.Runtime;
public class InitB where {*provider} equiv {*airlineB.Server.provider},
						{*airlineB.Server.provider} equiv {*airlineB.Agent.provider}, 
						{*broker.Server.provider} equiv {*broker.Agent.provider},
						{*broker.Server.provider} <= {*airlineB.Server.provider}
{
  public static final void main{âŠ¤ <- }  (principal{*provider} p, String[] args):{p<-;p->}   throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
	  //already in transaction due to method constraints
      final Store store = worker$.getStore("airlineB");
	  final principal airlineB = store.getPrincipal();
      Runtime[p] runtime = Runtime[p].getRuntime();
      if (store actsfor p && airlineB.Server.provider <= new label {airlineB<-}) {
        Map root = store.getRoot();
        root.put("auctionServer", new airlineB.Server[airlineB](13500, 100));
        runtime.out().println("Inserted airline server.");
	  }
	  else
        runtime.out().println("Failed.");
  }
}
