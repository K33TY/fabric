package airlineA;

public class Server[principal Airline] implements broker.Server[Airline] 
	where  {*provider} <= {Airline<-},  
		{*provider} equiv {*Agent.provider}, 
		{*broker.Agent.provider} <= {*provider}, 
		{*broker.Agent.provider} equiv {*broker.Server.provider}
{
    int {Airline->;Airline<-} cost;
    int {Airline->;Airline<-} seats; 
    int {Airline->;Airline<-} lowestprice; 

	public Server (int {Airline->;Airline<-} cost, int {Airline->;Airline<-} seats) {
		this.cost = cost;
		this.seats = seats; 
		this.lowestprice = cost;
		try { 
		    this.lowestprice = cost / seats;
		} catch (ArithmeticException ignored) { }
    }
    
    public int {Airline->;Airline<-} getLowestPrice() {
		return this.lowestprice;
    }

    public broker.Agent[Airline, auction]{Airline->;Airline<-} getAgent {Airline->;Airline<-} (label{Airline<-} auction) 
		where {Airline->;Airline<-} <= {*auction}
	{
		return new Agent[Airline, auction](this);
    }
}
