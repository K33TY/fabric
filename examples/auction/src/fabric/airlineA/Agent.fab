package airlineA;
import broker.Offer;
import broker.UserAgent;
// Airline agent provides competing offers 

public class Agent[label Airline, label Auction] implements broker.Agent[Airline, Auction] 
	where {Airline} <= {Auction}, {*provider} equiv {Airline}, 
		{*provider} equiv {*Server.provider}, {*broker.Agent.provider} <= {*provider}, 
		{*broker.Agent.provider} equiv {*broker.Server.provider}
{
    private final Server[Airline]{Auction} server;
    private int {Auction} lowestprice; 

    public Agent{Auction}(Server[Airline]{Auction} server)  {
		this.server = server;
    }

	// asking the "remote" server for the current lowest price
    public void prepareForAuction {Airline} () {
	    this.lowestprice = server.getLowestPrice(); 
    }

    public Offer[Auction] {Auction} makeFirstOffer {Airline} () {
		prepareForAuction(); 
		int price = 2*lowestprice;
		return new Offer[Auction] (price, 0);
    }

    public Offer[Auction] {Auction} makeOffer{Auction}(UserAgent[Auction] {Auction} userChoice,  
														Offer[Auction] {Auction} bestOffer) {
		if (userChoice == null) return null;

		int price = 2*lowestprice;  // possible read-channel??? 

		Offer[Auction] newOffer = new Offer[Auction] (price, 0);

		while (userChoice.choice (newOffer, bestOffer)  >= 0 && price >= lowestprice) {
		    newOffer = new Offer [Auction] ( price -- , 0) ;
		}
		if (price < lowestprice) 
		    return null; // give up 

		return newOffer; // return the best competing offer otherwise
    }
}
