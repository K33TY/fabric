import fabric.util.Map;
public class InitA where {*provider} equiv {*airlineA.Server.provider},
						{*airlineA.Server.provider} equiv {*airlineA.Agent.provider}, 
						{*broker.Server.provider} equiv {*broker.Agent.provider},
						{*broker.Server.provider} <= {*airlineA.Server.provider}
{
  public static final void main{âŠ¤ <- } (principal{*provider} p, String[] args)  throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
    atomic {
      final Store store = worker$.getStore("airlineA");
	  final principal airlineA = store.getPrincipal();
      if (store actsfor p && airlineA.Server.provider <= new label {airlineA<-}) {
        Map root = store.getRoot();
        root.put("auctionServer", new airlineA.Server[airlineA](13500, 100));
	  }
    }
  }
}
