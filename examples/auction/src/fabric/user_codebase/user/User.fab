package user;
import auction.Config;
public class User [principal TheUser] implements broker.User[TheUser] 
		where {*broker.User.provider} <= {*provider}, 
		{*broker.UserAgent.provider} <= {*user.UserAgent.provider},
 		{*broker.UserAgent.provider;⊥←} equiv {*user.UserAgent.provider;⊥←}
{
    	public broker.UserAgent[auctionLbl] {TheUser->;TheUser<-} getAgent{TheUser->;TheUser<-}(label{TheUser<-} auctionLbl)
		{
    	    final Store store = worker$.getStore(Config.brokerStoreName);
    	    UserAgent ua = null;
    	    if (auctionLbl <= new label {⊤→store} && user.UserAgent.provider <= new label {⊤→store}) {
    	        ua = new UserAgent[auctionLbl]@store();
    	    }
    	    return ua;
		}
}
