/**
 * Copyright (C) 2010-2014 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package user;
import auction.Config;
public class User [principal TheUser] implements broker.User[TheUser] 
		where {*broker.User.provider} <= {*provider}, 
		{*broker.UserAgent.provider} <= {*user.UserAgent.provider},
 		{*broker.UserAgent.provider;⊥←} equiv {*user.UserAgent.provider;⊥←}
{
    	public broker.UserAgent[auctionLbl] {TheUser->;TheUser<-} 
    	    getAgent{TheUser->;TheUser<-}(label{TheUser<-} auctionLbl)
		{
    	    final Store store = worker$.getStore(Config.brokerStoreName);
    	    UserAgent ua = null;
    	    if (auctionLbl <= new label {⊤→store} &&
    	            user.UserAgent.provider <= new label {⊤→store} &&
    	            store actsfor TheUser &&
    	            provider <= new label {⊤→store}) {
    	        ua = new UserAgent[auctionLbl]@store();
    	    }
    	    return ua;
		}
}
