/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package auction;
import fabric.util.Map;
import fabric.runtime.Runtime;

public class InitUser where {*provider} equiv {*user.User.provider},
						{*user.User.provider} equiv {*user.UserAgent.provider}, 
						{*broker.User.provider} equiv {*broker.UserAgent.provider},
						{*broker.User.provider} <= {*user.User.provider}
{
  public static final void main{* <- } (principal{*provider} p, String[] args):{p<-;p->}   
	throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
	  //already in transaction due to method constraints
      final Store store = worker$.getStore(Config.userStoreName);
	  final principal w = worker$.getPrincipal();
	  if (store actsfor p
			&& store actsfor w
			&& user.User.provider <= new label {store<-w}) {
        Map root = store.getRoot();
      	root.put(Config.userServerName, new user.User[w]@store());
      }
	  else {
		if (store actsfor p)
			if (store actsfor w)
				if (store actsfor w)
					;
				else 
        			throw new Error("User.provider must be <= {store<-worker}.");
			else
        		throw new Error(Config.userStoreName + " must act for worker .");
		else		
        	throw new Error(Config.userStoreName + " must act for principal p");
	  }
  }
}
