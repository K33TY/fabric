package airlineB;

public class Server[label Airline] implements broker.Server[Airline] 
	where  {*provider} equiv {Airline}, {*provider} equiv {*Agent.provider}, 
		{*broker.Agent.provider} <= {*provider}, 
		{*broker.Agent.provider} equiv {*broker.Server.provider}
{
    int {Airline} cost;
    int {Airline} seats; 
    int {Airline} lowestprice; 

	public Server (int {Airline} cost, int {Airline} seats) {
		this.cost = cost;
		this.seats = seats; 
		this.lowestprice = cost;
		try { 
		    this.lowestprice = cost / seats;
		} catch (ArithmeticException ignored) { }
    }
    
    public int {Airline} getLowestPrice()
    {
		return this.lowestprice;
    }

    public broker.Agent[Airline, auction]{*auction} getAgent {*auction} (label{*auction} auction) 
		where {*provider} <= {*auction}
    {
		return new Agent[Airline, auction] (this);
    }
}
