import fabric.util.Map;

public class Create {
    public static void main(String[] args) {
        atomic {
            Store  brokerStore = Worker.getWorker().getStore("brokerStore");
            Store airlineAStore = Worker.getWorker().getStore("airlineAStore");
            Store airlineBStore = Worker.getWorker().getStore("airlineBStore");
            Store userStore= Worker.getWorker().getStore("userStore");

            DelegatingPrincipal brokerWorker =    (DelegatingPrincipal)   Worker.getWorker().getWorker("brokerWorker").getPrincipal();
            DelegatingPrincipal airlineAWorker =  (DelegatingPrincipal)   Worker.getWorker().getWorker("airlineAWorker").getPrincipal();
            DelegatingPrincipal airlineBWorker =  (DelegatingPrincipal)   Worker.getWorker().getWorker("airlineBWorker").getPrincipal();
            DelegatingPrincipal userWorker =      (DelegatingPrincipal)   Worker.getWorker().getWorker("userWorker").getPrincipal();

            // make broker top
            airlineAStore.getPrincipal().addDelegatesTo(brokerWorker);
            airlineAStore.getPrincipal().addDelegatesTo(brokerStore.getPrincipal());
            airlineAWorker.addDelegatesTo(brokerWorker);
            airlineAWorker.addDelegatesTo(brokerStore.getPrincipal());

            airlineBStore.getPrincipal().addDelegatesTo(brokerWorker);
            airlineBStore.getPrincipal().addDelegatesTo( brokerStore.getPrincipal());
            airlineBWorker.addDelegatesTo(brokerWorker);
            airlineBWorker.addDelegatesTo(brokerStore.getPrincipal());

            userStore.getPrincipal().addDelegatesTo(brokerWorker);
            userStore.getPrincipal().addDelegatesTo( brokerStore.getPrincipal());
            userWorker.addDelegatesTo(brokerWorker);
            userWorker.addDelegatesTo(brokerStore.getPrincipal());
        }
    }
}

/*
** vim: ts=4 sw=4 et cindent cino=\:0
*/
