/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package auction;
import fabric.util.Map;
import fabric.runtime.Runtime;
public class InitA where {*provider} equiv {*airlineA.Server.provider},
                        {*airlineA.Server.provider} equiv {*airlineA.Agent.provider}, 
                        {*broker.Server.provider} equiv {*broker.Agent.provider},
                        {*broker.Server.provider} <= {*airlineA.Server.provider}
{
  public static final void main{* <- }  (principal{*provider} p, String[] args):{p<-;p->}
    throws SecurityException,
           IllegalArgumentException  
    where caller(p),
          provider actsfor p,
          {*provider} <= {p<-}
  {
    // already in transaction due to method constraints

    final Store store = worker$.getStore(Config.airlineAStoreName);
    final principal w = worker$.getPrincipal();
    if (store actsfor p) {
      if (store actsfor w) {
        if (airlineA.Server.provider <= new label {store<-}) {
          Map root = store.getRoot();
          root.put(Config.airlineAServerName, new airlineA.Server[w]@store(13500, 100));
        } else { throw new Error("provider label !<= {store<-}"); }
      } else   { throw new Error(store.name() + " doesn't act for " + worker$.getName()); }
    } else     { throw new Error(store.name() + " does not act for caller"); }
  }
}

/*
** vim:ts=2 sw=2 et cindent cino=\:0
*/
