package airlineA;
codebase cb;
import cb.broker.Offer;
import cb.broker.UserAgent;
import cb.auction.Config;
// Airline agent provides competing offers 

public class Agent[principal Airline, label Auction] implements cb.broker.Agent[Airline, Auction] 
	where {Airline->;Airline<-} <= Auction,
{
    private final Server[Airline]{Airline->;Airline<-} server;
    private int {Airline->;Airline<-} lowestprice;

    public Agent{Airline->;Airline<-}(Server[Airline]{Airline->;Airline<-} server) {
		this.server = server;
    }

	// asking the "remote" server for the current lowest price
    public void prepareForAuction {Airline->;Airline<-} () {
	    this.lowestprice = server.getLowestPrice(); 
    }

    public Offer[Auction] {Auction} makeFirstOffer {Airline->;Airline<-} () {
		prepareForAuction(); 
		int price = 2*lowestprice;
                final Store store = worker$.getStore(Config.brokerStoreName);
		if (new label{Auction;*<-} <= new label {store->} 
			&&  new label {store<-} <= Auction) {
				return new Offer[Auction]@store(price, 0);
		} else
			throw new Error("Invalid store");
    }

    public Offer[Auction] {Auction} makeOffer{Auction}(UserAgent[Auction] {Auction} userChoice,  
														Offer[Auction] {Auction} bestOffer) 
	{
		if (userChoice == null) return null;

		int price = 2*lowestprice;  // possible read-channel??? 
                final Store store = worker$.getStore(Config.brokerStoreName);

		if (new label {Auction;*<-} <= new label {store->} 
			&&  new label {store<-} <= Auction) {
			Offer[Auction] newOffer = new Offer[Auction]@store(price, 0);

			while (userChoice.choice (newOffer, bestOffer)  >= 0 && price >= lowestprice) {
			    newOffer = new Offer [Auction]@store(price--, 0) ;
			}
			if (price < lowestprice) 
			    return null; // give up 

			return newOffer; // return the best competing offer otherwise
		} 
		else 
			throw new Error("Invalid store");
    }
}
