/**
 * Copyright (C) 2010-2014 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package auction;
codebase cb;
import cb.auction.Config;
import fabric.util.Map;
import fabric.runtime.Runtime;
public class InitA where {*provider} equiv {*airlineA.Server.provider},
						{*airlineA.Server.provider} equiv {*airlineA.Agent.provider}, 
						{*cb.broker.Server.provider} equiv {*cb.broker.Agent.provider},
						{*cb.broker.Server.provider} <= {*airlineA.Server.provider}
{
  public static final void main{* <- }  (principal{*provider} p, String[] args):{p<-;p->}   throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
	  //already in transaction due to method constraints
      final Store store = worker$.getStore(Config.airlineAStoreName);
	  final principal w = worker$.getPrincipal();
      if (store actsfor p 
			&& store actsfor w
			&& airlineA.Server.provider <= new label {store<-}) {
        Map root = store.getRoot();
        root.put(Config.airlineAServerName, new airlineA.Server[w]@store(13500, 100));
      }
	  else 
		throw new Error(Config.airlineAStoreName + " must act for worker principal.");
  }
}
