package auction;

import java.io.PrintStream;
import fabric.runtime.Runtime;
import broker.Server;
import broker.Agent;
import broker.User;
import broker.UserAgent;

class Main  {
    public static final void main{* <- }  (principal{*<-} p, String[] args)  throws SecurityException, IllegalArgumentException  
		where caller(p)
    {
    atomic {
		PrintStream[{}] out = null;
          try {
              Runtime[p] runtime = Runtime[p].getRuntime();
              out = runtime==null?null:runtime.stdout(new label {});
          }
          catch (SecurityException e) {
              // just let out be null.
          }

      PrintStream[{}] out1 = endorse(out, {p->; _<-_} to {{p->p; p<-* ; *->*;*<-*} meet {p->p; p<-*}});
      PrintStream[{}] out2 = declassify(out1,  {});

	  final Store a_store = worker$.getStore(Config.airlineAStoreName);   
	  final RemoteWorker a_worker = worker$.getWorker(Config.airlineAWorkerName);   
	  principal airlineA_;
	  try {
	  airlineA_ = a_worker.getPrincipal();
	  } catch (NullPointerException e) {throw new Error();}
	  final principal airlineA = airlineA_;

	  final Store b_store = worker$.getStore(Config.airlineBStoreName);   
	  final RemoteWorker b_worker = worker$.getWorker(Config.airlineBWorkerName);   
	  principal airlineB_;
	  try {
	  airlineB_ = b_worker.getPrincipal();
	  } catch (NullPointerException e) {throw new Error();}
	  final principal airlineB = airlineB_;

	  final Store user_store = worker$.getStore(Config.userStoreName);   
	  final RemoteWorker user_worker = worker$.getWorker(Config.userWorkerName);   
	  principal user_;
	  try {
	  user_ = user_worker.getPrincipal();
	  } catch (NullPointerException e) {throw new Error();}
	  final principal user = user_;

	  Server[airlineA] a_serv_;
	  try {
	  a_serv_ =(Server[airlineA])a_store.getRoot().get(Config.airlineAServerName);
	  } catch (RuntimeException e) {throw new Error();}
	  final Server[airlineA] a_serv = a_serv_;
	  if (a_serv == null)
		throw new Error("Could not find fab://" + a_store.name() + "/" + Config.airlineAServerName);

	  Server[airlineB] b_serv_;
	  try {
	  b_serv_ = (Server[airlineB])b_store.getRoot().get(Config.airlineBServerName);
	  } catch (RuntimeException e) {throw new Error();}
	  final Server[airlineB] b_serv = b_serv_;
	  if (b_serv == null)
		throw new Error("Could not find fab://" + b_store.name() + "/" + Config.airlineBServerName);

	  User[user] user_serv_;
	  try {
	  user_serv_ = (User[user])user_store.getRoot().get(Config.userServerName);
	  } catch (RuntimeException e) {throw new Error();}
	  final User[user] user_serv = user_serv_;
	  if (user_serv == null)
		throw new Error("Could not find fab://" + user_store.name() + "/" + Config.userServerName);

	  final Store broker_store = worker$.getStore(Config.brokerStoreName); 
	  final RemoteWorker broker_worker = worker$.getWorker(Config.brokerWorkerName); 
	  principal broker_;
	  try {
	  broker_ = broker_worker.getPrincipal();
	  } catch (RuntimeException e) { throw new Error(); }
	  final principal broker = broker_;

      if (broker actsfor airlineA && broker actsfor airlineB && broker actsfor user
	    	&& p equiv broker && broker equiv broker_store) 
	  	new AirlineExample[airlineA, airlineB, user, broker](a_serv,b_serv,user_serv).go(out2);
    }}
}
