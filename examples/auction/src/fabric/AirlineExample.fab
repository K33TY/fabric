import java.io.PrintStream;
import fabric.runtime.Runtime;

import broker.User;
import broker.UserAgent;
import broker.Server;
import broker.Offer;
import broker.Agent;

public class AirlineExample [principal AirlineA, label Albl,
								principal AirlineB, label Blbl,
								principal TheUser, label Userlbl,
								principal Broker] 
    authority (AirlineA, AirlineB, TheUser, Broker)
    	where Broker actsfor AirlineA, Broker actsfor AirlineB, 
				Broker actsfor TheUser, provider actsfor Broker, 
				Albl <= {*provider}, Blbl <= {*provider}, Userlbl <= {*provider}, 
				{*provider} <= {},
				{*provider} equiv {*Server.provider},
				{*provider} equiv {*Agent.provider}, 
				{*provider} equiv {*User.provider},
				{*provider} equiv {Broker<-},
				{Albl;Blbl;Userlbl} equiv {*provider} 
{
	final label{} auction = new label{Albl;Blbl;Userlbl};
	final Server[Albl]{Albl} a;
	final Server[Blbl]{Blbl} b;
	final User[Userlbl]{Userlbl} user;

    public AirlineExample (Server[Albl]{Albl} a, Server[Blbl]{Blbl} b, User[Userlbl]{Userlbl} user) {
		this.a = a;
		this.b = b;
		this.user = user;
    }

    protected PrintStream[{}]{} output;

    public void go {âŠ¤ <-} (PrintStream[{}] {} output) 
		where authority (AirlineA, AirlineB, TheUser, Broker)
    {
		this.output = output; 
		println ("Starting Airline example");

		final principal airlines = new principal (AirlineA & AirlineB);

		Agent[Albl, auction]{*auction} agentA = a.getAgent(auction);
		Agent[Blbl, auction]{*auction} agentB = b.getAgent(auction);

		UserAgent[auction]{*auction} userAgent = user.getAgent(auction);

		agentA.prepareForAuction();
		agentB.prepareForAuction(); 

		// this variable stores the winning agent. When winner == 0 we have no winner yet
		int winner = 0;

		Offer [auction] offerA;
		Offer [auction] offerB = agentB.makeFirstOffer();

		// main auction loop 
		while (winner == 0) { 
			offerA = agentA.makeOffer (userAgent, offerB); // makeOffer returns null if it can't compete anymore.
			if (offerA == null) { 
			    winner = 2; // declare that B is the winning agent 
			    break;
			}
			offerB = agentB.makeOffer (userAgent, offerA);
			if (offerB == null)  {
			    winner = 1; // declare that A is the winning agent
			}
		}

		// with enough authority we can declassify anything... ;-) 
		// 

		int {TheUser ->; airlines ->; Broker <-} w0 = endorse (winner, {*auction} to {*provider; TheUser ->; airlines ->; Broker <-} );

		if (Broker actsfor airlines) {
		int {} w = declassify ( w0, {} ); 
			println ("Ending Airline example with winner " + w);
		}
		//}
    }

    public void println {} (String {} x) where provider <= {Broker <- }  { // encapsulate output so fatal error analysis kicks in... 
	    output.println (x) ; 
    }
}

