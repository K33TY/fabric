import java.io.PrintStream;
import fabric.runtime.Runtime;

import broker.User;
import broker.UserAgent;
import broker.Server;
import broker.Offer;
import broker.Agent;

public class AirlineExample [principal AirlineA, principal AirlineB,
								principal TheUser, principal Broker] 
    authority(Broker) where Broker actsfor AirlineA, Broker actsfor AirlineB, 
				Broker actsfor TheUser, provider actsfor Broker, 
				{*provider} <= {},
				{*provider} equiv {*Server.provider},
				{*provider} equiv {*Agent.provider}, 
				{*provider} equiv {*User.provider},
				{*provider} <= {Broker<-}
{
	final label{Broker<-} auction = new label{AirlineA<-;AirlineB<-;TheUser<-; Broker ->};
	final Server[AirlineA]{Broker<-} a;
	final Server[AirlineB]{Broker<-} b;
	final User[TheUser]{Broker<-} user;

    public AirlineExample (Server[AirlineA]{Broker<-} a, Server[AirlineB]{Broker<-} b, User[TheUser]{Broker<-} user) {
		this.a = a;
		this.b = b;
		this.user = user;
    }

    protected PrintStream[{}]{} output;


    public void go {* <-} (PrintStream[{}] {} output) where authority (Broker)
    {
		this.output = output; 
		println ("Starting Airline example");

		//final principal airlines = new principal (AirlineA & AirlineB);

		Agent[AirlineA, auction] agentA = a.getAgent(auction);
		Agent[AirlineB, auction] agentB = b.getAgent(auction);
		UserAgent[auction] userAgent = user.getAgent(auction);

		try { agentA.prepareForAuction(); } catch (NullPointerException e) {} // ugly hack
		try { agentB.prepareForAuction(); } catch (NullPointerException e) {} 

		// this variable stores the winning agent. When winner == 0 we have no winner yet
		int winner = 0;

		Offer offerA = null;
		Offer offerB = null;
		try { offerB = agentB.makeFirstOffer(); } catch (NullPointerException e) {}

		// main auction loop 
		while (winner == 0) {
			try { offerA = agentA.makeOffer (userAgent, offerB); // makeOffer returns null if it can't compete anymore.
                        } catch (NullPointerException e) {}
 
                        boolean noChoice = false;
                        try { noChoice =  userAgent.choice(offerA, offerB) != -1; 
			} catch (NullPointerException e) {} 
			if (offerA == null || noChoice ) {
			    winner = 2; // declare that B is the winning agent 
			    break;
			}
			noChoice = false;
			
			try { offerB = agentB.makeOffer (userAgent, offerA); 
                        } catch (NullPointerException e) {}

			try { noChoice = userAgent.choice(offerB, offerA) != -1;
			} catch (NullPointerException e) {} 
			if (offerB == null || noChoice) { 
			    winner = 1; // declare that A is the winning agent
			}
		}

		// with enough authority we can declassify anything... ;-) 
		// 

		int {Broker ->; Broker <-} w0 = endorse (winner, {*auction} to {Broker ->; Broker <-} );
	
	//	if (Broker actsfor airlines) {
		int {} w = declassify ( w0, {} ); 
				println ("Ending Airline example with winner " + w);
	//	}
		//}
    }

    public void println {} (String {} x) where provider <= {Broker <- }  { // encapsulate output so fatal error analysis kicks in... 
	    output.println (x) ; 
    }
}

