import fabric.util.Map;
public class InitUser where {*provider} equiv {*user.User.provider},
						{*user.User.provider} equiv {*user.UserAgent.provider}, 
						{*broker.User.provider} equiv {*broker.UserAgent.provider},
						{*broker.User.provider} <= {*user.User.provider}
{
  public static final void main{âŠ¤ <- }  (principal{*provider} p, String[] args) throws SecurityException, IllegalArgumentException  
		where caller(p), provider actsfor p, {*provider} <= {p<-}
  {
    atomic {
      final Store store = worker$.getStore("user");
	  final principal user = store.getPrincipal();
      if (store actsfor p && user.User.provider <= new label {user<-}) {
        Map root = store.getRoot();
        root.put("auctionUser", new user.User[user]());
	  }
    }
  }
}
