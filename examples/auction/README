This is the auction example program.  It is intended to model a complex auction
in which sellers submit confidential sales strategies, and a buyer submits a
confidential purchasing strategy.  Each seller may make an offer based on the
buyer, and the buyer may then choose among these options.  At the end of the
auction, the identity of the winner is revealed to all participants.

First, compile the initialization code that will set up the principal hierarchy.

	$ ant fabil-init

Next, start the stores and workers, each in a separate terminal window.

	term1$ bin/start-store --name brokerStore
	term2$ bin/start-store --name airlineAStore
	term3$ bin/start-store --name airlineBStore
	term4$ bin/start-store --name userStore
	
	term5$ bin/start-worker --name brokerWorker
	term6$ bin/start-worker --name airlineAWorker
	term7$ bin/start-worker --name airlineBWorker
	term8$ bin/start-worker --name userWorker

Now run the initialization program for each store.
	
	brokerStore> run auction.InitBrokerStore
	airlineAStore> run auction.InitAStore
	airlineBStore> run auction.InitBStore
	userStore> run auction.InitUserStore

Next, publish each entity's mobile code...

	$ ant publish-all

And create a Server object on each airline store, and a User object on the
user's store. 

	$ ant init-remote

Now we are ready to run the example.  Examine the broker worker's generated 
codebase file.
	$ cat codebases/brokerWorker.codebase
	fab://brokerStore/35

Run the mobile code example by specifying auction.Main in the generated
codebase.

	brokerWorker> run fab://brokerStore/35/auction.Main 
