package authdb;

import fabricated.util.HashMap;
import fabricated.util.Map;
import fabricated.util.StringComparator;

/**
 * authP is a principal capable of querying and modifying the auth db.
 */
public final class AuthDB[principal authP] {
  private final Map[{this;authP→;authP←}]{authP→;authP←}@{authP→} db;

  private AuthDB(Store{authP→;authP←} store):{authP→;authP←}
      throws UnsupportedOperationException, ClassCastException,
      IllegalArgumentException, NullPointerException
      where store actsfor authP {
    this.db = new HashMap@store(new StringComparator(), new StringComparator());
    super();
  }

  public static AuthDB[authP]{authP→;authP←}
      getInstance{authP→;authP←}(principal{authP→;authP←} authP,
      String{authP→;authP←} storeName)
      throws (IllegalArgumentException{authP→;authP←}) {
    final Store store = worker$.getStore(storeName);

    if (store actsfor authP) {
      AuthDB[authP] result = (AuthDB[authP]) store.getRoot().get("authdb");
      if (result == null) {
	result = new AuthDB[authP]@store(store);
	store.getRoot().put("authdb", result);
      }

      return result;
    }

    throw new IllegalArgumentException("Specified store should act for authP; "
	+ "otherwise, it won't be sufficiently trusted to store the AuthDB "
	+ "instance.");
  }

  public boolean{authP←} authenticate{authP→}(String{authP→} user,
      String{authP→} password) where caller(authP) {
    endorse (password, {authP→} to {authP→;authP←})
      if (password != null) {
	Object lookupResult =
	  db.get(endorse(user, {authP→} to {authP→;authP←}));

	if (password.equals(lookupResult))
	  declassify ({authP→} to {})
	    endorse ({} to {authP←})
	      return true;
      }

    declassify ({authP→} to {})
      endorse ({} to {authP←})
	return false;
  }

  public void addUser(String user, String password) {
  }


  public void removeUser(String user) {
  }
}

