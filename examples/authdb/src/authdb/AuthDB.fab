package authdb;

import fabricated.util.HashMap;
import fabricated.util.Map;
import fabricated.util.StringComparator;

/**
 * authP is a principal capable of querying and modifying the auth db.
 */
public final class AuthDB[principal authP] {
  private final Map[{authP→;authP←}]{authP→;authP←}@{authP→} db;

  private AuthDB(Store{authP→;authP←} store):{authP→;authP←}
      throws UnsupportedOperationException, ClassCastException,
      IllegalArgumentException, NullPointerException
      where store actsfor authP {
    this.db = new HashMap@store(new StringComparator(), new StringComparator());
    super();
  }

  public static AuthDB[authP]{authP→;authP←}
      getInstance{authP→;authP←}(principal{authP→;authP←} authP,
      String{authP→;authP←} storeName)
      throws (IllegalArgumentException{authP→;authP←}) {
    final Store store = worker$.getStore(storeName);

    if (store actsfor authP) {
      atomic {
	AuthDB[authP] result = (AuthDB[authP]) store.getRoot().get("authdb");
	if (result == null) {
	  result = new AuthDB[authP]@store(store);
	  store.getRoot().put("authdb", result);
	}

	return result;
      }
    }

    throw new IllegalArgumentException("Specified store should act for authP; "
	+ "otherwise, it won't be sufficiently trusted to store the AuthDB "
	+ "instance.");
  }

  public boolean{authP←} authenticate{authP→}(String{authP→} user,
        String{authP→} password)
      where caller(authP),
        // Endorse the PC to gain authP←.
        endorse({authP→;authP←}) {
    // Endorse the password to gain authP← if it's not null.
    endorse (password, {authP→} to {authP→;authP←})
    if (password != null) {
      atomic {
        Object lookupResult =
          db.get(endorse(user, {authP→} to {authP→;authP←}));

        if (password.equals(lookupResult)) {
          // Downgrade the result.
          declassify ({authP→;authP←} to {authP←})
            return true;
        }
      }
    }

    // Downgrade the result.
    declassify ({authP→;authP←} to {authP←})
      return false;
  }

  public void addUser{authP→;authP←}(String{authP→;authP←} user,
      String{authP→;authP←} password) {
    if (user != null && password != null) {
      atomic {
	db.put(user, password);
      }
    }
  }


  public void removeUser{authP→;authP←}(String{authP→;authP←} user) {
    if (user != null) {
      atomic {
	db.remove(user);
      }
    }
  }
}

