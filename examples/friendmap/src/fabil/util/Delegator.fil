package util;

/**
 * Convenience principal class the delegates to a single owner.
 */
public class Delegator extends AbstractPrincipal {
  protected String     name;
  protected Principal  owner;

  public Delegator util$Delegator$(
    String     name,
    Principal  owner
  )
  {
    // these endorsements are safe, because owner ≽ this,
    // and thus {owner←} ⊑ {this←}
    // we just can't convince the compiler of this fact.

    this.fabric$lang$security$AbstractPrincipal$(name);
    this.owner = owner;
    this.name  = name;
    return this;
  }
  
  public Delegator util$Delegator$(
      String     name
    )
    {
      // these endorsements are safe, because owner ≽ this,
      // and thus {owner←} ⊑ {this←}
      // we just can't convince the compiler of this fact.

      this.fabric$lang$security$AbstractPrincipal$(name);
      this.owner = this.$getStore().getPrincipal();
      this.name  = name;
      return this;
    }

  private void jif$init$() {}

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public boolean delegatesTo(Principal p)
  {
    return p == owner;
  }

  public ActsForProof findProofUpto(Store s, Principal p, java.lang.Object
      searchState) {
    if (PrincipalUtil.actsFor(owner, this)) {

      ActsForProof proof =
        PrincipalUtil.findActsForProof(s, p, owner, searchState);
      if (proof != null) {
        // Create proofParam: {*→s;*←s}
        Principal storeP = s.getPrincipal();
        ConfPolicy conf =
          LabelUtil.readerPolicy(s, PrincipalUtil.topPrincipal(), storeP);
        IntegPolicy integ =
          LabelUtil.writerPolicy(s, PrincipalUtil.topPrincipal(), storeP);
        Label proofParam = LabelUtil.toLabel(s, conf, integ);

        DelegatesProof dp =
          (DelegatesProof) new DelegatesProof@s().fabric$lang$security$DelegatesProof$(owner, this);
        return
          (TransitiveProof)
            new TransitiveProof@s().fabric$lang$security$TransitiveProof$(proof, owner, dp);
      } else
        return null;

    } else throw new AssertionFailedError().util$AssertionFailedError$("owner acts for delegator");
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
