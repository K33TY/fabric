package mapserv;

import util.AssertionFailedError;
import util.Delegator;
import util.Store;

/**
 * A very simple map service: given a request for a region, it returns a 10x10
 * image containing the background value, scaled to the requested region.
 */
public class MapServer
extends Delegator 
where
  MapImage.provider <= provider, provider <= MapImage.provider,
       Box.provider <= provider, provider <=      Box.provider
{
  // access label: owner→
  private char {_→;this←} background;

  /**
   * Create a new map server, with the given background character.
   *
   * @param store
   *        the store on which to create maps
   */
  public
  MapServer {{this} meet {_→;store←}}
  (
    String {this} name,
    Store  {this} store,
    char   {_→; store←} background
  )
  where
    provider <= {this},
    provider <= {_→;store←}
  {
    super(name, store);

    if (store actsfor this)
      this.background = background;
    else
      throw new AssertionFailedError("Delegation failed");
  }

  /**
   * create a new map with the given bounds, containing the
   * background character.
   *
   * @return
   *     a reference to a public image stored at this service
   ^
   * @throws NullPointerException
   *     if boundary is null.
   */
  public
  MapImage[l,{owner→}] {this←}
                       // resulting map will be protected at l,
                       // stored at owner, and tainted by background
  createMap
  {            // side effects:
    {*l}     ⊓ // result is updated
    {*a}     ⊓ // boundary is accessed
    {owner→}   // map is created
  }
  (
    label l,
    label a,
    Box[l,a] boundary
  )
  throws
  (
    NullPointerException
  )
  where
    // TODO; owner enforces l@owner; map is created at owner
    {owner←}   <= l, l <= {owner→}, {owner→} <= {owner→},
    provider   <= l, // code taints result

    {boundary} <= a, // reference taints access to boundary
    provider   <= a  // code      taints access
  {
    if (owner actsfor this) {

    final char{*l}[]{*l} data = new char/* @this.owner */[100];
    for (int i = 0; i < data.length; i++)
      data[i] = background;

    if (!(owner instanceof Store)) throw new AssertionFailedError("MapServer's owner is a store");
    final Store store = (Store) owner;

    try {
      return new MapImage[l,{owner→}]/* @this.owner */(boundary, l, a,
                                                       10, 10, data,
                                                       store);
    } catch (final ArrayIndexOutOfBoundsException e) {
      throw new AssertionFailedError("10 * 10 = 100");
    }

    } else throw new AssertionFailedError("delegators's owner actsfor delegatee");
  }
}



/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/

