package mapserv;

import java.io.PrintStream;

import util.Store;
import util.Util;
import util.AssertionFailedError;

/**
 * A simple image class.  The image is indexed by floating point numbers, and
 * stores its own boundary... puts and gets are done relative to the boundary.
 *
 * The labels on this class could be relaxed to {this}, which would make the
 * copy method unnecessary.  However, once we port to fabric, we will need to
 * parameterize the access label, so I will just parameterize everything.
 *
 */
public class MapImage[label L, label A]
where
  provider <= L, provider <= A,
  Box.provider      <= provider, provider <= Box.provider,
  MapImage.provider <= provider, provider <= MapImage.provider
{

  //////////////////////////////////////////////////////////////////////////////
  // internal state                                                           //
  //////////////////////////////////////////////////////////////////////////////

  /** coordinates of map.  non-null. contents fixed at construction time */
  protected final Box[L,A] {L} boundary;

  /** dimensions of image. */
  protected final int  {L} width;
  protected final int  {L} height;

  /** packed data. non-null. data.length = this.width * this.height. */
  protected final char {L}[]{L} data;

  //////////////////////////////////////////////////////////////////////////////
  // public constructor                                                       //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Create a new image with the given boundary and data.
   *
   * @throws ArrayIndexOutOfBoundsException
   *         if the given width and height do not match the size of the data.
   * @throws NullPointerException
   *         if either data or boundary is null
   */
  public
  MapImage
  {        // side effects:
    {L}  ⊓ // fields are updated
    {A}  ⊓ // boundary is read
    {s→}   // boundary is created at s
  }
  (
    final Box[L,A]  boundary,
    final int       width,
    final int       height,
    final char{L}[] data,
    final Store     s
  )
  : {*provider;data;width;height;boundary}
  throws
  (
    ArrayIndexOutOfBoundsException,
    NullPointerException
  )
  where
    L <= {s→}, {s←} <= L, // TODO: s ≽ L
    A <= {s→},            // TODO: s ≽ C(A)
    {boundary;width;height;data} <= {A meet L}
  {
    if (data == null || boundary == null)
      throw new NullPointerException();

    if (width * height != data.length)
      throw new ArrayIndexOutOfBoundsException();

    this.width  = width;
    this.height = height;
    this.data   = data;

    this.boundary = boundary.copy(L,A,s);
  }


  //////////////////////////////////////////////////////////////////////////////
  // public methods                                                           //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Get a copy of the boundary
   */
  public
  Box[l,a]    {L}       // result is tainted by this.boundary
  getBoundary {*l;*a;A} // fields of result are updated, fields of this accessed
  (
    label l,
    label a,
    Store s
  )
  where
    L <= l
  {
    if (boundary == null)
      throw new AssertionFailedError("boundary is non-null.");

    return boundary.copy(l,a,s);
  }

  /**
   * Get the pixel corresponding to the global location (x,y).
   *
   * @throws ArrayIndexOutOfBoundsException
   *         if (x,y) lies outside the bounding box of the image (subject to
   *         accuracy errors).
   */
  public
  char  {L;x;y} // result is tainted by map and coordinates
  getAt {A}     // fields are accessed
  (
    float x, float y
  )
  throws
  (
    ArrayIndexOutOfBoundsException{L;x;y}
  )
  {
    if (this.data == null)
      throw new AssertionFailedError("data must be non-null");

    return data[index(x,y)];
  }


  /**
   * Set the pixel corresponding to the global location (x,y).
   *
   * @throws ArrayIndexOutOfBoundsException
   *         if (x,y) lies outside the bounding box of the image (subject to accuracy errors).
   */
  public
  void
  setAt {L;A} // L because data is updated; A because fields are accessed
  (
    float {L} x, float {L} y,
    char  {L} value
  )
  :{L}
  throws ArrayIndexOutOfBoundsException
  {
    if (this.data == null)
      throw new AssertionFailedError("data must be non-null");

    data[index(x,y)] = value;
  }


  /**
   * Create a deep copy of this image on store s with label l.
   */
  public
  MapImage[l,a] {L}       // result tainted by this
  copy          {*l;*a;A} // fields are accessed, result is updated
  (
    final label l,
    final label a,
    final Store s
  )
  where
    // see util.Util.copyArray for details about restrictions
    // s ≽ l
    L <= l
  {
    try {

      return new MapImage[l,a] (boundary, width, height, Util.copyArray(data, l, L, s), s);

    } catch (final NullPointerException e) {
      throw new AssertionFailedError("data and boundary must be non-null");
    } catch (final ArrayIndexOutOfBoundsException e) {
      throw new AssertionFailedError("width * height = data.length = Util.copyArray(data, ...).length");
    }
  }


  /**
   * Print image to the given output stream.
   *
   * @throws NullPointerException if out is null
   */
  public
  void
  print {L;A} // fields are accessed, output is generated
  (
    final PrintStream[L] out
  )
  throws
  (
    NullPointerException{out}
  )
  where
    {out} <= L
  {
    // check assertions
    if (out == null)
      throw new NullPointerException();
    if (this.boundary == null)
      throw new AssertionFailedError("boundary is non-null");
    if (this.data == null)
      throw new AssertionFailedError("data is non-null");

    // print map as follows:
    // (top left)
    //     xxxxxxxx
    //     xxxxxxxx
    //     xxxxxxxx
    //             (bottom right)

    out.println("(" + boundary.xmin + ", " + boundary.ymin + ")");
    for (int i = 0; i < height; i++) {
      out.print ('\t');

      for (int j = 0; j < width; j++) {
        try {

          out.print(data[i*width + j]);

        } catch (final ArrayIndexOutOfBoundsException e) {
          // claim: i*width + j < data.length
          // proof:
          //  0 <= i <= height - 1
          //  0 <= j <= width  - 1
          //  i*width + j <= (height - 1) * width + width - 1
          //               = height * width - 1
          //               < data.length
          throw new AssertionFailedError ("width * height = data.length");
        }
      }
      out.println();
    }

    out.print('\t');
    for (int j = 0; j < width; j++)
      out.print(' ');

    out.println("(" + boundary.xmax + ", " + boundary.ymax + ")");
  }

  //////////////////////////////////////////////////////////////////////////////
  // private helper methods                                                   //
  //////////////////////////////////////////////////////////////////////////////

  /** Return the index into data corresponding to the global coordinates (x,y).
   *  Note that if (x,y) is outside the boundary, the result will be outside the bounds
   *  of the data array.
   */
  private
  int     {L;x;y} // result is influenced by width and height, x and y
  index   {A}     // fields are accessed
  (
    float x,
    float y
  )
  {
    // claim: if boundary.contains(x,y) then 0 <= index < data.length
    // proof: since boundary.contains(x,y), boundary.scale_x(x) and
    //        boundary.scale_y(y) ∈ [0,1).
    //        Thus xoff ∈ [0, width) and yoff ∈ [0,height)
    //        TODO: this step could have accuracy problems.
    //        thus yoff * width + xoff ∈ [0, height * width) = [0, data.length)
    if (this.boundary == null)
      throw new AssertionFailedError("boundary must be non-null");

    int xoff = (int) (width  * boundary.scale_x(x));
    int yoff = (int) (height * boundary.scale_y(y));

    return yoff * width + xoff;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
