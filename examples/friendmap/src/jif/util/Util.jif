package util;

import java.io.PrintStream;
import jif.runtime.Runtime;

public class Util {

  /**
   * Copy the contents of an array into another array with the given labels.
   *
   * @throws NullPointerException
   *         if data is null
   */
  public static
  char{*l}[]
  // caller_pc ⊑ C(m) because the fetch on data reflects information
  //       about the data reference and the calling context
  // caller_pc ⊑ l because the calling context flows because external state
  //       (the contents of the result) with label l are updated.
  // thus caller_pc ⊑ l meet C(m) = l meet (m join {_→;_←})
  copyArray {*l} meet {*m;_→;_←}
  (
    final char{*m}[] data,
    label l,
    label m,
    Store s
  )
  throws (
    NullPointerException{data}
  )
  where
    // s ≽ l because s will store the result, labelled l
    // TODO: s actsfor l
    // m ⊑ l because the contents of the array flow to the result
    m <= l,
    // data ⊑ C(m) because the fetch on data reflects information about the reference to data
    {data} <= {*m;_→;_←},
    // data ⊑ {*l} because the output is affected by the reference to the input
    {data} <= {*l}

  {
    final char{*l}[] result = new char[data.length];

    try {

      for (int i = 0; i < data.length; i++)
        result[i] = data[i];

    } catch (final ArrayIndexOutOfBoundsException e) {
      throw new AssertionFailedError("result and data have the same length.");
    }

    return result;
  }

  // TODO: replace with worker$
  public static final principal user = null;

  public static
  PrintStream[lbl] {user←; user→; lbl; *lbl}  // TODO: *lbl should not be here, but needs to be due to overly restrictive jif sig
  stdout
  (
    label lbl
  )
  where
    lbl <= {user→; _←_}
  {
    Runtime[user] runtime;
    try { runtime = Runtime[user].getRuntime(); }
    catch (final SecurityException e) { throw new AssertionFailedError("Runtime[user()].getRuntime() should not fail."); }

    PrintStream[lbl] result;
    try { result  = runtime.stdout(lbl); }
    catch (final SecurityException    e) { throw new AssertionFailedError("runtime[user].stdout(lbl) should not fail if label ⊑ {user←}."); }
    catch (final NullPointerException e) { throw new AssertionFailedError("Runtime.getRuntime() should return a non-null value"); }

    return result;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
