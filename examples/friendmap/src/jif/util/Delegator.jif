package util;

/**
 * Convenience principal class the delegates to a single owner.
 *
 * Intended access label: {this→}
 */
public class Delegator implements Principal {
  protected final String    {this} name;
  protected final principal {this} owner;

  public
  Delegator {this}
  (
    String    {this} name,
    principal {this} owner
  )
  {
    this.owner = owner;
    this.name  = name;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  // side effect: this is fetched
  public String{this} name {this→} () {
    return this.name;
  }

  // side effect: this is fetched
  public boolean{this;p;this←} delegatesTo {this→} (principal p) {
    return p == owner;
  }

  // side effects: this and p may be fetched
  public boolean equals {this→;p→} (Principal p) {
    // TODO
    return false;
  }

  public
  boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
  isAuthorized
  {           // side effects:
    {this←} ⊓ // TODO: ?
    {_→}      // authPrf, closure may be accessed
  }
  (
    Object           authPrf,
    Closure[this,lb] closure,
    label            lb,
    boolean          executeNow
  )
  where
    authority(this),
    {authPrf;closure;lb;executeNow} <= lb
  {
    // we authorize nothing.
    return false;
  }

  public
  ActsForProof{this; p; this←; p←}
  findProofUpto
  {           // side effects:
    {this←} ⊓ // TODO: ?
    {this→} ⊓ // this may be dereferenced
    {_→}      // TODO: searchState may be dereferenced
  }
  (
    Principal p,
    Object searchState
  )
  {
    if (owner actsfor this) {

      ActsForProof proof = PrincipalUtil.findActsForProof(p, owner, searchState);
      if (proof != null)
        return new TransitiveProof(proof, owner, new DelegatesProof(owner, this));
      else
        return null;


    } else throw new AssertionFailedError("owner acts for delegator");
  }

  public
  ActsForProof{this; p; p←; this←}
  findProofDownto
  {           // side effects:
    {this←} ⊓ // TODO: ?
    {this→}   // this is fetched
  }
  (
    Principal p,
    Object searchState
  )
  {
    // how would we know?
    return null;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
