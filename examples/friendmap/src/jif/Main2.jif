import snapp.*;
import friendmap.*;
import mapserv.*;
import jif.principals.*;
import util.*;

import util.System;

public class Main2
authority(System.user)
where
  {System.user←}   <= provider,                     provider                     <= {System.user←},
  {SnappNode←}     <= snapp.Snapp.provider,         snapp.Snapp.provider         <= {SnappNode←},
  {SnappNode←}     <= snapp.UserV1.provider,        snapp.UserV1.provider        <= {SnappNode←},
  {MapServNode←}   <= mapserv.MapServer.provider,   mapserv.MapServer.provider   <= {MapServNode←},
  {MapServNode←}   <= mapserv.MapImage.provider,    mapserv.MapImage.provider    <= {MapServNode←},
  {FriendMapNode←} <= friendmap.FriendMap.provider, friendmap.FriendMap.provider <= {FriendMapNode←}
{
  final Snapp     {System.user←} snapp;
  final MapServer {System.user←} mapServ;
  final FriendMap {System.user←} friendMap;
  final UserV1    {System.user←} alice;
  final UserV1    {System.user←} bob;

  public
  Main2 {System.user←}
  ()
  :{_←}
  throws
    NullPointerException,
    ArrayIndexOutOfBoundsException
  where
    System.user actsfor SnappNode,
    System.user actsfor MapServNode,
    System.user actsfor FriendMapNode,
    System.user actsfor AliceNode,
    System.user actsfor BobNode,
    authority(System.user)
  {
    // create service objects
    this.snapp      = endorse(new     Snapp("snapp",     SnappNode),              {SnappNode←}        to {System.user←});
    if (SnappNode     actsfor snapp) {

    this.mapServ    = endorse(new MapServer("mapserv",   MapServNode, ' '),       {MapServNode←}      to {System.user←});
    if (MapServNode   actsfor mapServ) {

    this.friendMap  = endorse(new FriendMap("friendmap", mapServ, FriendMapNode), {FriendMapNode←}    to {System.user←});
    if (FriendMapNode actsfor friendMap) {

    // create users
    this.alice      = endorse(snapp.createUser("Alice", AliceNode),               {AliceNode←;snapp←} to {System.user←});
    if (AliceNode     actsfor alice) {

    this.bob        = endorse(snapp.createUser("Bob",   BobNode),                 {BobNode←;snapp←}   to {System.user←});
    if (BobNode       actsfor bob) {

    // add delegations
    try {
      alice.friends.add(bob);
      alice.locationInfo.add(mapServ);
    } catch (final NullPointerException e) {
      throw new AssertionFailedError("UserV1.friends and .locationInfo are non-null.");
    } catch (final ArrayIndexOutOfBoundsException e) {
      throw new AssertionFailedError("Alice has too many friends");
    }

    try {
      bob.friends.add(alice);
      bob.locationInfo.add(bob.friends);
    } catch (final NullPointerException e) {
      throw new AssertionFailedError("UserV1.friends and .locationInfo are non-null.");
    } catch (final ArrayIndexOutOfBoundsException e) {
      throw new AssertionFailedError("Alice has too many friends");
    }

    // let'er rip!
    // friendMap.viewMap(alice);

    } else throw new AssertionFailedError("Delegation relationships hold");
    } else throw new AssertionFailedError("Delegation relationships hold");
    } else throw new AssertionFailedError("Delegation relationships hold");
    } else throw new AssertionFailedError("Delegation relationships hold");
    } else throw new AssertionFailedError("Delegation relationships hold");
  }

  public static
  void
  main {System.user←} (String[] args)
  where
    System.user actsfor SnappNode,
    System.user actsfor MapServNode,
    System.user actsfor FriendMapNode,
    System.user actsfor AliceNode,
    System.user actsfor BobNode
  {
    new Main2();
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
