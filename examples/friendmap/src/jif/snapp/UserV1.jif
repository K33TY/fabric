package snapp;

import util.Group;
import util.Meet;
import util.AssertionFailedError;

/**
 * A User object contains all of the data associated with a given user account
 * in the social network.  Users are principals, and delegate to the social
 * network as well as the user who created them.
 *
 * The V1 stands for version 1.  In Fabric, V1 and V2 will both be named User,
 * but will reside in different codebases.
 */
public class UserV1 extends Meet 
where
  Snapp.provider <= provider, provider <= Snapp.provider,
  Group.provider <= provider
{
  /** The name of this principal */
  public final String{this} name;

  /** The user's location, only readable by members of the locationInfo group. */
  public final label {this}           locationLabel = new label {this←;this→locationInfo};
  public Location    {*locationLabel} location;

  /** The user's friends. non-null. */
  public final Group[this] {this} friends;

  /** The social network that can act for this account. non-null. */
  public final Snapp {this} network;

  /** The group containing anyone who can see the user's location. non-null. */
  public final Group[this] {this} locationInfo;



  /**
   * Create a new user with the given name
   *
   * @throws NullPointerException
   *         if network is null
   */
  UserV1 {this}
  (
    String    {this} name,
    principal {this} owner,
    Snapp     {this} network
  )
  throws
  (
    NullPointerException{network}
  )
  where
    {this}    <= {owner←; network←},
    provider  <= {this}
  {
    // these endorsements are safe, because owner ≽ this,
    // and thus {owner←;network←} ⊑ {this←}
    // this just isn't true until after the superclass constructor is called.

    this.network = network;

    this.locationInfo = new Group[this](name + "'s location readers");
    this.friends      = new Group[this](name + "'s friends");

    this.name     = name;

    super(owner, network);

    if (owner actsfor this && network actsfor this)
      this.location = null;
    else
      throw new AssertionFailedError("util.Meet delegates to left and right delegatees");
  }

  public void setLocation {*locationLabel} (Location{*locationLabel} loc) where provider <= {*locationLabel} {
    this.location = loc;
  }

  public String{this} name() { return this.name; }
}

/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
