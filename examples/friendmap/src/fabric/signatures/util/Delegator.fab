/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package util;

// TODO: comments

/**
 * Convenience principal class the delegates to a single owner.
 */
public class Delegator extends AbstractPrincipal {

  public native
  Delegator
  {           // side effects
    {this}// ⊓  // fields are updated
//    {*→store$} // TODO: object is created
  }
  (
    String    {this} name,
    principal {this} owner
  );
  
  public native
  Delegator
  {           // side effects
    {this} //⊓  // fields are updated
//    {*→store$} // TODO: object is created
  }
  (
    String    {this} name
  );

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public native
  String {this}
  name
  { // side effects:
    // TODO
  }
  (
  );


  public native
  boolean {this;p;this←}
  delegatesTo
  { // side effects:
    // TODO
  }
  (
    principal p
  );


  public native
  ActsForProof[{s→}] {this; p; this←; p←;s}
  findProofUpto
  {          // side effects:
    _→;this← // TODO
  }
  (
    Store s,
    Principal p,
    java.lang.Object searchState
  );


  public native
  void
  addDelegatesTo
  {             // side effects:
    this→;this← // TODO
  }
  (
    principal{this:;this!:} p
  )
  where
    caller (this);




  public native
  void
  removeDelegatesTo
  {              // side effects:
    this→; this← // TODO
  }
  (
    principal {this→;this←} p
  )
  where
    caller (this);
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
