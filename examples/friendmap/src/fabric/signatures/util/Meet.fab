package util;

public class Meet extends AbstractPrincipal {

  public
  Meet
  (
    Store     {this} store,
    Principal {this} left,
    Principal {this} right
  )
  where store actsfor (left,right) {
    super(null);
  }

  public
  Meet
  (
    Store     {this} store,
    String    {this} name,
    Principal {this} left,
    Principal {this} right
  )
  where store actsfor (left,right) {
    super(name);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public native
  boolean {this;p;this←}
  delegatesTo
  { // side effects:
    // TODO
  }
  (
    principal p
  );

  public native
  ActsForProof {this; p; this←; p←;s}
  findProofUpto
  {          // side effects:
    ⊥→;this← // TODO
  }
  (
    Store s,
    Principal p,
    java.lang.Object searchState
  );

  public native
  void
  addDelegatesTo
  {             // side effects:
    this→;this← // TODO
  }
  (
    principal{this→;this←} p
  )
  where
    caller (this);


  public native
  void
  removeDelegatesTo
  {             // side effects:
    this→;this← // TODO
  }
  (
    principal{this→;this←} p
  )
  where
    caller (this);
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
