package snapp;

import util.Delegator;
import util.AssertionFailedError;
import util.Meet;
import util.Group;
import util.GroupIterator;

/**
 * An instance of Snapp corresponds to an instance of the Snapp social network.
 */
public class Snapp extends Delegator 
where
  provider <= User.provider, User.provider <= provider,
  util.Group.provider <= provider // goes without saying, since Group.provider is bottom
{

  /* The store this object is stored on.  Used for allocating Users.
   * this.store ≽ this
   */
  protected final Store {_→; *←this}@{*→this} store;

  /**
   * Create a new Snapp, operated by owner.
   */
  public
  Snapp {this}
  (
    String    name,
    principal owner,
    Store     store
  )
  where
    // the parameters and code affect the assignment to the fields
    {*provider; name; owner; store} <= {_→; *←this}
  {
    this.store = store;
    super(store, name, owner);
  }

  // TODO: document/fix labels
  public
  User[owner,this] {*provider} // result is affected by code
  createUser
  {            // side effects:
    {*←this} ⊓ //
    {*←owner}  //
  }
  (
    String    name,
    principal owner
  )
  {
    if (this.store actsfor this)
      return new User[owner,this]@store(name, store);
    else
      throw new AssertionFailedError("Snapp.store should act for Snapp");
  }
}

/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
