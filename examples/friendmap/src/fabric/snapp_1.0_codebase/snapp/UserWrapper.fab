
/**
 * This class is a wrapper for Users, allowing them to be stored in collections
 * of Principals.  It contains references to the parameters of the User.
 * Principal methods are delegated to user.p.  Usage:
 *
 * <pre>
 * Wrapper w = ...
 * User[w.owner, w.network] u = w.user;
 * </pre>
 *
 */

public class UserWrapper[label A]
  implements Principal
{
  public final principal                    {this}@{A} userOwner;
  public final principal                    {this}@{A} userNetwork;
  public final User[userOwner, userNetwork] {this}@{A} user;

  public
  UserWrapper
  {          // side effects:
    {this} ⊓ // fields are set
    {A}      // object is accessed
  }
  (
    final principal userOwner,
    final principal userNetwork,
    final User[userOwner, userNetwork] user
  )
  {
    this.userOwner   = userOwner;
    this.userNetwork = userNetwork;
    this.user        = user;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods : delegate to this.user.p                              //
  //////////////////////////////////////////////////////////////////////////////

  public
  String {this}
  name
  { // side effects:
    // TODO
  }
  (
  )
  {
    return this.user.p.name();
  }


  public
  boolean {this;p;this←}
  delegatesTo
  { // side effects:
    // TODO
  }
  (
    principal p
  )
  {
    return this.user.p.delegatesTo(p);
  }


  public
  boolean
  equals
  {
    _→
  }
  (
    principal p
  )
  {
    return this.user.p.equals(p);
  }

  public
  ActsForProof[{s→}] {this; p; this←; p←;s}
  findProofUpto
  {          // side effects:
    _→;this← // TODO
  }
  (
    Store s,
    Principal p,
    java.lang.Object searchState
  )
  {
    return this.user.p.findProofUpto(s,p,searchState);
  }

}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
