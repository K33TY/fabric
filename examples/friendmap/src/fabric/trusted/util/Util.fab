package util;

import java.io.PrintStream;
import fabric.runtime.Runtime;

public class Util {

  /**
   * Copy the contents of an array into another array with the given labels.
   */
  public static
  char{*l}[]{*m}
  copyArray {*l; *m}
  (
    final char{*n}[]{*o} data,
    label l,
    label m, // TODO: remove, replace with {data}
    label n,
    label o, // TODO: remove
    Store s
  )
  :{*o}
  throws
    NullPointerException
  where
    // s ≽ l because s will store the result, labelled l
    // m ⊑ l because the contents of the array flow to the result
    // caller_pc and data ⊑ C(m) because the fetch on data reflects information
    //       about the data reference and the calling context
    // caller_pc ⊑ l because the calling context flows because external state
    //       (the contents of the result) with label l are updated.
    n <= l,
    o <= m,
    m <= l
  {
    final char{*l}[]{*m} result = new char[data.length]@s;

    try {

      for (int i = 0; i < data.length; i++)
        result[i] = data[i];

    } catch (final ArrayIndexOutOfBoundsException e) {
      throw new AssertionFailedError("result and data have the same length.");
    }

    return result;
  }

  // TODO: replace with worker$
  public static final principal user = null;

  public static
  PrintStream[lbl] {user←; user→; lbl; *lbl}  // TODO: *lbl should not be here, but needs to be due to overly restrictive jif sig
  stdout
  (
    label lbl
  )
  where
    lbl <= {user→; _←_}
  {
    Runtime[user] runtime;
    try { runtime = Runtime[user].getRuntime(); }
    catch (final SecurityException e) { throw new AssertionFailedError("Runtime[user()].getRuntime() should not fail."); }

    PrintStream[lbl] result;
    try { result  = runtime.stdout(lbl); }
    catch (final SecurityException    e) { throw new AssertionFailedError("runtime[user].stdout(lbl) should not fail if label ⊑ {user←}."); }
    catch (final NullPointerException e) { throw new AssertionFailedError("Runtime.getRuntime() should return a non-null value"); }

    return result;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
