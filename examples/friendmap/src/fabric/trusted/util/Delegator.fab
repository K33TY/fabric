/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package util;

/**
 * Convenience principal class the delegates to a single owner.
 */
public class Delegator extends AbstractPrincipal {
  protected final String    {this}@{*→this} name;
  protected final principal {this}@{*→this} owner;

  public
  Delegator
  {      // side effects
    this // TODO
  }
  (
    String    {this} name,
    principal {this} owner
  )
  {
    this.owner = owner;
    this.name  = name;
    super(name);
  }
  
  public
  Delegator
  {      // side effects
    this // TODO
  }
  (
    String    {this} name,
  )
  {
    this.owner = store$;
    this.name  = name;
    super(name);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public
  boolean {this;p;this←}
  delegatesTo
  { // side effects:
    // TODO
  }
  (
    principal p
  )
  {
    return p == owner;
  }

  public
  ActsForProof[{s→}] {this; p; this←; p←;s}
  findProofUpto
  {          // side effects:
    _→;this← // TODO
  }
  (
    Store s,
    Principal p,
    java.lang.Object searchState
  )
  {
    if (owner actsfor this) {

      ActsForProof[{*→s;*←s}] proof = PrincipalUtil.findActsForProof(s, p, owner, searchState);
      if (proof != null) {
        DelegatesProof dp = new DelegatesProof[{*→s;*←s}]@s(owner, this);
        return new TransitiveProof[{*→s;*←s}]@s(proof, owner, dp);
      } else
        return null;

    } else throw new AssertionFailedError("owner acts for delegator");
  }


  public
  void
  addDelegatesTo
  {             // side effects:
    this→;this← // TODO
  }
  (
    principal{this→;this←} p
  )
  where
    caller (this)
  {
    // TODO need to wipe out super.addDelegatesTo
  }


  public
  void
  removeDelegatesTo
  {             // side effects:
    this→;this← // TODO
  }
  (
    principal{this→;this←} p
  )
  where
    caller (this)
  {
    // TODO need to wipe out super.addDelegatesTo
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
