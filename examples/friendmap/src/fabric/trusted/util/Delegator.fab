package util;

/**
 * Convenience principal class the delegates to a single owner.
 */
public class Delegator extends Principal {
  protected final String    {this}@{this->} name;
  protected final principal {this}@{this->} owner;

  public
  Delegator {this}
  (
    String    {this} name,
    principal {this} owner
  )
  {
    // these endorsements are safe, because owner ≽ this,
    // and thus {owner←} ⊑ {this←}
    // we just can't convince the compiler of this fact.

    this.owner = owner;
    this.name  = name;
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public String{this} name() {
    return this.name;
  }

  public boolean{this;p;this←} delegatesTo(principal p) {
    return p == owner;
  }

  public boolean equals(Principal p) {
    // TODO
    return false;
  }

  public
  boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
  isAuthorized {this←}
              (java.lang.Object authPrf,
               Closure[this,lb] closure,
               label            lb,
               boolean          executeNow)
  {
    // we authorize nothing.
    return false;
  }

  public
  ActsForProof[{*→s;*←s}]{this; p; this←; p←;s}
  findProofUpto {*→s;this←}
               (Store{this} s,
                Principal{this} p,
                java.lang.Object searchState)
  {
    if (owner actsfor this) {

      ActsForProof[{*→s;*←s}] proof = PrincipalUtil.findActsForProof(s, p, owner, searchState);
      if (proof != null) {
        DelegatesProof dp = new DelegatesProof[{*→s;*←s}]@s(owner, this);
        return new TransitiveProof[{*→s;*←s}]@s(proof, owner, dp);
      } else
        return null;

    } else throw new AssertionFailedError("owner acts for delegator");
  }

  public
  ActsForProof[{*→s;*←s}]{this; p; p←; this←;s}
  findProofDownto {this←}
                 (Store s,
                  Principal p,
                  java.lang.Object searchState)
  {
    // how would we know?
    return null;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
