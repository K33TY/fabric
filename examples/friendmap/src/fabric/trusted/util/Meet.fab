package util;

public class Meet extends Principal {

  protected final String {this} name;

  protected final Principal{this} left;
  protected final Principal{this} right;

  public
  Meet
  (
    Principal {this} left,
    Principal {this} right
  )
  {
    this.left  = left;
    this.right = right;

    final String leftName  = (left  == null ? "_" : left.name());
    final String rightName = (right == null ? "_" : right.name());

    this.name = "(" + leftName + " meet " + rightName + ")";
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public String{this} name() {
    return this.name;
  }

  public boolean{this;p;this←} delegatesTo(principal p) {
    return p == left || p == right;
  }

  public boolean equals(Principal p) {
    // TODO
    return false;
  }

  /**
   * Returns true if this principal authorizes the given closure.
   */
  public
  boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
  isAuthorized {this←}
              (java.lang.Object authPrf,
               Closure[this,lb] closure,
               label            lb,
               boolean          executeNow)
  {
    return false;
  }

  /**
   * See Principal.findProofUpto.
   */
  public
  ActsForProof{this; p; this←; p←}
  findProofUpto {this←}
               (Store s, Principal p,
                java.lang.Object searchState)
  {
    /*
    if (left actsfor this && right actsfor this) {

      ActsForProof leftProof  = PrincipalUtil.findActsForProof(s, p, left,  searchState);
      ActsForProof rightProof = PrincipalUtil.findActsForProof(s, p, right, searchState);

      if (leftProof != null)
        return new TransitiveProof@s(leftProof,  left,  new DelegatesProof@s(left, this));
      if (rightProof != null)
        return new TransitiveProof@s(rightProof, right, new DelegatesProof@s(right, this));
      else
        return null;

    } else throw new AssertionFailedError("left and right act for meet");
    */
    return null;
  }

  /**
   * See Principal.findProofDownto
   */
  public
  ActsForProof{this; p; p←; this←}
  findProofDownto {this←}
                 (Store c, Principal p,
                  java.lang.Object searchState)
  {
    // how would we know?
    return null;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
