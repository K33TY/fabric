package mapserv;

import util.AssertionFailedError;
import util.Delegator;

// TODO: comments
// TODO: explicit @store

/**
 * A very simple map service: given a request for a region, it returns a 10x10
 * image containing the background value, scaled to the requested region.
 */
public class MapServer
extends Delegator 
where
  MapImage.provider <= provider, provider <= MapImage.provider,
       Box.provider <= provider, provider <=      Box.provider
{

  private char {_→;*←this}@{*→this.store} background;
  final public Store{this}@{*→this.store} store;


  /**
   * Create a new map server, with the given background character.
   */
  public
  MapServer
  {               // side effects:
    {this} ⊓      // TODO
    {_→; *←store} // TODO
  }
  (
    String {this} name,
    Store  {this} store,
    char   {_→; *←store} background
  )
  where
    provider <= {this},
    provider <= {_→;*←store}
  {
    this.store = store;

    super(store, name, store);

    if (store actsfor this)
      this.background = background;
    else
      throw new AssertionFailedError("Delegation failed");
  }

  /**
   * create a new map with the given bounds, containing the background
   * character.
   *
   * @return
   *     a reference to a public image stored at this service
   *
   * @throws NullPointerException
   *     if boundary is null.
   */
  public
  MapImage[l,{*→store}] {*l}
                       // resulting map will be protected at l
                       // and stored at store
  createMap
  {            // side effects:
    {*l}     ⊓ // result is updated
    {*a}     ⊓ // boundary is accessed
    {*→store}  // map is created
  }
  (
    label l,
    label a,
    Box[l,a] boundary
  )
  throws
  (
    NullPointerException{*provider;boundary}
  )
  where
    // TODO; store ≽ l@store; map is created at store
    {*←store} <= l, l <= {*→store}, {*→store} <= {*→store},

    // result taints
    {*provider;*←this;boundary;l} <= l,

    // boundary lookup taints
    {*provider;boundary} <= a
  {
    if (boundary == null) throw new NullPointerException();

    if (store actsfor this) {

    final char{*l}[]{*l} data = new char/* @this.store */[100];
    for (int i = 0; i < data.length; i++)
      data[i] = background;

    if (!(store instanceof Store)) throw new AssertionFailedError("MapServer's store is a store");
    final Store store = (Store) store;

    try {
      return new MapImage[l,{*→this.store}]/* @this.store */(boundary, l, a,
                                                       10, 10, data,
                                                       this.store);
    } catch (final ArrayIndexOutOfBoundsException e) {
      throw new AssertionFailedError("10 * 10 = 100");
    } catch (final NullPointerException e) {
      throw new AssertionFailedError("boundary and data are non-null");
    }

    } else throw new AssertionFailedError("delegators's store actsfor delegatee");
  }
}



/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/

