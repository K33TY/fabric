package bob;

import fabric.util.Map;

import util.AssertionFailedError;

import snapp.User;
import snapp.UserWrapper;

public class AddFriends
where
  // trusted classes are trusted
  util.Group.provider         <= {*←},
  util.GroupIterator.provider <= {*←},
  provider                    <= {*←}
{
  public static
  void
  main
  {
    {*←}
  }
  (
    String[] args
  )
  {
   atomic {
    final Store  snappStore = worker$.getStore("snapp");
    final Map    rootMap    = snappStore.getRoot();

    final UserWrapper[{*→snappStore}] aw = (UserWrapper[{*→snappStore}]) rootMap.get("alice");
    final UserWrapper[{*→snappStore}] bw = (UserWrapper[{*→snappStore}]) rootMap.get("bob");

    final User[aw.userOwner,aw.userNetwork] alice = aw.user;
    final User[bw.userOwner,bw.userNetwork] userBob   = bw.user;

    if (userBob.p equiv new principal (bw.userNetwork, bw.userOwner))
      userBob.friends.add(aw);
    else
      throw new AssertionFailedError("User[n,o].p = (n, o)");
   }
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
