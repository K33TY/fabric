package bob;

import snapp.Snapp;
import snapp.User;
import snapp.UserWrapper;
import mapserv.MapServer;
import util.AssertionFailedError;

public class Init
where
  provider <= {*←},

  snapp.User.provider        <= snapp.Snapp.provider, snapp.Snapp.provider <= snapp.User.provider,
  snapp.UserWrapper.provider <= snapp.Snapp.provider, snapp.Snapp.provider <= snapp.UserWrapper.provider
{
  public static void main {*←} (String[] args) {
    atomic {
      final Store store = worker$.getStore("snapp");
      final Snapp snapp = (Snapp) store.getRoot().get("snapp");

      if (store actsfor snapp
      &&  snapp.store equiv store
      &&  snapp.Snapp.provider <= new label {*←snapp}@store
      ) {

        final User[worker$,snapp]  userBob = snapp.createUser("Bob", worker$);

        if (userBob.p equiv new principal@store (worker$,snapp)
        ) {

          final UserWrapper[{*→snapp}] aw = new UserWrapper[{*→snapp}]@store (store, worker$, snapp, userBob);
          store.getRoot().put("bob", aw);

          final MapServer mapserv = (MapServer) store.getRoot().get("mapserv");
          userBob.locationInfo.add(userBob.friends);
   
        } else throw new AssertionFailedError("userBob.p equiv (bob worker, snapp)");
      } else throw new AssertionFailedError("store actsfor snapp");
    }
  }

}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
