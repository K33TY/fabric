package bob;

import snapp.Snapp;
import snapp.User;
import snapp.Location;
import snapp.UserWrapper;
import mapserv.MapServer;
import util.AssertionFailedError;

public class Init
where
  provider <= {⊤←worker$},

  snapp.User.provider        <= snapp.Snapp.provider, snapp.Snapp.provider <= snapp.User.provider,
  snapp.UserWrapper.provider <= snapp.Snapp.provider, snapp.Snapp.provider <= snapp.UserWrapper.provider,
  snapp.User.provider <= snapp.Location.provider,
  snapp.Location.provider <= snapp.User.provider
{
  public static void main {⊤←} (String[] args) {
    atomic {
      final Store store = worker$.getStore("snapp");
      final Snapp sn = (Snapp) store.getRoot().get("snapp");

      if (store actsfor sn
      &&  sn.store$ equiv store
      &&  snapp.Snapp.provider <= new label {⊤←sn}@store
      ) {

        final User[worker$,sn]  userBob = sn.createUser("Bob", worker$);

        if (userBob.p equiv new principal@store (worker$,sn)
        &&  new label {⊤←sn}   <= userBob.locationLabel // TODO: store ≽ locLbl
        &&  userBob.locationLabel <= new label {⊤→sn}   //
        &&  new label {⊤←userBob.p} <= userBob.locationLabel
        ) {

          final UserWrapper[{⊤→sn}] aw = new UserWrapper[{⊤→sn}]@store (store, worker$, sn, userBob);
          store.getRoot().put("bob", aw);

          //final MapServer serv = (MapServer) store.getRoot().get("mapserv");
          userBob.locationInfo.add(userBob.friends);

          userBob.location = new Location[userBob.locationLabel, {⊤→sn}]@store(3,3);

        } else throw new AssertionFailedError("userBob.p equiv (bob worker, snapp)");
      } else throw new AssertionFailedError("store actsfor snapp");
    }
  }

}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
