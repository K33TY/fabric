
import snapp.Snapp;
import snapp.User;
import snapp.UserWrapper;
import mapserv.MapServer;
import util.AssertionFailedError;

public class Init
where
  provider <= {*←},

  snapp.User.provider        <= snapp.Snapp.provider, snapp.Snapp.provider <= snapp.User.provider,
  snapp.UserWrapper.provider <= snapp.Snapp.provider, snapp.Snapp.provider <= snapp.UserWrapper.provider
{
  public static void main {*←} (String[] args) {
    final Store store = worker$.getStore("snapp");
    final Snapp snapp = (Snapp) store.getRoot().get("snapp");

    if (store actsfor snapp
    &&  snapp.store equiv store
    &&  snapp.Snapp.provider <= new label {*←snapp}
    ) {

      final User[worker$,snapp]  bob = snapp.createUser("Bob", worker$);

      if (bob.p equiv new principal (worker$,snapp)
      ) {

        final UserWrapper[{*→store}] aw = new UserWrapper[{*→store}] (store, worker$, snapp, bob);
        store.getRoot().put("bob", aw);

        final MapServer mapserv = (MapServer) store.getRoot().get("mapserv");
        bob.locationInfo.add(bob.friends);
 
      } else throw new AssertionFailedError("bob.p equiv (bob worker, snapp)");
    } else throw new AssertionFailedError("store actsfor snapp");
  }

}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
