package alice;

import fabric.util.Map;

import friendmap.FriendMap;
import snapp.User;
import snapp.UserWrapper;
import snapp.Snapp;


import util.AssertionFailedError;


public class Run
where
  // Code in Run is completely public.
  provider <= {},

  util.Group.provider         <= {⊤←},
  util.GroupIterator.provider <= {⊤←},

  mapserv.MapServer.provider <= mapserv.Box.provider,           mapserv.Box.provider <= mapserv.MapServer.provider,
  mapserv.MapServer.provider <= mapserv.MapImage.provider, mapserv.MapImage.provider <= mapserv.MapServer.provider,

  friendmap.FriendMap.provider <= {},
    mapserv.MapServer.provider <= {}
{
  public static void main{}(String[] args) {
    atomic {
     final Store snappStore = worker$.getStore("snapp");
     final Store fmStore    = worker$.getStore("friendmap");
     final Map   rootMap    = snappStore.getRoot();
     final Snapp snappP = (Snapp) snappStore.getRoot().get("snapp");

     if (snappStore actsfor snappP
         && snappP.store$ equiv snappStore
         && snapp.Snapp.provider <= new label {⊤←snappP}@snappStore) {

       final UserWrapper[{⊤→snappP}] aw  = (UserWrapper[{⊤→snappP}]) rootMap.get("alice");
       final FriendMap  [{⊤→fmStore}]    app = (FriendMap[{⊤→fmStore}])      rootMap.get("friendmap");

       final User[aw.userOwner,aw.userNetwork] userAlice = aw.user;

       if (userAlice.p equiv new principal (aw.userOwner, aw.userNetwork)
           && new label {⊤→userAlice.p} <= new label {⊤→worker$}
           && userAlice.p actsfor userAlice.friends
           &&  worker$ actsfor aw.userOwner
           &&  worker$ actsfor userAlice.friends) {
         app.viewMap(userAlice, aw.userOwner, aw.userNetwork);
       } else {
         throw new AssertionFailedError("invariants");
       }
     } else {
       throw new AssertionFailedError("store actsfor snapp");
     }
    }
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
