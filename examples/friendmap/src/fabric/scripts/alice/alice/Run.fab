/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package alice;

import fabric.util.Map;

import friendmap.FriendMap;
import snapp.User;
import snapp.UserWrapper;
import snapp.Snapp;


import util.AssertionFailedError;


public class Run
where
  provider <= {*←},

  util.Group.provider         <= {*←},
  util.GroupIterator.provider <= {*←},

  mapserv.MapServer.provider <= mapserv.Box.provider,           mapserv.Box.provider <= mapserv.MapServer.provider,
  mapserv.MapServer.provider <= mapserv.MapImage.provider, mapserv.MapImage.provider <= mapserv.MapServer.provider,

  friendmap.FriendMap.provider <= {_→},
    mapserv.MapServer.provider <= {_→}
{
  public static void main{}(String[] args)
  {
   atomic {
    final Store snappStore = worker$.getStore("snapp");
    final Store fmStore    = worker$.getStore("friendmap");
    final Map   rootMap    = snappStore.getRoot();
    final Snapp snappP = (Snapp) snappStore.getRoot().get("snapp");
    
    if (snappStore actsfor snappP
            &&  snappP.store$ equiv snappStore
            &&  snapp.Snapp.provider <= new label {*←snappP}@snappStore
            ) {

        final UserWrapper[{*→snappP}] aw  = (UserWrapper[{*→snappP}]) rootMap.get("alice");
        final FriendMap  [{*→fmStore}]    app = (FriendMap[{*→fmStore}])      rootMap.get("friendmap");

        final User[aw.userOwner,aw.userNetwork] userAlice = aw.user;

        if (userAlice.p equiv new principal (aw.userOwner, aw.userNetwork) 
                && new label {*->userAlice.p} <= new label {*->worker$}
                && userAlice.p actsfor userAlice.friends
                &&  worker$ actsfor aw.userOwner
                &&  worker$ actsfor userAlice.friends
        ) {
            app.viewMap(userAlice, aw.userOwner, aw.userNetwork);
        } else throw new AssertionFailedError("invariants");
    } else throw new AssertionFailedError("store actsfor snapp");
   }
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
