package alice;

import fabric.util.Map;

import friendmap.FriendMap;
import snapp.User;
import snapp.UserWrapper;

import util.AssertionFailedError;


public class Run
where
  provider <= {*←},

  util.Group.provider         <= {*←},
  util.GroupIterator.provider <= {*←},

  mapserv.MapServer.provider <= mapserv.Box.provider,           mapserv.Box.provider <= mapserv.MapServer.provider,
  mapserv.MapServer.provider <= mapserv.MapImage.provider, mapserv.MapImage.provider <= mapserv.MapServer.provider,

  friendmap.FriendMap.provider <= {_→},
    mapserv.MapServer.provider <= {_→}
{
  public static void main{}(String[] args)
  {
    final Store snappStore = worker$.getStore("snapp");
    final Store fmStore    = worker$.getStore("friendmap");
    final Map   rootMap    = snappStore.getRoot();

    final UserWrapper[{*→snappStore}] aw  = (UserWrapper[{*→snappStore}]) rootMap.get("alice");
    final FriendMap  [{*→fmStore}]    app = (FriendMap[{*→fmStore}])      rootMap.get("friendmap");

    final User[aw.userOwner,aw.userNetwork] userAlice = aw.user;

    if (userAlice.p equiv new principal (aw.userOwner, aw.userNetwork) && userAlice.p actsfor userAlice.friends
    &&  worker$ actsfor aw.userOwner
    &&  worker$ actsfor userAlice.friends
    ) {
      app.viewMap(userAlice, aw.userOwner, aw.userNetwork);
    } else throw new AssertionFailedError("invariants");
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
