/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package travel;

import java.io.PrintStream;
import fabric.runtime.Runtime;
import fabric.util.Map;

public class Main {
    public Main() {
        
    }
    public static boolean{BankPrincipal→CustomerPrincipal;broker←;BankPrincipal←;AirlinePrincipal←;CustomerPrincipal←}
    startTxImpl{CustomerPrincipal←; BankPrincipal←}(
          float{BankPrincipal→AirlinePrincipal,CustomerPrincipal; CustomerPrincipal←; BankPrincipal←} amount,
          Broker[BankPrincipal, CustomerPrincipal]{CustomerPrincipal←; BankPrincipal←} broker,
          RemoteWorker{CustomerPrincipal←; BankPrincipal←} bworker)
    where broker actsfor BankPrincipal,
          broker actsfor broker.airline,
          broker.airlineAcct.user equiv AirlinePrincipal,
          broker.customerAcct.user equiv CustomerPrincipal,
          broker.airline equiv AirlinePrincipal
    {
      boolean returnBool = false;

      atomic {
          if (broker != null && bworker actsfor BankPrincipal && bworker actsfor broker) {
              returnBool = broker.coordinatePurchase@bworker(amount);
          }
      }
        
      return returnBool;
    }
    
    public static boolean{BankPrincipal→CustomerPrincipal;broker←;BankPrincipal←;AirlinePrincipal←;CustomerPrincipal←}
    startTx{CustomerPrincipal←}(
          float{BankPrincipal→AirlinePrincipal,CustomerPrincipal; CustomerPrincipal←} amount,
          Broker[BankPrincipal, CustomerPrincipal]{CustomerPrincipal←} broker,
          RemoteWorker{CustomerPrincipal←} bworker) {

        boolean returnBool = false;
        if (broker != null 
                && broker actsfor BankPrincipal 
                && broker actsfor broker.airline
                && broker.airlineAcct != null
                && broker.airlineAcct.user equiv AirlinePrincipal
                && broker.customerAcct != null
                && broker.customerAcct.user equiv CustomerPrincipal
                && broker.airline equiv AirlinePrincipal
                && broker actsfor CustomerPrincipal) {
            returnBool = startTxImpl(amount, broker, bworker);
        } else {
            returnBool = false;
        }
        return returnBool;
    }
    
}
