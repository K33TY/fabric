/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package bank;

import javax.servlet.ServletException;

import sif.html.*;
import sif.servlet.Action;
import sif.servlet.Request;
import sif.servlet.Servlet;
import fabric.util.Map;


import travel.Broker;
import travel.Config;
import travel.Account;

import login.*;


public class FrontPage extends AuthenticatedAction[BankPrincipal] authority (BankPrincipal) {
    public FrontPage(BankMain{this} m) throws ServletException {
        super("frontpage", m);
    }

    public final void invokeImpl{*lbl}(label{*lbl} lbl,
            Request[BankPrincipal]{*lbl} req,
            Servlet[BankPrincipal]{*lbl} servlet,
            AuthSessState[lbl]{*lbl} state,
            principal{*lbl} currentUser) 
            throws (ServletException{*lbl;req.session←})
            where caller(req.session),
            lbl <= {⊤→req.session},
            req.session equiv state.sessionPrincipal,
            req.session actsfor currentUser {

        if (servlet == null || !(servlet instanceof BankMain)) throw new ServletException("No servlet available"); 
        if (req == null || state == null || currentUser == null) throw new ServletException("Error processing request"); 
        BankMain m = (BankMain)servlet;

        atomic {
            // Display the front page only for the bank principal
            if (currentUser equiv BankPrincipal) {
                FabricWorker w = worker$;
                if (w == null) throw new ServletException("Internal Error");
                final Store store = worker$.getStore(Config.bankStoreName);
                Map root = null;
                if (store != null) {
                    root = (Map) store.getRoot();
                }
                if (root == null) throw new ServletException("Bank Store not accessible");

                Account[BankPrincipal] airlineAccount_ = null,customerAccount_ = null;

                Object aobj = root.get(Config.airlineAccountKey);
                Object cobj = root.get(Config.customerAccountKey);
                if (aobj instanceof Account[BankPrincipal] && cobj instanceof Account[BankPrincipal]) {
                    airlineAccount_ = (Account[BankPrincipal])aobj;
                    customerAccount_ = (Account[BankPrincipal])cobj;
                }
                final Account[BankPrincipal] airlineAccount = airlineAccount_,customerAccount = customerAccount_;
                if (airlineAccount == null || customerAccount == null)
                    throw new ServletException("Could not fetch bank information base");

                // Display the account balances of all accounts maintained by the bank

                final label bp = new label {BankPrincipal←};
                final label lblc = new label {BankPrincipal→CustomerPrincipal; BankPrincipal←};
                final label lbla = new label {BankPrincipal→AirlinePrincipal; BankPrincipal←};
                final label lblca = new label {BankPrincipal→AirlinePrincipal; BankPrincipal→AirlinePrincipal; BankPrincipal←};
                if (lbl <= bp && lblc <= lblca && 
                        lbla <= lblca && 
                        req.session actsfor BankPrincipal &&
                        airlineAccount.user equiv AirlinePrincipal &&
                        customerAccount.user equiv CustomerPrincipal) {
                    Text msg = new Text[bp,bp]("The following are the accounts maintained by the Acme Bank");
                    Text name1 = new Text(airlineAccount.name() + ": ");
                    Text name2 = new Text(customerAccount.name() + ": ");
                    Text value1 = new Text[lbla,bp](Float.toString(airlineAccount.balance()));
                    Text value2 = new Text[lblc,bp](Float.toString(customerAccount.balance()));
                    NodeList[lblca, bp] entries = NodeList.EMPTY();
                    entries = entries==null?null:entries.append(bp, bp, 
                            new TRow[bp, bp](new TCell[bp, bp](msg)));
                    entries = entries==null?null:entries.append(new TRow[lbla, bp](new TCell[lbla, bp]
                                                                                              (new NodeList[lbla,bp](name1,value1))));
                    entries = entries==null?null:entries.append(lblc, bp, new TRow[lblc, bp](new TCell[lblc, bp]
                                                                                                         (new NodeList[lblc,bp](name2,value2))));
                    m.createPage(req, "Bank Home Page", lblca, bp,
                            new NodeList[lblca,bp](bp, bp, createBanner(bp, "Welcome to the Acme Bank System"),
                                    lblca, bp, new Table[lblca, bp](entries)));
                }
            }
        }
    }
}
