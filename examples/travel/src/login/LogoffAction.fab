/**
 * Copyright (C) 2010-2012 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package login;

import javax.servlet.ServletException;

import sif.servlet.*;
import sif.html.*;

public class LogoffAction[principal servP] extends AbstractAction[servP] {
    public LogoffAction(Servlet[servP]{this} servlet) {
        super();
        initFields("logoff",servlet);
    }

    public final void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req) 
    throws (ServletException{*lbl;*:req.session;req.session!:})
        where caller(req.session),
        lbl <= {*:req.session} {

        if (req == null)    throw new ServletException("Error processing request");
        Servlet[servP] servlet_ = getServlet();
        final SessionState state_ = req.getSessionState(lbl);
        if (lbl <= new label{state_.store$->}) {          
          if (!(servlet_ instanceof AbstractServlet[servP]) 
                || !(state_ instanceof AuthSessState)) 
              throw new ServletException("Error processing request");
          
          final AuthSessState state = (AuthSessState)state_;
          final AbstractServlet[servP] servlet = (AbstractServlet[servP])servlet_;
          if (state == null || servlet == null)    throw new ServletException("Error processing request");
  
          atomic {
              Action[servP] a = servlet.findStartAction(req, servlet.defaultActionName(req));
  //            if (!ensureLoggedIn(lbl, req, a)) return;
  
              final label newLbl = new label {*lbl; req.session!:};
  
              if (req.session equiv state.sessionPrincipal) {
                  final principal{req.session!:;*lbl} currentUser = state.currentUser();
//                  final DelegatingPrincipal{req.session!:;*lbl} currentUser = (DelegatingPrincipal)currentUser_;
                  
                  if (currentUser != null && 
                          req.session actsfor currentUser && 
                          lbl <= new label {currentUser→;currentUser←}) {
                      ((DelegatingPrincipal)currentUser).removeDelegatesTo(req.session);
                  }
                  
                  // invalidate the session.
                  req.invalidateSession();
                  
                  // produce the goodbye page.
                  String title = "Goodbye";
                  Paragraph[newLbl, newLbl] para = new Paragraph[newLbl, newLbl]("You have succesfully logged off.");
                  NodeList[newLbl, newLbl] content = new NodeList[newLbl, newLbl](newLbl, newLbl, para); 
                  content = content==null?null:content.append(newLbl, newLbl, new Hyperlink[servP, newLbl, newLbl](req.contextURL(), "Login again"));
                  content = new NodeList[newLbl, newLbl](newLbl, newLbl, createBanner(newLbl, title), createBody(newLbl, newLbl, content));
                  servlet.createPage(req, title, newLbl, newLbl, content);        
              }
              else {
                  throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
              }
        }
      }
    }
}
