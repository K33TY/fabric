package login;

import javax.servlet.ServletException;

import sif.servlet.*;
import sif.html.*;

/**
 * Extend this class to create actions that are protected by login requirement
 */
abstract public class AuthenticatedAction[principal servP] extends AbstractAction[servP] {
    public AuthenticatedAction(Servlet[servP] m) {
        super();
        initFields(m);
    }
    public AuthenticatedAction(String name, Servlet[servP] m) {
        super();
        initFields(name, m);
    }
    
    /**
     * Ensure that there is a logged in user.
     * 
     * @param req the Request
     * @return false if the user is not logged in, true otherwise.
     * @throws ServletException
     */
    protected boolean{*lbl;req.session←} ensureLoggedIn{*lbl}
                                (label{*lbl} lbl,
                                 Request[servP]{*lbl} req,
                                 AuthenticatedAction[servP]{*lbl} successAction,
                                 AbstractServlet[servP]{*lbl} servlet)
    throws (ServletException{*lbl;req.session←})
    where caller(req.session),
    lbl <= {⊤→req.session}
    {
        if (req == null) return false;
        ServletException{*lbl;req.session!:} ex = null;
        boolean{*lbl;req.session!:} ret = true;
        try {
            final AuthSessState[servP, lbl] state = (AuthSessState[servP, lbl])req.getSessionState(lbl);
            final LoginAction[servP] la = new LoginAction[servP](servlet, successAction, req.session);
            
            if (state != null && state.currentUser() == null
                    && new label {req.session←} <= lbl
                    && state.sessionPrincipal equiv req.session) {
                // not logged in yet.
                try {
                    la.invoke(lbl, req);
                    ret = false;
                }
                catch (ServletException e) {
                    ex = e;
                }
            }
        }
        catch (ClassCastException impossible) {  }
        if (ex != null) throw ex;
        return ret;
    }
    
    public final void invoke{*lbl}(label{*lbl} lbl, Request[servP]{*lbl} req) 
    throws (ServletException{*lbl;*:req.session;req.session!:})
        where caller(req.session),
        lbl <= {*:req.session} {
        if(req == null) throw new ServletException("Error processing request");
        Servlet[servP] servlet_ = getServlet();
        atomic {
            SessionState state_ = req.getSessionState(lbl);
            if (servlet_ == null || state_ == null ||
                    !(servlet_ instanceof AbstractServlet[servP]) ||
                    !(state_ instanceof AuthSessState[servP,lbl]))
                throw new ServletException("Error processing request");
            final AbstractServlet[servP] servlet = (AbstractServlet[servP])servlet_;
            final AuthSessState[servP,lbl] state = (AuthSessState[servP,lbl])state_;
            if (state == null || servlet == null) return;

            // Check if someone is logged in. If not, then the login page is created.
            // Simply returning will display that login page
            if (!ensureLoggedIn(lbl, req, this, servlet)) return;
            final label newLbl = new label {*lbl; req.session!:};
            if (req.session equiv state.sessionPrincipal)
            {
                callWrapper(newLbl, req, servlet, state);
            }
            else {
                throw new ServletException("req.session not equivalent to state.sessionPrincipal"); 
            }
        }
    }
    
    public void callWrapper{*lbl}(label{*lbl} lbl,
            Request[servP]{*lbl} req,
            Servlet[servP]{*lbl} servlet,
            AuthSessState[servP, lbl]{*lbl} state) 
                throws (ServletException{*lbl;req.session!:})
                where caller(req.session),
                lbl <= {⊤→req.session},
                {req.session←} <= lbl,
                req.session equiv state.sessionPrincipal {
        if (state == null || req == null) return;
        final principal currentUser = state.currentUser();
        if(req.session actsfor currentUser) {
            this.invokeImpl(lbl, req, servlet, state, currentUser);
        }
    }
          
    public abstract void invokeImpl{*lbl}(label{*lbl} lbl,
                                      Request[servP]{*lbl} req,
                                      Servlet[servP]{*lbl} servlet,
                                      AuthSessState[servP, {*lbl}]{*lbl} state,
                                      principal{*lbl} currentUser) 
        throws (ServletException{*lbl;req.session←})
          where caller(req.session),
          lbl <= {⊤→req.session},
          req.session equiv state.sessionPrincipal,
          req.session actsfor currentUser;

}

