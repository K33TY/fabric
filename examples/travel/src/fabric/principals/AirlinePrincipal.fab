/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.principals;

import fabric.util.Map;
import travel.Config;
import fabric.worker.Store;

import login.LoginClosure;

public class AirlinePrincipal extends ExternalPrincipal {
     
    private final AirlinePassword[this]{this←} pass;
    
    public AirlinePrincipal() {
        // XXX Is this kind of initialization secure?
        this.pass  = new AirlinePassword[this]("password");
        super("airline");
    }
  
    // XXX Can we label this method any which way we want, since it won't
    // be invoked from Fabric code??
    // XXX Where will the declassification w.r.t. password happen?
    public boolean{authPrf; closure; lb; *lb; executeNow; this; this→; this←}
    isAuthorized{⊥→; this←}(java.lang.Object{this→} authPrf, 
            fabric.lang.security.Closure[this, lb]{this→} closure,
            label{this→} lb,
            boolean{this→} executeNow) where authority (this) 
    {
        if (closure instanceof LoginClosure[this] && authPrf instanceof String) {
            String passwd = (String)authPrf;
            if (pass == null) return false;
            String myPass = pass.password;

            if (myPass == passwd || (myPass != null && myPass.equals(passwd))) {
                // password supplied agrees with this password!
                return true;
            }
        }
        return false;
    }
    
  public static AirlinePrincipal{*!:} getInstance{*!:}() {
    atomic {
      FabricWorker cl = FabricWorker.getWorker();
      if (cl != null) {
        final Store brokerStore = cl.getStore(Config.brokerStoreName);
        if (brokerStore != null) {
          Map rootMap = brokerStore.getRoot();
          if (rootMap != null) {
            Object obj = rootMap.get(Config.airlinePrincipalMapKey);
            AirlinePrincipal airline= null;
            if (obj instanceof AirlinePrincipal) {
              airline = (AirlinePrincipal) obj;
            } else {
              airline = new AirlinePrincipal@brokerStore();
              rootMap.put(Config.airlinePrincipalMapKey, airline);
            }
            
            return airline;
          }
        }
      }
      
      return null;
    }
  }

  // Don't much care what store is, we're going to create it where we want
  public static AirlinePrincipal{*!:} getInstance{*!:}(Store store) {
      return getInstance();
  }
  
}

class AirlinePassword[principal P] {
    final String{P←;P→} password;
    AirlinePassword(String{P←;P→} password) {
        this.password = password;
        super();
    }
}
