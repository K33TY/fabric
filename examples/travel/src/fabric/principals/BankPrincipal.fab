/**
 * Copyright (C) 2010-2014 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.principals;

import fabric.util.Map;
import travel.Config;
import fabric.worker.Store;

import login.LoginClosure;

public class BankPrincipal extends ExternalPrincipal {

  private final BankPassword[this]{this←} pass;
  
  public BankPrincipal() {
    // XXX Is this kind of initialization secure?
    this.pass  = new BankPassword[this]("password");
    super("bank");
  }
  
  // XXX Can we label this method any which way we want, since it won't
  // be invoked from Fabric code??
  // XXX Where will the declassification w.r.t. password happen?
  public boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
  isAuthorized{this→;this←}(java.lang.Object authPrf,
             Closure[this, lb] closure,
             label lb,
             boolean executeNow)
    where authority (this),
        {authPrf;closure;lb;executeNow} <= lb,
        lb <= {this→}
  {
      if (authPrf instanceof String) {
          String passwd = (String)authPrf;
          if (pass == null) return false;
          String myPass = pass.password;

          if (myPass == passwd || (myPass != null && myPass.equals(passwd))) {
              // password supplied agrees with this password!
              declassify ({*lb;this←}) { return true; }
          }
      }
      declassify ({*lb;this←}) { return false; }
  }
  
  
  
  public static BankPrincipal{*!:} getInstance{*!:}() {
    atomic {
      FabricWorker cl = FabricWorker.getWorker();
      if (cl != null) {
        final Store brokerStore = cl.getStore(Config.brokerStoreName);
        if (brokerStore != null) {
          Map rootMap = brokerStore.getRoot();
          if (rootMap != null) {
            Object obj = rootMap.get(Config.bankPrincipalMapKey);
            BankPrincipal bank = null;
            if (obj instanceof BankPrincipal) {
              bank = (BankPrincipal) obj;
            } else {
                bank = new BankPrincipal@brokerStore();
                rootMap.put(Config.bankPrincipalMapKey, bank);
            }
            
            return bank;
          }
        }
      }
      
      return null;
    }
  }
  
  // Don't much care what store is, we're going to create it where we want
  public static BankPrincipal{*!:} getInstance{*!:}(Store store) {
      return getInstance();
  }
}

class BankPassword[principal P] {
    final String{P←;P→} password;
    BankPassword(String{P←;P→} password) {
        this.password = password;
        super();
    }
}
