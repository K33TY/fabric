/**
 * Copyright (C) 2010-2014 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package fabric.principals;

import fabric.util.Map;
import travel.Config;

public class CustomerPrincipal extends ExternalPrincipal {
  public CustomerPrincipal() {
    super("customer");
  }
  
  public static CustomerPrincipal{*!:} getInstance{*!:}() {
    atomic {
      FabricWorker cl = FabricWorker.getWorker();
      if (cl != null) {
        final Store brokerStore = cl.getStore(Config.brokerStoreName);
        if (brokerStore != null) {
          Map rootMap = brokerStore.getRoot();
          if (rootMap != null) {
            Object obj = rootMap.get(Config.customerPrincipalMapKey);
            CustomerPrincipal customer = null;
            if (obj instanceof CustomerPrincipal) {
              customer = (CustomerPrincipal) obj;
            } else {
              customer = new CustomerPrincipal@brokerStore();
              rootMap.put(Config.customerPrincipalMapKey, customer);
            }
            
            return customer;
          }
        }
      }
      
      return null;
    }
  }
  
  // Don't much care what store is, we're going to create it where we want
  public static CustomerPrincipal{*!:} getInstance{*!:}(Store store) {
      return getInstance();
  }
  
}
