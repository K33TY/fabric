package airline;

import travel.Config;
import travel.Broker;
import fabric.util.Map;
import sif.servlet.Servlet;
import sif.servlet.Request;
import sif.servlet.SessionState;
import sif.servlet.SessionPrincipal;

import javax.servlet.ServletException;
import login.*;

public final class AirlineMain extends AbstractServlet[AirlinePrincipal] {
  final Store{this} localStore;
  final Store{this} brokerstore;
  final principal{this} broker;
  
  public AirlineMain() throws ServletException {
    FabricWorker cl = FabricWorker.getWorker();
    Store lStore = null;
    if (cl != null) {
      lStore = cl.getLocalStore();
    }
    localStore = lStore;
    brokerstore = worker$.getStore(Config.brokerStoreName);

    Map root = null;
    if (brokerstore != null) {
        root = (Map) brokerstore.getRoot();
    }
    Broker[BankPrincipal, CustomerPrincipal] brokerInit = null;
    if (root != null) {
        Object obj = root.get(Config.brokerMapKey);
        if (obj instanceof Broker[BankPrincipal, CustomerPrincipal]) {
            brokerInit = (Broker[BankPrincipal, CustomerPrincipal])obj;
        }
    }
    broker = brokerInit;
    super();
  }
    
  public void initialize{AirlinePrincipal:;AirlinePrincipal!:}()
      throws ServletException {
      addStartAction(new FrontPage(this));
  }

  public String getPrivateHostID() throws ServletException {
    return "";
  }

  protected String defaultActionName(Request[AirlinePrincipal] req) {
    return "frontpage";
  }
  
  // TODO Provide default implementations for these 2 methods in Servlet.fab:
  // This method will only be called by the runtime
  protected AuthSessState[lbl]{*lbl} createSessionState{*lbl}(label{*lbl} lbl,
      String{*lbl} id, SessionPrincipal{*lbl} session) {
    AuthSessState[lbl] toReturn = null;
    atomic {
      if (localStore != null && localStore equiv worker$ &&
	  lbl <= new label {⊤→worker$} && new label {⊤←worker$} <= lbl) {
	toReturn = new AuthSessState[lbl]@localStore(id, session);
      }
    }
    return toReturn;
  }

  // This method will only be called by the runtime
  // The id can have a bottom label, since it is a random number   
  protected SessionPrincipal createSessionPrincipal(String{⊥→;⊤←} id) {
    SessionPrincipal toReturn = null;
    atomic {
      if (brokerstore != null) {
	toReturn = new SessionPrincipal@brokerstore(id);
      }
    }
    return toReturn;
  }

  /**
   * Look up a User from a given user id
   */
  public principal{p:;p!:;p} lookupUserID{p:; p!:}(
          String{p:; p!:} userID,
          principal{p:; p!:} p)
          where caller(p) {
      if (userID == null) return null;
      if (userID.equals("airline")) return AirlinePrincipal;
      return null;
  }
    
}

