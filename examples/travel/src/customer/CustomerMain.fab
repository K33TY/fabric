package customer;

import travel.Config;
import travel.Broker;
import fabric.util.Map;
import sif.servlet.Servlet;
import sif.servlet.HTMLServlet;
import sif.servlet.Request;
import sif.servlet.SessionState;
import sif.servlet.SessionPrincipal;

import javax.servlet.ServletException;

public final class CustomerMain extends HTMLServlet[CustomerPrincipal] {
  final Store{this}@{⊤→} localStore;
  final Store{this}@{⊤→} brokerstore;
  final principal{this}@{⊤→} broker;

  public CustomerMain() throws ServletException {
    FabricWorker cl = FabricWorker.getWorker();
    Store lStore = null;
    if (cl != null) {
      lStore = cl.getLocalStore();
    }
    localStore = lStore;
    brokerstore = worker$.getStore(Config.brokerStoreName);

    Map root = null;
    if (brokerstore != null) {
      root = (Map) brokerstore.getRoot();
    }
    atomic {
      // XXX: This atomic shouldn't be necessary if we require constructors to
      // be called within transactions.
      if (root != null) {
        Broker[BankPrincipal, CustomerPrincipal] brokerInit = null;
        Object obj = root.get(Config.brokerMapKey);
        if (obj instanceof Broker[BankPrincipal, CustomerPrincipal]) {
          brokerInit = (Broker[BankPrincipal, CustomerPrincipal]) obj;
        }
        broker = brokerInit;
      } else {
        broker = null;
      }
    }
  }

  public void initialize{CustomerPrincipal→;CustomerPrincipal←}() throws ServletException {
    addStartAction(new FrontPage(this));
  }

  public String getPrivateHostID() throws ServletException {
    return "";
  }

  protected String defaultActionName(Request[CustomerPrincipal] req) {
    return "frontpage";
  }

  // TODO Provide default implementations for these 2 methods in Servlet.fab:
  // This method will only be called by the runtime
  protected SessionState{*lbl} createSessionState{*lbl}(
      label{*lbl} lbl, String{*lbl} id, SessionPrincipal{*lbl} session) {
    atomic {
      if (localStore != null
          && localStore equiv worker$
          && lbl <= new label {⊤→worker$}
          && new label {⊤←worker$} <= lbl) {
        return new SessionState@localStore(id, session);
      }
    }
    return null;
  }

  // This method will only be called by the runtime
  protected SessionPrincipal createSessionPrincipal(String{broker→;broker←} id) {
    SessionPrincipal toReturn = null;
    atomic {
      if (brokerstore != null && brokerstore equiv broker) {
        toReturn = new SessionPrincipal@brokerstore(id);
      }
    }
    return toReturn;
  }
}
