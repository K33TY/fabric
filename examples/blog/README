Blog Webapp Example
===================

This example implements a blogging web application on top of Fabric.
There are two components: the blog webapp server (written in FabIL) and
a benchmarking client (written in Java) for stress-testing the server.

This directory contains the following sub-directories:

  - src/fabil:
      source code for the FabIL implementation of the blog example
  - src/java:
      source code for the Java implementation of the blog example and
      the stress-testing client
  - bin:
      a collection of scripts for running the example
  - etc:
      configuration files for the blog's store and worker


Using
-----
This example uses a store named "blog-store" for storing the blog's
data, and a worker named "blog-worker" for running the web frontend.

  0. Begin in the blog example directory and compile the example:

	$ cd $FABRIC/examples/blog
	$ ant

  1. Start the store and worker. The "blog-store" is the backing store
     and "blog-worker" runs the application server. The 'start-all'
     script will start these nodes in a separate xterm window:

	$ bin/start-all

     You can also use an xterm replacement (e.g., gnome-terminal or
     konsole):

        $ XTERM=gnome-terminal bin/start-all

     Or, if you prefer, you can start each node individually in your
     favourite terminal emulator:

        $ bin/start-store
	$ bin/start-blog

  2. Access the blog by browsing to http://localhost:8080/web

  3. You can start a benchmarking client by using the 'start-client'
     script:

	$ bin/start-client

     Once the client is started, you can access it at:

        http://localhost:9000/web

     The client will ask to be connected to a blog. To do so, give it
     the URL http://localhost:8080

     Once the client is connected to the blog, you can run stress tests
     using the "Debug" interface, in the lower-right corner of the
     blog's webpage. (You may need to refresh the page to see any newly
     connected clients.) Refresh the client's webpage to see the status
     of any benchmark that you start.

     You can run multiple clients simultaneously by specifying different
     port numbers. The client runs on port 9000 by default.

        $ bin/start-client 9001

  4. Exit the store using the "exit" command in its console (you can
     also use CTRL-D). Exit the worker and client with CTRL-C.

     You can clean up the store's persistent state by removing 'var'
     from the blog example directory:

	$ rm -rf var

