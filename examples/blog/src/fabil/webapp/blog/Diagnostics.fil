/**
 * Copyright (C) 2010 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package webapp.blog;

import java.net.InetAddress;

import fabric.util.Map;

import fabric.lang.security.Label;

public class Diagnostics {

  public static final int NUM_INITIAL_BLOGS = 50;
  public static final int NUM_INITLAL_COMMENTS = 5;

  private static LocalStore localStore;
  private static Store store;
  private static Label currentLabel;
  
  public static LocalStore getLocalStore() {
    return localStore;
  }
  
  public static Store getStore() {
    return store;
  }
  
  public static Label getCurrentLabel() {
    return currentLabel;
  }
  
  public static void initializeFabric() {
    localStore = Worker.getWorker().getLocalStore();
    store = Worker.getWorker().getStore(System.getProperty("blog.store", "blog-store"));
    currentLabel = localStore.getEmptyLabel();
  }
  
  public static void createDatabase() throws TransactionFailure {
    long start = 0;
    atomic {
      Map root = (Map) store.getRoot();
      Blog instance = (Blog)root.get("blog");
      if(instance == null) {
        atomic {
          Blog.createNewInstance(store, currentLabel);
          //TODO: bug?
          //root.put("blog", Blog.getInstance());
          Blog.getInstance().emptyDatabase();
          addBlogsAndComments(NUM_INITIAL_BLOGS, NUM_INITLAL_COMMENTS);
        }
      } else {
        Blog.setInstance(instance);
      }
      start = System.currentTimeMillis();
    }
    Statistics.getInstance().addTransaction(System.currentTimeMillis() - start);
    
  }

  private static String duplicateString(String msg, int n) {
    StringBuilder b = new StringBuilder();
    for (int i = 0; i < n; i++) {
      b.append(msg);
    }
    return b.toString();
  }

  public static void addBlogs(int n) throws TransactionFailure {
    for (int i = 0; i < n; i++) {
      Transactions.addBlogPost("Title", duplicateString(
          "This is a blog post. ", 50), store, currentLabel);
    }
  }

  public static void addComments(BlogPost p, int m) throws TransactionFailure {
    for (int i = 0; i < m; i++) {
      Transactions.addComment("username", duplicateString(
          "This is a comment. ", 10), p, store, currentLabel);
    }
  }

  public static void addBlogsAndComments(int n, int m)
      throws TransactionFailure {
    for (int i = 0; i < n; i++) {
      long start = 0;
      atomic {
        BlogPost p = Transactions.addBlogPost("Title", duplicateString(
            "This is a blog post. ", 50), store, currentLabel);
        for (int j = 0; j < m; j++) {
          Transactions.addComment("username", duplicateString(
              "This is a comment. ", 10), p, store, currentLabel);
        }

        start = System.currentTimeMillis();
      }
      Statistics.getInstance().addTransaction(System.currentTimeMillis() - start);
    }
  }

}
