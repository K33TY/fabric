/**
 * Copyright (C) 2010-2013 Fabric project group, Cornell University
 *
 * This file is part of Fabric.
 *
 * Fabric is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Fabric is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 */
package webapp.blog;

import fabric.util.Collection;
import fabric.util.Collections;
import fabric.util.Comparator;
import fabric.util.HashMap;
import fabric.util.TreeMap;
import fabric.util.Map;

import fabric.util.Iterator;

public class Blog {

  private static Blog instance;

  private /*final*/ Map/*Integer, BlogPost*/ blogPosts;

  private /*final*/ Map/*Integer, Comment*/ comments;

  private Blog webapp$blog$Blog$() {
    blogPosts = new TreeMap/*Integer, BlogPost*/().fabric$util$TreeMap$(
	new Comparator/*Integer*/() {
	  public Comparator webapp$blog$Blog$1$() {
	    fabric$lang$Object$();
	    return this;
	  }

	  public int compare(Object o1, Object o2) {
	    return ((Integer)o2).intValue() - ((Integer)o1).intValue();
	  }

	  public Object $initLabels() {
	    // update label: {_ <-}
	    // access policy: {_ ->}
	    this.$updateLabel = LabelUtil.noComponents();
	    this.$accessPolicy = LabelUtil.bottomConf();

	    return this;
	  }
	}.webapp$blog$Blog$1$());
    comments = new HashMap/*Integer, Comment*/().fabric$util$HashMap$();
    fabric$lang$Object$();
    return this;
  }

  public void emptyDatabase() {
    Statistics.getInstance().registerRead(this);
    blogPosts.clear();
    comments.clear();
  }

  public Collection/*BlogPost*/ getBlogPosts() {
    Statistics.getInstance().registerRead(this);
    return Collections.unmodifiableCollection(Diagnostics.getLocalStore(),
	blogPosts.values());
  }

  public Collection/*Comment*/ getComments() {
    Statistics.getInstance().registerRead(this);
    return Collections.unmodifiableCollection(Diagnostics.getLocalStore(),
	comments.values());
  }

  public void addBlogPost(BlogPost post) {
    Statistics.getInstance().registerRead(this);
    Statistics.getInstance().registerUpdate(blogPosts);
    blogPosts.put(new Integer(post.getId()), post);
  }

  public void indexComment(Comment c) {
    Statistics.getInstance().registerRead(this);
    comments.put(new Integer(c.getId()), c);
  }

  public void unindexComment(Comment c) {
    Statistics.getInstance().registerRead(this);
    comments.remove(new Integer(c.getId()));
  }
  
  public int getNumBlogPosts() {
    atomic {
      return blogPosts.size();
    }
  }
  
  public int getNumComments() {
    atomic {
      return comments.size();
    }
  }

  public static Blog getInstance() {
    return instance;
  }
  
  public static void createNewInstance(Store s, Label l) {
    instance = new Blog@s().webapp$blog$Blog$();
  }
  
  public static void setInstance(Blog b) {
    instance = b;
  }

  public void removeBlogPost(BlogPost p) {
    Statistics.getInstance().registerRead(this);
    blogPosts.remove(new Integer(p.getId()));
    for (Iterator i = p.getComments().iterator(); i.hasNext(); ) {
      Comment c = (Comment)i.next();
      comments.remove(new Integer(c.getId()));
    }
  }

  public BlogPost getBlogPost(int id) {
    Statistics.getInstance().registerRead(this);
    return (BlogPost)blogPosts.get(new Integer(id));
  }

  public Comment getComment(int id) {
    Statistics.getInstance().registerRead(this);
    return (Comment)comments.get(new Integer(id));
  }

  public Object $initLabels() {
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}
