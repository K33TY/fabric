import fabric.util.Map;
import fabric.runtime.Runtime;

class HivReader [
        principal alice,
        principal bob,
        principal carol,
        principal dave,
        label addressLabel,
        label hivLabel,
        label accessLabel,
        label patientLabel]
{
  public AddressList[accessLabel, accessLabel]{*hivLabel}/*String{addressLabel; hivLabel}*/ readHiv{alice← }@{W2R(*hivLabel)}(
      PatientList[hivLabel, addressLabel, hivLabel]{*hivLabel} patients,
      AddressList[accessLabel,accessLabel]{*hivLabel} addrListIn,
      Store store,
      Store davestore,
      final label hivLabel
      ):{alice→ ; alice← }@{W2R(addressLabel)}
    where store actsfor alice,
          {⊤ ← store } <= patientLabel,
          addressLabel <= accessLabel,
          accessLabel  <= {⊤ → store},
          {⊤ ← store}  <= addressLabel,
          hivLabel     <= accessLabel,
          accessLabel  <= {*hivLabel ; addressLabel},
          addressLabel <= hivLabel,
          patientLabel <= addressLabel,
          {alice← }    <= patientLabel,
          accessLabel  <= {⊤ → davestore},
          {⊤ ← davestore} <= accessLabel,
          accessLabel <= {W2R(accessLabel)},
          patientLabel <= {W2R(patientLabel)},
          addressLabel <= {W2R(addressLabel)},
          hivLabel <= {W2R(*hivLabel)}
           {
    atomic {
      AddressList[accessLabel,accessLabel]{*hivLabel} addrList = addrListIn;
      if (patients != null) {
        PatientList[hivLabel, addressLabel, hivLabel]{*hivLabel} cur = patients;
        while (cur != null) {
          Patient[addressLabel,hivLabel]{*hivLabel} patient = cur.patient;
          PatientList[hivLabel,addressLabel, hivLabel]{*hivLabel} next =
            cur.next;
          if (patient != null) {
            Hiv[hivLabel, accessLabel]{*hivLabel} h = patient.hiv;
            if (h != null) {
              if (!h.hiv) {
                //Filter out non-hiv patient.
                if (next != null) {
                  cur.patient = next.patient;
                  cur.next = next.next;
                  next = next.next;
                } else {
                  cur.patient = null;
                  cur.next = null;
                  next = null;
                }
              }
            }
          }
          cur = next;
        }
      }
      return new AddressList[accessLabel, accessLabel]@davestore(hivLabel, hivLabel, patients);
    }
  }
}
