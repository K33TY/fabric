class HivReader {

  /**
   * Reads the given patient list, saves the list of addresses for HIV-positive
   * patients into the given drop box, and returns a string representation of
   * the result.
   */
  public static String{*addressLabel; *hivLabel}
    readHiv{*listLabel}(
      label{*addressLabel ; *hivLabel} listLabel,
      label{*addressLabel ; *hivLabel} addressLabel,
      label{*addressLabel ; *hivLabel} hivLabel,
      PatientList[listLabel, addressLabel, hivLabel]{*listLabel} patients,
      DropBox[{*addressLabel; *hivLabel}]{*listLabel} dropBox
  )
    where
      // List label is the meet of address and hiv labels.
      listLabel ⊑ {*addressLabel ⊓ *hivLabel},
      {*addressLabel ⊓ *hivLabel} ⊑ listLabel,

      // Drop box's store can store the result.
      {*addressLabel ; *hivLabel} ⊑ {⊤→dropBox.store$},
      {⊤←dropBox.store$} ⊑ {*addressLabel ; *hivLabel}
  {
    if (dropBox == null) return "drop box came back null";

    final Store dropBoxStore = dropBox.store$;
    dropBox.result = null;

    if (patients == null) {
      return "patients came back null";
    }

    String{*addressLabel; *hivLabel} resultStr = "";
    atomic {
      PatientList[listLabel, addressLabel, hivLabel] cur = patients;
      while (cur != null) {
        Patient[addressLabel, hivLabel]{*addressLabel; *hivLabel} patient =
          cur.patient;
        cur = cur.next;

        // Ignore null patients.
        if (patient == null) {
          resultStr = resultStr + "\npatient (singular) came back null";
          continue;
        }

        // Ignore HIV-negative patients.
        if (!patient.hivStatus) {
          resultStr = resultStr + "\niterating past a patient without HIV...";
          continue;
        }

        // Add the patient's address.
        dropBox.result =
            new AddressList@dropBoxStore(patient.address, dropBox.result);
        resultStr =
            resultStr + "\na patient with HIV lives at " + patient.address;
      }
    }

    return resultStr;
  }
}
