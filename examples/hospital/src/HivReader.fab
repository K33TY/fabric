import fabric.util.Map;
import fabric.runtime.Runtime;

class HivReader {

  public static void main{*provider}@{*->}(principal{p<-} p, String[] args):{p->;p<-}@{_->}
  {
    atomic {
      // Get a reference to the store called "store".
      final Store store = FabricWorker.getWorker().getStore("alicenode");
      final Store davestore = FabricWorker.getWorker().getStore("davenode");

      // Get a reference to the runtime.
      final Runtime[p] runtime = Runtime[p].getRuntime();

      // Get principals for alice, bob, and carol.
      final principal alice = 
          FabricWorker.getWorker().getWorker("alicenode").getPrincipal();
      final principal bob = 
          FabricWorker.getWorker().getWorker("bobnode"  ).getPrincipal();
      final principal carol = 
          FabricWorker.getWorker().getWorker("carolnode").getPrincipal();
      final principal dave = 
          FabricWorker.getWorker().getWorker("davenode" ).getPrincipal();

      // Explicitly everybody believes that everybody can read and write
      // the address.
      final label addressLabel  = new label{
        (alice,bob),(carol,dave) → (alice,bob),(carol,dave);
        (alice,bob),(carol,dave) ← (alice,bob),(carol,dave)
      }@store;

      // Explicitly everybody believes only alice can deal with the hivLabel.
      final label hivLabel  = new label{
        (alice,bob),dave → (alice,bob),dave;
        (alice,bob),dave ← (alice,bob),dave
      }@store;

      // Patient records have to be stored somewhere that can hold both
      // addresses and hiv flags.
      final label accessLabel = new label{
        *addressLabel;
        *hivLabel
      }@store;

      // the label of the list of patients: everyone can read it, but only alice can
      // write it.
      final label patientLabel = new label{
        *addressLabel
          meet
        *hivLabel
      }@store;

      if (new label{p<-} <= addressLabel &&
          new label{p<-} <= hivLabel &&
          new label{davestore<-} <= hivLabel &&
          new label{p<-} <= patientLabel &&
          addressLabel <= new label{p->} &&
          patientLabel <= new label{p->} &&
          hivLabel <= new label{p->} &&
          accessLabel <= new label{store->} &&
          accessLabel <= new label{davestore->}) {
        Map daveroot = davestore.getRoot();
        // Cycle through the patients
        Map root = store.getRoot();
        // Grab the patients list
        PatientList[patientLabel,addressLabel, hivLabel]{*patientLabel} patients =
          (PatientList[patientLabel,addressLabel, hivLabel]) root.get("patients");
        if (patients != null) {
          // Empty out the list on DaveStore.
          AddressList[accessLabel,accessLabel] addrList =
            new AddressList[accessLabel,accessLabel]@davestore();
          final AddressList[accessLabel,accessLabel] addrListRoot = addrList;
          while (patients != null) {
            Patient[addressLabel,hivLabel]{*patientLabel} patient = patients.patient;
            PatientList[patientLabel,addressLabel, hivLabel]{*patientLabel} next = 
              patients.next;
            if (patient != null) {
              // Grab the address if they're hiv positive
              String{*addressLabel; *hivLabel} printable = "";
              Address[addressLabel, accessLabel]{*addressLabel} addr=patient.address;
              if (addr != null ) {
                Hiv[hivLabel,accessLabel]{*hivLabel} h = patient.hiv;
                if (h != null) {
                  if (h.hiv) {
                    if (addr.address != null) {
                      // Copy the patient to dave's store.
/* CHANGE THIS LINE */String{*accessLabel} addrCopyS = addr.address;
/*  (for staging)   */Address[accessLabel, accessLabel] addrCopy = 
                        new Address[accessLabel, accessLabel]@davestore(addrCopyS);
                      // Add the new address to Dave's list
                      addrList.next = 
                        new AddressList[accessLabel,accessLabel]@davestore();
                      addrList = addrList.next;
                      addrList.address = addrCopy;
                      printable = "a patient with Hiv Lives at " + addr.address;
                    } else printable = "patient.address.address is null";
                  } else printable = "iterating past a patient without Hiv...";
                } else printable = "patient's hiv object is null";
              } else printable = "patient's address is null";
              runtime.out().println(printable);
            } else runtime.out().println("patient (singular) came back null");
            patients = next;
          }
          daveroot.put("addrList", addrListRoot.next);
        } else runtime.out().println("patients came back null");
      } else runtime.out().println("p does not act for alice");
    }
  }
}
