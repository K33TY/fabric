import fabric.util.Map;
import fabric.runtime.Runtime;

class PatientMaker[
        principal alice,
        principal bob,
        principal carol,
        principal dave,
        label addressLabel,
        label hivLabel,
        label accessLabel,
        label listLabel]
{
  public PatientList[listLabel, addressLabel, hivLabel]{listLabel}
    makePatients{alice← }(Store store, int numPatients):{alice→ ; alice← } 
    where store actsfor alice,
          listLabel    <= {⊤ → store},
          {⊤ ← store } <= listLabel,
          addressLabel <= accessLabel,
          accessLabel  <= {⊤ → store},
          addressLabel <= {⊤ → store},
          {⊤ ← store}  <= addressLabel,
          hivLabel     <= accessLabel,
          hivLabel     <= {⊤ → store},
          {⊤ ← store}  <= hivLabel,
          accessLabel  <= {hivLabel ; addressLabel},
          hivLabel     <= accessLabel,
          addressLabel <= accessLabel,
          accessLabel  <= {hivLabel ; addressLabel},
          {numPatients}<= listLabel,
          addressLabel <= hivLabel,
          listLabel    <= addressLabel,
          {alice← }    <= listLabel
           {
    PatientList[listLabel,addressLabel, hivLabel]{*listLabel} patientRoot = null;
    atomic {
      PatientList[listLabel,addressLabel, hivLabel]{*listLabel} patients =
        new PatientList[listLabel,addressLabel, hivLabel]@store();
        patientRoot = patients;
      for (int i = 0; i < numPatients; i++) {
        Address[addressLabel, accessLabel] addr = 
          new Address[addressLabel, accessLabel]@store(" " + i + " Wysteria Lane");
        Hiv[hivLabel, accessLabel]{*listLabel} h = 
          new Hiv[hivLabel,accessLabel]@store();
        h.hiv = ((i % 2) == 0);
        patients.patient = (new Patient[addressLabel, hivLabel]@store(addr,h));
        if ((i+1) < numPatients) { // avoid the stupid off-by-one issue
          patients.next = new PatientList[listLabel,addressLabel, hivLabel]@store();
          patients = patients.next;
        }
      }
    }
    return patientRoot;
  }
}
